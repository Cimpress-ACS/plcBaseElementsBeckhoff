<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4019.2">
  <POU Name="FB_ExCom" Id="{0692bf64-22ff-43f8-b9f3-9b97a0565cc5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ExCom
VAR_INPUT
	/// Pointer to Received Data Array
	In_pRxData: POINTER TO ARRAY[0..255] OF BYTE;
	/// Pointer to Sending Data Array
	In_pTxData: POINTER TO ARRAY[0..255] OF BYTE;
	/// Amounth of sending data
	In_udiTxCount: UDINT;
	/// Error Acknowledge 
	In_bolErrorAck: BOOL;
END_VAR
VAR_IN_OUT
	/// Command to send Data 1=command; 0=Done
	InOut_bolSend: BOOL;
	/// Command Data received 1=received; 0=Done=Ready for next Data
	InOut_bolRec: BOOL;
END_VAR
VAR_OUTPUT
	/// Amounth of received data
	Out_udiRxCount: UDINT;
	/// Serial interface communication error
	Out_bolComError: BOOL;
	/// Error in protocoll procedure
	Out_bolProtocolErr: BOOL;
	/// Error information to master
	Out_udiErrorCode: UDINT;
END_VAR
VAR
	In_stEL6inData AT %I*: TC2_SERIALCOM.EL6inData22B;
	Out_stEL6outData AT %Q*: TC2_SERIALCOM.EL6outData22B;
	/// Internal Variables
	udiI: UDINT;
	/// Local variable for loops
	udiK: UDINT;
	/// Internal Error Reset
	bolIntReset: BOOL;
	/// Count call trials
	uinCountCall: UINT;
	/// Count call Retrys
	uinCountRetry: UINT;
	/// Temporary value for cecking the sum
	bytCheckValue: BYTE;
	/// Antenna is initializied, until it is not initializied, it send 16#02 in all possible baudrates
	bolSLGInitialized: BOOL := FALSE;
	/// Check Timeout
	bolTimeout: BOOL;
	/// Check Timeout
	bolWait: BOOL;
	/// Send NAK needed
	bolSendNAK: BOOL;
	/// Receive Wait signs
	timWaitReceive: TIME := TIME#5ms;
	/// Receive Wait signs
	timWaitAck: TIME := TIME#400ms;
	/// Sign delay time
	timZVZ: TIME := TIME#45ms;
	/// Time ACK delay
	timQVZ: TIME := TIME#145ms;
	/// Initialisation of the HW card
	bolInitRequest: BOOL;
	/// Setting of the HW Card
	bolSendContinious: BOOL;
	/// Priority at RFID
	bolPriority: BOOL;
	/// Send DLE doubletimes
	bolDLEDouble: BOOL;
	/// New data received
	bolComDataReceived: BOOL;
	/// receiving busy
	bolComRecBusy: BOOL;
	/// Received Data
	udiComSizeReceiveData: UDINT;
	/// Sending busy
	bolComSendBusy: BOOL;
	/// Error at serial line control
	bolErrSerialLineControl: BOOL;
	/// Error at serial line control
	stErrSerialLineControl: ComError_t;
	/// Error at serial line  receiving data
	bolErrReceive: BOOL;
	/// Error at serial line  receiving data
	stErrReceive: ComError_t;
	/// Error at serial line sending data
	bolErrSend: BOOL;
	/// Error at serial line sending data
	stErrSend: ComError_t;
	/// Define Buffer for preparations
	aRxData: ARRAY[0..255] OF BYTE;
	aTxData: ARRAY[0..255] OF BYTE;
	/// Define Buffer for Funciton
	stRxBuffer: TC2_SERIALCOM.ComBuffer;
	/// Transmit data buffer; used with all receive function blocks 
	stTxBuffer: TC2_SERIALCOM.ComBuffer;
	/// Sub Statemachine
	intState: INT := 0;
	intStateOld: INT := 0;
	udiStateLoop: UDINT;
	a_intStateHist: ARRAY[0..9] OF INT;
	udiStateDebug: UDINT;
	udiStateDebugMax: UDINT;
	/// Function for serial communication
	fbSerialLineControl: TC2_SERIALCOM.SerialLineControl;
	fbSerialReceiveData: TC2_SERIALCOM.ReceiveData;
	fbSerialSendData: TC2_SERIALCOM.SendData;
	fbTon: TC2_STANDARD.TON;
	fbWait: TC2_STANDARD.TON;
END_VAR
VAR CONSTANT
	/// Startup
	cExCom_Start: INT := 2500;
	/// Startup
	cExCom_Init: INT := 2501;
	/// Wait for Job
	cExCom_Wait: INT := 2502;
	/// Read recived sign
	cExCom_RxRead: INT := 2504;
	/// Send Data
	cExCom_TxPrepare: INT := 2550;
	/// Send Data
	cExCom_TxSend: INT := 2552;
	/// Error
	cExCom_Error: INT := 2580;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Copyright 2017 Cimpress

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. *)

(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Driver for communication protocoll 3964R
Description in Siemens manual from CP341, A5E02191070-03


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		23.07.2013		AVME/PRE	Start history
___________________________________________________________________________________________________*)

// Always
fbSerialLineControl(
	Mode:= TC2_SERIALCOM.ComSerialLineMode_t.SERIALLINEMODE_EL6_22B, 
	pComIn:= ADR(In_stEL6inData), 
	pComOut:= ADR(Out_stEL6outData), 
	SizeComIn:= SIZEOF(In_stEL6inData), 
	Error=> bolErrSerialLineControl, 
	ErrorID=> stErrSerialLineControl, 
	TxBuffer:= stTxBuffer, 
	RxBuffer:= stRxBuffer);
	
// Check timers
IF intState >= cExCom_Wait THEN
	fbWait(PT:= timWaitAck);
END_IF
		
// Startup set correct Step
IF intState < cExCom_Start THEN
	intState := cExCom_Start;
END_IF

// State Machine
CASE intState OF
	cExCom_Start:
		// Clear Buffer
		FOR udiI := 0 TO 255 DO
			aRxData[udiI] := 0;
			aTxData[udiI] := 0;
		END_FOR
		bolSLGInitialized := FALSE;
		
		// Clear counters
		uinCountCall := 0;
		uinCountRetry := 0;
		
		bolInitRequest := FALSE;
		bolSendContinious := FALSE;
		
		
		// Next State
		IF (bolErrSerialLineControl = FALSE) AND (bolTimeout=TRUE) THEN
			intState := cExCom_Init;
		ELSIF (bolErrSerialLineControl = TRUE) THEN
			intState := cExCom_Error;
		END_IF

	// Wait for a job or received Data //	
	cExCom_Init:	
		bolInitRequest := TRUE;
		
		IF (bolErrSerialLineControl = FALSE) AND (bolTimeout=TRUE) THEN	// Initialisation Done
			intState := cExCom_Wait;
		ELSIF (bolErrSerialLineControl = TRUE) THEN
			intState := cExCom_Error;
		END_IF
	
	// Wait for a job or received Data //	
	cExCom_Wait:	
		bolInitRequest := FALSE;
		bolSendNAK := FALSE;
		fbWait.IN := FALSE;
		
		fbSerialReceiveData(
		//	pPrefix:= , // Not used because no prefix in telegram
			LenPrefix:= 0, 
		//	pSuffix:= , // Not used because no suffix in telegram
			LenSuffix:= 0, 
			pReceiveData:= ADR(aRxData), 
			SizeReceiveData:= 255, 
			Timeout:= timWaitReceive, 
		//	Reset:= , 
			DataReceived=> bolComDataReceived, 
			busy=> bolComRecBusy, 
			Error=> stErrReceive, 
			RxTimeout=> bolErrReceive, 
			LenReceiveData=> udiComSizeReceiveData, 
			RXbuffer:= stRxBuffer);
		
		//Check if Data is received
		IF bolComDataReceived = TRUE THEN
			intState := cExCom_RxRead;
		ELSIF (InOut_bolSend = TRUE) AND (bolPriority = FALSE) THEN
			intState := cExCom_TxPrepare;
		END_IF
			
	// Read first signs if new data sending needed //	
	cExCom_RxRead: 
		// Read Signs
		IF (udiComSizeReceiveData >0) THEN
			// Copy Data
			FOR udiI := 0 TO (SIZEOF(aRxData)-1) DO
				In_pRxData^[udiI] := 0;
			END_FOR
			FOR udiI := 0 TO udiComSizeReceiveData-1 DO
				In_pRxData^[udiI] := aRxData[udiI];
			END_FOR
			InOut_bolRec := TRUE;
			Out_udiRxCount := udiComSizeReceiveData;
		END_IF
		
		intState := cExCom_Wait;

		
	// Send Data //		
	cExCom_TxPrepare:
		FOR udiI := 0 TO (SIZEOF(aTxData)-1) DO
			aTxData[udiI] := 0;
		END_FOR
		FOR udiI := 0 TO In_udiTxCount-1 DO
			aTxData[udiI] := In_pTxData^[udiI];
		END_FOR
		intState := cExCom_TxSend;

	cExCom_TxSend:	
		fbSerialSendData(
			pSendData:= ADR(aTxData), 
			Length:= In_udiTxCount, 
			Busy=> bolComSendBusy, 
			Error=> stErrSend, 
			TXbuffer:= stTxBuffer);
			bolSendContinious := TRUE;

			
		// Check transition
		IF (bolComSendBusy = FALSE) AND (stErrSend = 0) THEN
			intState := cExCom_Wait;
			InOut_bolSend := FALSE;
		ELSIF ((bolComSendBusy = TRUE) AND (bolTimeout = TRUE)) OR (stErrSend <> 0) THEN
			bolErrSend := TRUE;
			intState := cExCom_Error;
		END_IF
		

////////////////////////////////////////////////////////////		
		// Error State //
		cExCom_Error:
			IF bolErrSerialLineControl = TRUE THEN
				Out_udiErrorCode := INT_TO_UDINT(stErrSerialLineControl);
				Out_bolComError := TRUE;
			ELSIF bolErrSend = TRUE THEN
				Out_udiErrorCode := INT_TO_UDINT(stErrSend);				
				Out_bolComError := TRUE;
			ELSIF bolTimeout = TRUE THEN
				Out_bolProtocolErr := TRUE;
			ELSIF (Out_bolComError = FALSE) AND (Out_bolProtocolErr = FALSE) THEN
				Out_bolComError := TRUE;
			END_IF
		
			
			IF (In_bolErrorAck = TRUE) OR (bolIntReset=TRUE) THEN
				intState := cExCom_Wait;
				bolErrSerialLineControl := FALSE; 
				bolErrReceive := FALSE;
				bolErrSend := FALSE;
				bolTimeout := FALSE;
				Out_udiErrorCode := 0;
				Out_bolComError := FALSE;
				Out_bolProtocolErr := FALSE;
				uinCountCall := 0;
				uinCountRetry := 0;
				In_bolErrorAck := FALSE;
				bolInitRequest := FALSE;
			END_IF
		
END_CASE

// Write parallel Outputs to commando word
//Out_stEL6outData.Ctrl.2 := bolInitRequest;
//Out_stEL6outData.Ctrl.3 := bolSendContinious;

// make History of States
IF intStateOld <> intState THEN
	udiStateLoop := 9;
	WHILE udiStateLoop > 0 DO
		a_intStateHist[udiStateLoop] := a_intStateHist[udiStateLoop-1];
		udiStateLoop := udiStateLoop-1;
	END_WHILE
	a_intStateHist[0] := intState;
	intStateOld := intState;
	// Time Out control
	// Check timeout
	fbTon(IN:= FALSE, PT:= timQVZ, Q=>bolTimeout );
ELSE
	IF intState <> cExCom_Error THEN
		fbTon(IN:= TRUE, PT:= timQVZ, Q=>bolTimeout );
	END_IF
END_IF]]></ST>
    </Implementation>
    <ObjectProperties>
      <XmlArchive>
        <Data>
          <o xml:space="preserve" t="POUImageProperty">
            <n n="ImageData" />
            <v n="TransparencyColor">"White"</v>
            <v n="MakeTransparent">false</v>
          </o>
        </Data>
        <TypeList>
          <Type n="Boolean">System.Boolean</Type>
          <Type n="POUImageProperty">{bb741845-1ec5-4be9-bb0d-2cf7058af574}</Type>
          <Type n="String">System.String</Type>
        </TypeList>
      </XmlArchive>
    </ObjectProperties>
  </POU>
</TcPlcObject>