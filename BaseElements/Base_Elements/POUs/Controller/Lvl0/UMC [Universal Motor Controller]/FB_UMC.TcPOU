<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4019.2">
  <POU Name="FB_UMC" Id="{7c7c56be-85d5-4b7e-bf88-0704e3cbe388}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_UMC EXTENDS FB_CtrlBase
VAR_INPUT
	In_uinStatus: UINT;
	In_intMotorActualSpeed: INT;
	In_uinMotorSetSpeed: UINT;
	In_strNetId: AMSNETID;
	In_uintPort: WORD;
	In_uinECATState: UINT;
	In_uinIOData: UINT;
END_VAR
VAR_OUTPUT
	Out_uinControl: UINT;
	Out_uinSpeedSetpoint: UINT;
END_VAR
VAR
	/// Specific interface struct for public access
	SIf: T_Ctrl_SIf_UMC;
	In_unStatus: U_UMC_Lenze_Status;
	Out_unControl: U_UMC_Lenze_Control;
	arTurnDirection: ARRAY[0..MAX_E_TURN_DIRECTION] OF BOOL;
	fbPulse: TC2_STANDARD.TP;
	/// EtherCAT slave diagnostics via CoE
	fbEcCoESdoRead_ErrorText: FB_EcCoESdoRead;
	sErrorText: STRING(80);
	sNetId: T_AmsNetId;
	bSdoRead: BOOL;
END_VAR
VAR CONSTANT
	cLEFT: BOOL := TRUE;
	cRIGHT: BOOL := FALSE;
	cEtherCAT_OP_MODE: UINT := 16#8;
	cEtherCAT_MODE_MASK: UINT := 16#F;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Copyright 2017 Cimpress

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. *)

(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Lenze Motor implementation. 


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		09.07.2013		PC			Start history
0.00.2		04.02.2014		AVM/MRU		Simulation mode
										cCMD_LEFT / cCMD_RIGHT added in FB_init / getCmdState
0.00.3		02.10.2014		AVM/MRU		SingleAnswer in Always added
0.00.4		05.12.2014		HLV/MAH		Motor status information text from CoE added

___________________________________________________________________________________________________*)

SUPER^();

(*
IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -> init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
END_IF;
*)]]></ST>
    </Implementation>
    <Property Name="CtrlSIf" Id="{0157efd5-9fd8-4e1c-b6ad-564577707b27}">
      <Declaration><![CDATA[PROPERTY CtrlSIf : POINTER TO T_Ctrl_SIf_UMC
]]></Declaration>
      <Get Name="Get" Id="{befd4379-cf19-49bc-bc77-d95245dbf624}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[CtrlSIf := ADR(SIf);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="IoInBridge" Id="{06969552-1773-4573-a299-c8c9933c6ef7}">
      <Declaration><![CDATA[{attribute 'object_name' := 'IoInBridge'}
METHOD PROTECTED IoInBridge : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
SIf.In.uinStatus.map			:= THIS^.In_uinStatus				;
SIf.In.intMotorActualSpeed.map	:= THIS^.In_intMotorActualSpeed	;
SIf.In.uinMotorSetSpeed.map		:= THIS^.In_uinMotorSetSpeed		;
SIf.In.bol400V_Ok.map			:= THIS^.In_uinIOData.15;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	BASE_PLC.getInUint(CIf.Job.bolIoForce,ADR(SIf.In.uinStatus));
	BASE_PLC.getInUint(CIf.Job.bolIoForce,ADR(SIf.In.intMotorActualSpeed));
	BASE_PLC.getInUint(CIf.Job.bolIoForce,ADR(SIf.In.uinMotorSetSpeed));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bol400V_Ok));
ELSE
	//simulation of global IO
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_STOP" Id="{09e03bbf-eae1-44ff-a886-88cd140bacad}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_STOP'}
METHOD PROTECTED sta_STOP : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			cCMD_Left:
				SIf.Par.eRotationDirection := E_TURN_DIRECTION.LEFT;
				me.StateMachine.intStateNext := cSTA_RUNBusy;
			cCMD_Right:
				SIf.Par.eRotationDirection := E_TURN_DIRECTION.RIGHT;
				me.StateMachine.intStateNext := cSTA_RUNBusy;
			BASE_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := cSTA_RUNBusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="cmd_MotorClear" Id="{0ad32ce5-02b8-4336-897b-d51700cbd635}">
      <Declaration><![CDATA[{attribute 'object_name' := 'cmd_MotorClear'}
METHOD PROTECTED cmd_MotorClear : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Out_unControl.Output 				:= 0;
SIf.Out.uinSpeedSetpoint.intern 	:= 0;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_OFF" Id="{150e8486-b104-40bc-a4cd-7964d5391c98}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_OFF'}
METHOD PROTECTED sta_OFF : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		SIf.Cur.uinMotorResetCnt := 0;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			cCMD_Left:
				SIf.Par.eRotationDirection := E_TURN_DIRECTION.LEFT;
				me.StateMachine.intStateNext := cSTA_RUNBusy;
			cCMD_Right:
				SIf.Par.eRotationDirection := E_TURN_DIRECTION.RIGHT;
				me.StateMachine.intStateNext := cSTA_RUNBusy;
			BASE_PLC.cCMD_STOP:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
			BASE_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := cSTA_RUNBusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="cmd_MotorStop" Id="{1a8a96f0-c8a9-40ae-90a4-f5ab5f6c384a}">
      <Declaration><![CDATA[{attribute 'object_name' := 'cmd_MotorStop'}
METHOD PROTECTED cmd_MotorStop : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Out_unControl.Output 				:= 0;
Out_unControl.Data.SetDCBreak 		:= 1;
Out_unControl.Data.SetHalt        	:= 1;
Out_unControl.Data.SetQuickStop    	:= 1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="cmd_MotorOff" Id="{326dcdf1-c155-44d9-932c-4ff855772f9d}">
      <Declaration><![CDATA[{attribute 'object_name' := 'cmd_MotorOff'}
METHOD PROTECTED cmd_MotorOff : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Out_unControl.Output 				:= 0;
Out_unControl.Data.SetDCBreak 		:= 1;
Out_unControl.Data.SetHalt        	:= 1;
Out_unControl.Data.SetQuickStop    	:= 1;
SIf.Out.uinSpeedSetpoint.intern 	:= 0;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="getCtrlSIf" Id="{3696bb31-b5b5-4032-aeb8-45d951e4306a}">
      <Declaration><![CDATA[{attribute 'object_name' := 'getCtrlSIf'}
METHOD getCtrlSIf : POINTER TO T_Ctrl_SIf_UMC
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCtrlSIf := ADR(SIf);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Always" Id="{3a485704-ed5c-4489-b478-2352d4f505da}">
      <Declaration><![CDATA[{attribute 'object_name' := 'Always'}
METHOD PROTECTED Always : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//SUPER^.Always();

IF (me.bolChangeBackToAUTO=TRUE) THEN // switch mode to automatic switch off controller
	me.StateMachine.intStateNext := cSTA_OFFBusy;
	me.bolChangeBackToAUTO := FALSE;
END_IF

IF (CIf.SwCfg.bolExist=FALSE) THEN // hardware of controller does not exist
	me.StateMachine.intStateNext := cSTA_SINGLE_ANSWER;
ELSE
    IF (((me.StateMachine.intState=cSTA_INITIALIZED) OR (me.intCmd=cCMD_PON)) 
        AND (me.StateMachine.intState<>cSTA_PONBusy) AND (me.StateMachine.intState<>cSTA_PON)
        AND (me.StateMachine.intState<>cSTA_ERROR) AND (me.StateMachine.intState<>cSTA_ERRORQuit) 
        AND (me.StateMachine.intState<>cSTA_EOFF) AND (me.StateMachine.intState<>cSTA_EOFFBusy)) THEN // switch after startup to PONBusy
        me.StateMachine.intStateNext := cSTA_PONBusy;
    END_IF
END_IF

// ----------------------------------------------------------------------------------
// Simulation
IF (CIf.SwCfg.bolSimulation) THEN
	// Simulate inputs (no physical inputs)
	SIf.In.bol400V_Ok.intern := TRUE;
END_IF

// ----------------------------------------------------------------------------------
// Conditions Always
IF (me.StateMachine.intState<>cSTA_SINGLE_ANSWER) THEN
	
	IF (((me.StateMachine.intState=cSTA_INITIALIZED) OR (me.intCmd=cCMD_PON))
		AND (me.StateMachine.intState<>cSTA_PONBusy) AND (me.StateMachine.intState<>cSTA_PON)
		AND (me.StateMachine.intState<>cSTA_ERROR) AND (me.StateMachine.intState<>cSTA_ERRORQuit)
		AND (me.StateMachine.intState<>cSTA_EOFF) AND (me.StateMachine.intState<>cSTA_EOFFBusy)) THEN
		me.StateMachine.intStateNext := cSTA_PONBusy;
	END_IF

	IF (((me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF))
			AND (me.StateMachine.intState<>cSTA_ERROR) AND (me.StateMachine.intState<>cSTA_ERRORQuit)
			AND (me.StateMachine.intState<>cSTA_EOFF) AND (me.StateMachine.intState<>cSTA_EOFFBusy)
			AND (me.StateMachine.intState<>cSTA_OFF) AND (me.StateMachine.intState<>cSTA_OFFBusy)
			AND (me.StateMachine.intState<>UMC_CmdState.cSTA_RESETMOTORERROR)) THEN
		me.StateMachine.intStateNext := cSTA_OFFBusy;	
	END_IF

	IF ((NOT SIf.In.bol400V_Ok.intern) AND (me.StateMachine.intState <> cSTA_EOFF) 
		AND (me.StateMachine.intState <> BASE_PLC.cSTA_EOFFBusy)
		AND (me.StateMachine.intState <> BASE_PLC.cSTA_ERROR) 
		AND (me.StateMachine.intState <> BASE_PLC.cSTA_PON) 
		AND (me.StateMachine.intState <> BASE_PLC.cSTA_PONBusy) 
		AND (me.StateMachine.intState<>BASE_PLC.cSTA_INITIALIZED)
		AND (me.StateMachine.intState <> BASE_PLC.cSTA_ERRORQuit)) THEN
		me.StateMachine.intStateNext := cSTA_EOFFBusy;				
	END_IF
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{49188027-cec4-4e22-bc48-1162ee5fdc57}">
      <Declaration><![CDATA[{attribute 'object_name' := 'FB_init'}
METHOD FB_init : BOOL
VAR_INPUT
	/// if TRUE, the retain variables are initialized (warm start / cold start)
	bInitRetains: BOOL;
	/// if TRUE, the instance afterwards gets moved into the copy code (online change)
	bInCopyCode: BOOL;
END_VAR
VAR
	iIdx: UINT;
	iLength: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx < iLength) AND (CIf.Job.aCmdList[iIdx].intCmd <> cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx < iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_STOP;
	CIf.Job.aCmdList[iIdx].strName := 'Stop'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'Run'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := cCMD_LEFT;
	CIf.Job.aCmdList[iIdx].strName := 'Left'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := cCMD_RIGHT;
	CIf.Job.aCmdList[iIdx].strName := 'Right'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
ELSE
	;// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_UMC';
CIf.Info.strFullName := 'Universal Motor Controller';

// set alarm class
SIf.Alm[E_ALM_UMC.MotorOnTimeout].eAlmClass := Base_PLC.E_AlmClass.TSTOP;
SIf.Alm[E_ALM_UMC.MotorOnTimeout].strText := 'Motor On Timeout'; 
SIf.Alm[E_ALM_UMC.MotorError].eAlmClass := Base_PLC.E_AlmClass.TSTOP;
SIf.Alm[E_ALM_UMC.MotorError].strText := 'Motor Error';
SIf.Alm[E_ALM_UMC.MotorWarning].eAlmClass := Base_PLC.E_AlmClass.WARNING;
SIf.Alm[E_ALM_UMC.MotorWarning].strText := 'Motor Warning';
SIf.Alm[E_ALM_UMC.MotorOverCurrent].eAlmClass := Base_PLC.E_AlmClass.WARNING;
SIf.Alm[E_ALM_UMC.MotorOverCurrent].strText := 'Motor Over Current';
SIf.Alm[E_ALM_UMC.MotorNotReady].eAlmClass := Base_PLC.E_AlmClass.TSTOP;
SIf.Alm[E_ALM_UMC.MotorNotReady].strText := 'Motor Not Ready';
SIf.Alm[E_ALM_UMC.DirectionParameterOverflow].eAlmClass := Base_PLC.E_AlmClass.TSTOP;
SIf.Alm[E_ALM_UMC.DirectionParameterOverflow].strText := 'Direction Parameter Overflow';
SIf.Alm[E_ALM_UMC.SpeedOverLimit].eAlmClass := Base_PLC.E_AlmClass.WARNING;
SIf.Alm[E_ALM_UMC.SpeedOverLimit].strText := 'Motor Setpoint over the limit';
SIf.Alm[E_ALM_UMC.MotorStatusInformation].eAlmClass := Base_PLC.E_AlmClass.INFO;

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// configuration
SIf.Cfg.uinLC11 := 1500;
SIf.Cfg.uinLC11_100 := 16384;
SIf.Cfg.uinMaxSpeed := 150;

// parameter
SIf.Par.udiStartupOnTime_ms := 5000;
SIf.Par.udiMotorOnTime_ms 	:= 10000;
SIf.Par.uinSpeed_rpm 		:= 1000;
SIf.Par.uinMotorResetPulseTime_ms	:= 500;
SIf.Par.uinMotorResetCnt 		:= 3;
SIf.Par.udiMoveStartLatency 	:= 15;
SIf.Par.udiMoveStopLatency 		:= 60;
SIf.Par.eRotationDirection  := E_TURN_DIRECTION.LEFT;

SIf.Par.udiSimMotorOnTime_ms := SIf.Par.udiMotorOnTime_ms / 10;]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_ERRORQuit" Id="{4cd275a2-017f-4fd0-ac4d-8b20883964bd}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_ERRORQuit'}
METHOD PROTECTED sta_ERRORQuit : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = FALSE) THEN
			IF (me.StateMachine.intStateHistory<=cSTA_PON) THEN
				me.StateMachine.intStateNext := cSTA_PON;
			ELSIF (CIf.SwCfg.bolSimulation = TRUE) THEN	// Do not set operation mode in simulation
				me.StateMachine.intStateNext := BASE_PLC.cSTA_OFF;
			ELSE
				me.StateMachine.intStateNext := UMC_CmdState.cSTA_RESETMOTORERROR;
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetSpeedValue" Id="{66b53486-bbd4-4830-9c89-63959ea0da21}">
      <Declaration><![CDATA[{attribute 'object_name' := 'GetSpeedValue'}
METHOD PROTECTED GetSpeedValue : UINT
VAR
	uinSpeedOutput: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[uinSpeedOutput := SIf.Par.uinSpeed_rpm * SIf.Cfg.uinLC11_100 / SIf.Cfg.uinLC11;

IF uinSpeedOutput > SIf.Cur.uinSpeedLimit THEN
	uinSpeedOutput := SIf.Cur.uinSpeedLimit;
	pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_UMC.SpeedOverLimit),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
END_IF

GetSpeedValue := uinSpeedOutput;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoOutBridge" Id="{736f9f75-7cb1-43df-8de3-f69d4bdd9b87}">
      <Declaration><![CDATA[{attribute 'object_name' := 'IoOutBridge'}
METHOD PROTECTED IoOutBridge : BOOL
VAR
	bolSwitchValvesOff: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	BASE_PLC.setOutUint(CIf.Job.bolIoForce ,ADR(SIf.Out.uinControl));
	BASE_PLC.setOutUint(CIf.Job.bolIoForce ,ADR(SIf.Out.uinSpeedSetpoint));

	THIS^.Out_uinControl			:= SIf.Out.uinControl.map	;
	THIS^.Out_uinSpeedSetpoint		:= SIf.Out.uinSpeedSetpoint.map	;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine" Id="{7d9bdba7-64c2-4795-9f3a-03cc5948e4c4}">
      <Declaration><![CDATA[{attribute 'object_name' := 'StateMachine'}
METHOD PROTECTED StateMachine : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	cSTA_RUNBusy:
		THIS^.sta_RUNBusy();
	cSTA_RUN:
		THIS^.sta_RUN();
	cSTA_STOPBusy: 
        THIS^.sta_STOPBusy();
    cSTA_STOP: 
        THIS^.sta_STOP();
	UMC_CmdState.cSTA_RESETMOTORERROR:
		THIS^.sta_RESETMOTORERROR();
END_CASE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_PON" Id="{7f3296c6-7073-4b07-8edd-16b8f4336c81}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_PON'}
METHOD PROTECTED sta_PON : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		;
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RESETMOTORERROR" Id="{8264d63d-8bc3-4403-911a-4948072988bd}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_RESETMOTORERROR'}
METHOD PROTECTED sta_RESETMOTORERROR : BOOL
VAR
	eMotorStatus: E_UMC_MOTOR_STATUS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		cmd_MotorReset();
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		eMotorStatus := GetMotorStatus(sif.In.uinStatus.intern);

		IF me.SubStateMachine.udiTimeInState_ms > SIf.Par.uinMotorResetPulseTime_ms THEN
			SIf.Cur.uinMotorResetCnt := SIf.Cur.uinMotorResetCnt + 1;
			me.StateMachine.intStateNext := BASE_PLC.cSTA_OFFBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		Out_unControl.Data.ResetFault := FALSE;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RUNBusy" Id="{90aee50a-6506-4bb5-b1aa-9f9d7c1ddd68}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_RUNBusy'}
METHOD PROTECTED sta_RUNBusy : BOOL
VAR
	uniStatus: U_UMC_Lenze_Status;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		SIf.Cur.uinSpeed_rpm := SIf.Par.uinSpeed_rpm;
		SIf.Cur.uinSpeedOuput := GetSpeedValue();
		SIf.Cur.eDirection 	:= SIf.Par.eRotationDirection;
		
		// Switch Motor ON
		IF SIf.Par.eRotationDirection < E_TURN_DIRECTION.MAX_E_TURN_DIRECTION THEN
			cmd_MotorOn(arTurnDirection[SIf.Par.eRotationDirection], SIf.Cur.uinSpeedOuput);
		ELSE
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_UMC.DirectionParameterOverflow),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
		END_IF

		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiSimMotorOnTime_ms);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				SIf.In.uinMotorSetSpeed.intern 	:= SIf.Out.uinSpeedSetpoint.intern;
				SIf.In.uinMotorSetSpeed.intern 	:= SIf.Out.uinSpeedSetpoint.intern;
				uniStatus.Input 				:= 0;
				uniStatus.Data.DriveReady		:= 1;
				uniStatus.Data.SpeedActEqualSet := 1;
				uniStatus.Data.SpeedSetReached  := 1;
				uniStatus.Data.Status_1			:= 1;
				uniStatus.Data.Status_3			:= 1;
				uniStatus.Data.SpeedCcw			:= arTurnDirection[SIf.Par.eRotationDirection];
				SIf.In.uinStatus.intern 		:= uniStatus.Input;
			END_IF
		END_IF

		IF (me.StateMachine.udiTimeInState_ms > SIf.Par.udiMotorOnTime_ms) THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_UMC.MotorOnTimeout),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
		END_IF

		IF In_unStatus.Data.Trouble THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_UMC.MotorError),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
		END_IF
		
		IF (me.StateMachine.intStateNext <> Base_PLC.cSTA_ERROR) THEN
			IF (NOT In_unStatus.Data.Trouble) 
				AND (THIS^.arTurnDirection[SIf.Cur.eDirection] = In_unStatus.Data.SpeedCcw)	THEN
//				AND (In_unStatus.Data.SpeedSetReached) THEN
				me.StateMachine.intStateNext := cSTA_RUN;
			END_IF;	

			// Reenter the RunBusy state again if the speed changes
			IF GetSpeedValue() <> SIf.Cur.uinSpeedOuput THEN
				me.StateMachine.intStateLastCycle := -1;
			END_IF
			
			// Reenter the RunBusy state again if the direction changes.
			IF SIf.Par.eRotationDirection <> SIf.Cur.eDirection THEN
				me.StateMachine.intStateLastCycle := -1;
			END_IF
			
			CASE me.intCmd OF
				cCMD_Left:
					IF SIf.Par.eRotationDirection <> E_TURN_DIRECTION.LEFT THEN
						SIf.Par.eRotationDirection := E_TURN_DIRECTION.LEFT;
						me.StateMachine.intStateLastCycle := -1;
					END_IF
				cCMD_Right:
					IF SIf.Par.eRotationDirection <> E_TURN_DIRECTION.RIGHT THEN
						SIf.Par.eRotationDirection := E_TURN_DIRECTION.RIGHT;
						me.StateMachine.intStateLastCycle := -1;
					END_IF
				BASE_PLC.cCMD_STOP:
					me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
			END_CASE
		END_IF
END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_EOFFbusy" Id="{9c2f9fe8-215d-4fdf-97c0-6e2185aa0bfa}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_EOFFbusy'}
METHOD PROTECTED sta_EOFFbusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle;
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	
	cmd_MotorClear();
END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	IF (TRUE) THEN
		me.StateMachine.intStateNext := BASE_PLC.cSTA_EOFF;
	END_IF
END_IF

//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
	;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_OFFBusy" Id="{9e716469-41e6-4c16-83b3-eae4c2af4606}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_OFFBusy'}
METHOD PROTECTED sta_OFFBusy : BOOL
VAR
	eMotorStatus: E_UMC_MOTOR_STATUS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		cmd_MotorOff();
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		eMotorStatus := GetMotorStatus(sif.In.uinStatus.intern);

		IF NOT In_unStatus.Data.Trouble 
		  AND In_unStatus.Data.ActSpeedIsZero
		  AND (eMotorStatus = E_UMC_MOTOR_STATUS.ReadyToSwitchON) THEN
			me.StateMachine.intStateNext := Base_PLC.cSTA_OFF;
		ELSIF (CIf.SwCfg.bolSimulation = TRUE) THEN	// Do not set operation mode in simulation
			me.StateMachine.intStateNext := BASE_PLC.cSTA_OFF;
		ELSE
			IF me.StateMachine.udiTimeInState_ms > SIf.Par.uinMotorResetPulseTime_ms THEN
				IF SIf.Cur.uinMotorResetCnt > SIf.Par.uinMotorResetCnt THEN
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_UMC.MotorError),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
				ELSE
					me.StateMachine.intStateNext := UMC_CmdState.cSTA_RESETMOTORERROR;
				END_IF
			END_IF
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RUN" Id="{ac65b301-60da-4f47-a010-e58ca5188043}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_RUN'}
METHOD PROTECTED sta_RUN : BOOL
VAR
	uniStatus: U_UMC_Lenze_Status;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		CIf.Job.intACmd := BASE_PLC.cCMD_DONE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF In_unStatus.Data.Trouble THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_UMC.MotorError),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
		END_IF
		
		IF (me.StateMachine.intStateNext <> Base_PLC.cSTA_ERROR) THEN
			// Reenter the RunBusy state again if the speed changes
			IF SIf.Par.uinSpeed_rpm <> SIf.Cur.uinSpeed_rpm THEN
				me.StateMachine.intStateNext := cSTA_RUNBusy;
			END_IF
			
			// Reenter the RunBusy state again if the direction changes.
			IF SIf.Par.eRotationDirection <> SIf.Cur.eDirection THEN
				me.StateMachine.intStateNext := cSTA_RUNBusy;
			END_IF

			CASE me.intCmd OF
				cCMD_Left:
					SIf.Par.eRotationDirection := E_TURN_DIRECTION.LEFT;
					me.StateMachine.intStateNext := cSTA_RUNBusy;
				cCMD_Right:
					SIf.Par.eRotationDirection := E_TURN_DIRECTION.RIGHT;
					me.StateMachine.intStateNext := cSTA_RUNBusy;
				BASE_PLC.cCMD_STOP:
					me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
			END_CASE
		END_IF
END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_ERROR" Id="{b89e4623-bf9b-4d13-915b-6b332e27f154}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_ERROR'}
METHOD PROTECTED sta_ERROR : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -> possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		SIf.Cur.uinMotorResetCnt := 0;
		cmd_MotorOff();
		
		bSdoRead := TRUE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		sNetId := F_CreateAmsNetId(In_strNetId);
		fbEcCoESdoRead_ErrorText(sNetId := sNetId,
								 nSlaveAddr := WORD_TO_UINT(In_uintPort),
								 nSubIndex := 3,
								 nIndex := 16#5F59,
								 pDstBuf := ADR(sErrorText),
								 cbBufLen := 70,
								 bExecute := bSdoRead,
								 tTimeout := T#500MS);
								 
		IF bSdoRead AND NOT fbEcCoESdoRead_ErrorText.bBusy THEN
			bSdoRead := FALSE;
		END_IF
		
		IF F_toUCase(sErrorText) <> 'NO ERROR' THEN
			SIf.Alm[E_ALM_UMC.MotorStatusInformation].strText := sErrorText;
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_UMC.MotorStatusInformation),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetMotorStatus" Id="{ba97abe5-84c2-4af3-b8dd-6dedb07bbbb2}">
      <Declaration><![CDATA[{attribute 'object_name' := 'GetMotorStatus'}
METHOD PROTECTED GetMotorStatus : E_UMC_MOTOR_STATUS
VAR_INPUT
	uinMotorStatus: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[uinMotorStatus := uinMotorStatus AND 16#0F00;
uinMotorStatus := SHR(uinMotorStatus,8);
GetMotorStatus := UINT_TO_INT(uinMotorStatus);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CtrlInit" Id="{be50f307-0332-4dfb-86e8-1d7e3f9b4a0a}">
      <Declaration><![CDATA[{attribute 'object_name' := 'CtrlInit'}
METHOD CtrlInit : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.CtrlInit();

arTurnDirection[E_TURN_DIRECTION.AUTOMATIC] := FALSE;
arTurnDirection[E_TURN_DIRECTION.LEFT] 		:= FALSE;
arTurnDirection[E_TURN_DIRECTION.RIGHT] 	:= TRUE;

SIf.Cur.uinSpeedLimit := SIf.Cfg.uinMaxSpeed * SIf.Cfg.uinLC11_100 / 100;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_EOFF" Id="{bfe5d590-8682-4646-bfdd-2258cd36f1d7}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_EOFF'}
METHOD PROTECTED sta_EOFF : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;	
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN		
		// As long as the EMO is not reseted!
		IF SIf.In.bol400V_Ok.intern THEN
			IF me.StateMachine.intStateHistory=cSTA_PONBusy OR me.StateMachine.intStateHistory=cSTA_PON THEN
				me.StateMachine.intStateNext := BASE_PLC.cSTA_PONBusy;
			ELSE
				me.StateMachine.intStateNext := BASE_PLC.cSTA_OFFBusy;
			END_IF
		ELSE
			IF me.intCmd <> BASE_PLC.cCMD_OFF THEN
				// Clear pending and new commands cyclic to prevent automatic recovery!	
				CIf.Job.intACmd := BASE_PLC.cCMD_DONE;
				CIf.Job.intMCmd := BASE_PLC.cCMD_DONE;		
			END_IF
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_STOPBusy" Id="{c180d7f4-f7f7-488b-8aaa-4b056e975904}">
      <Declaration><![CDATA[{attribute 'object_name' := 'sta_STOPBusy'}
METHOD PROTECTED sta_STOPBusy : BOOL
VAR
	uniStatus: U_UMC_Lenze_Status;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		// Switch Motor Off
		cmd_MotorStop();
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (CIf.SwCfg.bolSimulation) THEN
			SIf.In.uinMotorSetSpeed.intern 	:= 0;
			SIf.In.intMotorActualSpeed.intern 	:= 0;
			uniStatus.Input 				:= 0;
			uniStatus.Data.ActSpeedIsZero	:= TRUE;
			SIf.In.uinStatus.intern 		:= uniStatus.Input;
		END_IF

		IF (me.StateMachine.udiTimeInState_ms < SIf.Par.udiMotorOnTime_ms) THEN
			IF (NOT In_unStatus.Data.Trouble) AND (In_unStatus.Data.ActSpeedIsZero) THEN
				me.StateMachine.intStateNext := Base_PLC.cSTA_STOP;
			END_IF;	
		ELSE
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_UMC.MotorError),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
		END_IF
END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		Out_unControl.Data.ResetFault := FALSE;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="cmd_MotorReset" Id="{cb1c0de1-c819-406c-9479-8b1d7fc3d345}">
      <Declaration><![CDATA[{attribute 'object_name' := 'cmd_MotorReset'}
METHOD PROTECTED cmd_MotorReset : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[cmd_MotorOff();
Out_unControl.Data.ResetFault 		:= 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CycleEndDuty" Id="{cbbdec4d-6cee-48b4-953e-bd11ec7bb1cd}">
      <Declaration><![CDATA[{attribute 'object_name' := 'CycleEndDuty'}
METHOD PROTECTED CycleEndDuty : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SIf.Out.uinControl.intern := Out_unControl.Output;

SUPER^.CycleEndDuty();]]></ST>
      </Implementation>
    </Method>
    <Method Name="getCmdState" Id="{d6b7f123-3a09-4b60-a640-1798c6d05ee8}">
      <Declaration><![CDATA[{attribute 'object_name' := 'getCmdState'}
METHOD PROTECTED getCmdState : STRING
VAR_INPUT
	intCmdState: INT;
	bolState: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		// Comands's
		CASE intCmdState OF
			cCMD_LEFT: 
				getCmdState := 'cCMD_Left';
			cCMD_RIGHT: 
				getCmdState := 'cCMD_Right';
		END_CASE;
	ELSE
		// States's
		CASE intCmdState OF
			cSTA_RUN: 
				getCmdState := 'RUN';
			cSTA_RUNBusy: 
				getCmdState := 'RUNBusy';
			UMC_CmdState.cSTA_RESETMOTORERROR:
				getCmdState := 'RESETMOTORERROR';
		END_CASE;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="cmd_MotorOn" Id="{e8a1edd6-9a14-4af6-bda0-9cb0cbe53275}">
      <Declaration><![CDATA[{attribute 'object_name' := 'cmd_MotorOn'}
METHOD PROTECTED cmd_MotorOn : BOOL
VAR_INPUT
	/// Direction of the drive; False = Right; True = Left
	bDirection: BOOL;
	/// Speed of the belt
	uinSpeed: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Out_unControl.Output 				:= 0;
Out_unControl.Data.EnableOperation 	:= 1;
Out_unControl.Data.SwitchOn        	:= 1;
Out_unControl.Data.SetSpeedCcw     	:= bDirection;

SIf.Out.uinSpeedSetpoint.intern 	:= uinSpeed;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CycleStartDuty" Id="{ef85c73c-cf9d-4365-978d-303e02039685}">
      <Declaration><![CDATA[{attribute 'object_name' := 'CycleStartDuty'}
METHOD PROTECTED CycleStartDuty : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.CycleStartDuty();

In_unStatus.Input := SIf.In.uinStatus.intern;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>