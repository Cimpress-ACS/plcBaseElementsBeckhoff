<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.26">
  <POU Name="FB_DataChannelSendBase" Id="{9ca32cbe-e398-4609-b63d-1179e1b9b048}">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DataChannelSendBase IMPLEMENTS I_DataChannelSend
VAR CONSTANT
	cMAX_DATACHANNEL_ITEM_SIZE: UINT := 200;
	cMAX_RETRY: INT := 10;
	cDataState_DONE: INT := -1;
	cDataCmd_Ready: INT := 1;
	cDataCmd_ClearBuffer: INT := -98;
	cDataCmd_Retry: INT := -99;
	cDataCmd_Error: INT := -100;
END_VAR
VAR
	/// Saber Inteface Variables
	/// -----------------------------------------------------------------
	m_uinDataSize: UDINT;
	///	m_pOutputData				: POINTER TO T_IdBase_DCH;
	m_iDchConfirm: INT;
	/// Local Variables
	/// -----------------------------------------------------------------
	m_eState: E_PlcSaberDHCState := E_PlcSaberDHCState.Init;
	m_eError: E_DCH_Error;
	m_intCountRetry: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE m_eState OF
	E_PlcSaberDHCState.Init:
		m_eError := E_DCH_Error.None;
		m_eState := E_PlcSaberDHCState.WaitForJob;
		m_iDchConfirm := cDataState_DONE;
		
	E_PlcSaberDHCState.WaitForJob:
		;  // Method SendData is needed to go out of this state
		
	E_PlcSaberDHCState.SendData:
		m_iDchConfirm := cDataCmd_Ready;
		m_eState := E_PlcSaberDHCState.Acknowledge;
		
	E_PlcSaberDHCState.Acknowledge:
		CASE m_iDchConfirm OF
			cDataState_DONE:
				m_iDchConfirm := cDataState_DONE;
				m_eState := E_PlcSaberDHCState.WaitForJob;
			cDataCmd_Retry:
				m_eState := E_PlcSaberDHCState.Retry;
			cDataCmd_Error:	
				m_eState := E_PlcSaberDHCState.Error;
			cDataCmd_ClearBuffer:	
				m_eState := E_PlcSaberDHCState.ClearBufferBusy;
		END_CASE
		
	E_PlcSaberDHCState.Retry:
		IF m_intCountRetry < cMAX_RETRY THEN
			m_intCountRetry := m_intCountRetry + 1;
			m_eState := E_PlcSaberDHCState.SendData;
		ELSE
			m_eState := E_PlcSaberDHCState.Error;
		END_IF
		
	E_PlcSaberDHCState.Error:
		m_eError := E_DCH_Error.Unknown;
		m_eState := E_PlcSaberDHCState.WaitForJob;

	E_PlcSaberDHCState.ClearBufferBusy:
		// Wait for method ClearBufferDone call

	E_PlcSaberDHCState.ClearBufferDone:
		m_iDchConfirm := cDataState_DONE;
		m_eState := E_PlcSaberDHCState.WaitForJob;
END_CASE]]></ST>
    </Implementation>
    <Property Name="Error" Id="{46fe627d-deb6-4405-b12f-bc915bf22955}">
      <Declaration><![CDATA[PROPERTY Error : INT
]]></Declaration>
      <Set Name="Set" Id="{65242895-6786-4698-a159-96eca467674d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[]]></ST>
        </Implementation>
        <ObjectProperties />
      </Set>
      <Get Name="Get" Id="{9f026aa6-ef8a-4c47-a8cf-2148c306d425}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error := m_eError;]]></ST>
        </Implementation>
        <ObjectProperties />
      </Get>
      <ObjectProperties />
    </Property>
    <Method Name="ClearBufferDone" Id="{5dec0c3b-f5b2-4f15-9217-29eada20b07b}">
      <Declaration><![CDATA[{attribute 'object_name' := 'ClearBufferDone'}
METHOD ClearBufferDone : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[m_eState := E_PlcSaberDHCState.ClearBufferDone;	
]]></ST>
      </Implementation>
      <ObjectProperties />
    </Method>
    <Property Name="ClearBufferRequest" Id="{6d90c664-e721-43f7-afa2-8d341fbc5010}">
      <Declaration><![CDATA[PROPERTY ClearBufferRequest : BOOL
]]></Declaration>
      <Get Name="Get" Id="{c17d2f30-481a-4c80-bfdc-dbeec3a30243}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClearBufferRequest := m_eState = E_PlcSaberDHCState.ClearBufferBusy;]]></ST>
        </Implementation>
        <ObjectProperties />
      </Get>
      <ObjectProperties />
    </Property>
    <Method Name="SendData" Id="{74d5d50f-7dc4-49fe-a6b7-d87dca1ce227}">
      <Declaration><![CDATA[{attribute 'object_name' := 'SendData'}
METHOD SendData : BOOL
VAR_INPUT
	udiDataSize: UDINT;
	pData: POINTER TO BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
      <ObjectProperties />
    </Method>
    <Property Name="Busy" Id="{a48ed17b-dea8-4755-a1c8-f4310093fe25}">
      <Declaration><![CDATA[PROPERTY Busy : BOOL
]]></Declaration>
      <Get Name="Get" Id="{a08595df-f80c-48c0-8364-2f342f029d94}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := m_eState <> E_PlcSaberDHCState.WaitForJob;]]></ST>
        </Implementation>
        <ObjectProperties />
      </Get>
      <ObjectProperties />
    </Property>
    <Property Name="DataSize" Id="{c36cd525-d93b-487a-b6f2-3faef22fcd1f}">
      <Declaration><![CDATA[PROPERTY DataSize : UDINT
]]></Declaration>
      <Get Name="Get" Id="{58f3e249-bc75-49ca-8af9-5aea1633b785}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[DataSize := m_uinDataSize;]]></ST>
        </Implementation>
        <ObjectProperties />
      </Get>
      <ObjectProperties />
    </Property>
    <Method Name="InitChannel" Id="{c5a120e5-14f4-4599-ba83-bdac7b377241}">
      <Declaration><![CDATA[{attribute 'object_name' := 'InitChannel'}
METHOD InitChannel : BOOL
VAR_INPUT
	udiDataSize: UDINT;
	pOutputData: POINTER TO BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
      <ObjectProperties />
    </Method>
    <ObjectProperties />
  </POU>
</TcPlcObject>