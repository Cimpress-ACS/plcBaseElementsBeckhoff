<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.25">
  <POU Name="FB_DRV" Id="{a09ebb54-dbb7-4b29-b322-5e52fbbdee8c}">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_DRV EXTENDS FB_CtrlBase
VAR_INPUT
	In_bolOverload: BOOL;
	In_bolPulse: BOOL;
	In_a_bolBlockedSupvervis: ARRAY[1..cMAX_BLOCKED_SUP] OF BOOL;
	In_bolMaintenanceSwitch: BOOL;
END_VAR
VAR_OUTPUT
	Out_bolSpeed_1: BOOL;
	Out_bolSpeed_2: BOOL;
END_VAR
VAR
	/// Specific interface struct for public access
	SIf: T_Ctrl_SIf_DRV;
	bolPulseFlag: BOOL;
	udiPulseTimeoutTimer: UDINT;
	/// Timer for speed average calculation
	udiTimerSpeedCalc: UDINT;
	/// Shift register for average calculation of the speed
	aSpeedShift: ARRAY[0..4] OF DINT;
	/// Size of Speed Shift array for average calculation
	intSpeedShiftSize: INT;
	/// Varible for Speedcalculation
	dinSpeedCalc_um_s: DINT;
	/// Varible for Speedcalculation
	dinSpeedNew_um_s: DINT;
	/// Old Position for Speed calculation
	dinPosOld_um: DINT;
	/// Loop variable
	intI: INT;
	/// Blocked supervision
	/// Array with supervision distances
	a_dintPinDistance: ARRAY[1..cMAX_BLOCKED_SUP] OF DINT;
	a_bolREBlockedSupvervis: ARRAY[1..cMAX_BLOCKED_SUP] OF BOOL;
	/// Old Position for from last cycle
	dinPosOldCycle_um: DINT;
END_VAR
VAR CONSTANT
	/// Check speed every 250ms
	cSpeedCalcTime_ms: UDINT := 250;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Drive element for all different Drive types, 
Configuration of the type and Speed Calculation


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		27.06.2013		VP/RE		Start history
0.00.2		28.08.2013		AVME/PRE	Implement speed calculation
0.00.3		19.09.2013		AVME/PRE	Implement new Base Concept
0.00.4		02.10.2013		VP/RE		Added pulse counter. Changed pulse distance to 28.4 mm as a default value. Changed driving distance to 305 mm.
0.00.5      10.10.2013		AVME/DSC    In_bolBufferFull deleted. Not needed in DRV controller. Handled by parent controller if necessary.
0.00.6      18.10.2013		AVME/DSC    SIf.Alm[4].strText deleted in FB_init. Not used anymore.
0.00.7		22.10.2013		AVME/MRU	DRV without pulse sensor simulated pulse imroved
0.00.8      23.10.2013		AVME/DSC    Speed calculation from always to state RUN. cSpeedCalcTime_ms -> 250ms. Shift register array 0..4. Clear buffer in state RUN entry action.
										Changes for better position interpolation in controllers like MER, DPJ, DHC and JUN.
0.00.9		09.07.2014		AVME/MRU	Add Maintenance Switch to Drive (Used in Windsor)
										
___________________________________________________________________________________________________*)


SUPER^();

(*
IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -> init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
END_IF;
*)]]></ST>
    </Implementation>
    <Method Name="sta_OFF" Id="{114eb374-98a4-4895-bee8-b5e13ddba14f}">
      <Declaration><![CDATA[METHOD PROTECTED sta_OFF : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (me.Alarm.eActivAlmClass<>E_AlmClass.EOFF) AND (me.Alarm.eActivAlmClass<>E_AlmClass.OFF) THEN
			IF (me.intCmd=cCMD_RUN) THEN 
				me.StateMachine.intStateNext := cSTA_RUNBusy;
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getCtrlSIf" Id="{2c38d673-5f6c-40cb-9c9a-af8f5e2ddfe5}">
      <Declaration><![CDATA[METHOD getCtrlSIf : POINTER TO T_Ctrl_SIf_DRV
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCtrlSIf := ADR(SIf);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Always" Id="{643f16a1-e025-45a8-a890-bb6333befaac}">
      <Declaration><![CDATA[METHOD PROTECTED Always : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Always();

IF (me.StateMachine.intState<>cSTA_SINGLE_ANSWER) THEN
	
	// Error checks not in OFF and Error States
	IF (me.StateMachine.intState<>cSTA_OFF) AND (me.StateMachine.intState<>cSTA_ERROR) AND (me.StateMachine.intState<>cSTA_ERRORQuit) THEN

		IF (SIf.Cfg.bolEnableMaintenaceSwitch AND SIf.In.bolMaintenanceSwitch.intern) THEN
			// SIf.Alm[4].strText := 'Maintenance Switch is OFF'; 
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,4,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);		
			me.StateMachine.intStateNext := cSTA_ERROR;		
		END_IF

		IF SIf.In.bolOverload.intern THEN
			// SIf.Alm[1].strText := 'Drive overload'; 
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,1,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);		
			me.StateMachine.intStateNext := cSTA_ERROR;		
		END_IF
		
		// Blocked Supervision control
		// Sensor detect Pins, if a defined count of pins are brocken, the machine stops
		FOR intI := 1 TO SIf.Cfg.usiCountBlockedSupervis DO
			
			// Simulation
			// Simulate the Pins in the drive
			IF (CIf.SwCfg.bolSimulation) THEN
				IF (a_dintPinDistance[intI] >  SIf.Cfg.dinPinDistance_um) THEN
					SIf.In.a_bolBlockedSupvervis[intI].intern := TRUE;
				ELSE
					SIf.In.a_bolBlockedSupvervis[intI].intern := FALSE;
				END_IF
			END_IF
		
			// Check if a new pin is arrive, set distance to last pin to '0'
			IF ((SIf.In.a_bolBlockedSupvervis[intI].intern = TRUE) AND (a_bolREBlockedSupvervis[intI] = FALSE)) THEN
				a_bolREBlockedSupvervis[intI] := TRUE;
				a_dintPinDistance[intI] := 0;
			ELSIF ((SIf.In.a_bolBlockedSupvervis[intI].intern = FALSE) AND (a_bolREBlockedSupvervis[intI] = TRUE)) THEN
				a_bolREBlockedSupvervis[intI] := FALSE;
			END_IF
			// Check distance to last Pin, if to far away, set error
			IF (a_dintPinDistance[intI] > ((SIf.Par.int_MaxBrokenPins+1) * SIf.Cfg.dinPinDistance_um)) THEN
				// SIf.Alm[3].strText := 'Drive blocked, Pins are broken'; 
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,3,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				a_dintPinDistance[intI] := 0;		
				me.StateMachine.intStateNext := cSTA_ERROR;		
			ELSE
				a_dintPinDistance[intI] := a_dintPinDistance[intI] + SIf.Cur.dinPos_um - dinPosOldCycle_um;					
			END_IF		
		END_FOR
		dinPosOldCycle_um := SIf.Cur.dinPos_um;
	END_IF
END_IF

// Speed calculation in always function to get correct position everytime, not only in run
// observe no pulse detected failure case 
IF (SIf.In.bolPulse.intern AND NOT(bolPulseFlag)) THEN				
	// calculate CUR
	SIf.Cur.dinPos_um := SIf.Cur.dinPos_um + SIf.Cfg.dinDistPerPulse_um;
	SIf.Cur.dinPulseCounter := SIf.Cur.dinPulseCounter + 1;
		
	udiPulseTimeoutTimer := 0;
	bolPulseFlag := TRUE;
ELSIF (NOT(SIf.In.bolPulse.intern) AND bolPulseFlag) THEN
	bolPulseFlag := FALSE;
END_IF

// Always change actions in Base Library
// ----------------------------------------------------------------------------------
// overrule error always from base -> no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState=cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_OFFBusy" Id="{6e115bc5-e0d3-49a0-b7c5-189aa0b2fb18}">
      <Declaration><![CDATA[METHOD PROTECTED sta_OFFBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		SIf.Out.bolSpeed_1.intern := FALSE;
		SIf.Out.bolSpeed_2.intern := FALSE;
		
		// State Change Condition
		IF (TRUE) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RUN" Id="{6f47a8ef-2f39-4884-af88-b47d12b014e6}">
      <Declaration><![CDATA[METHOD PROTECTED sta_RUN : BOOL
VAR
	ii: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		udiPulseTimeoutTimer := 0;
		bolPulseFlag := FALSE;
		
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udi_pulseSim_ms);  
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
			
		// Get Size of array
		intSpeedShiftSize := SIZEOF(aSpeedShift)/(SIZEOF(aSpeedShift[0]));
		// Clear speed buffer
		FOR ii:=0 TO intSpeedShiftSize-1 BY 1 DO
			aSpeedShift[ii]:=0;
		END_FOR
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// Simulation
		// AND speed simulation if no distance sensor is existing !!!
		IF ((CIf.SwCfg.bolSimulation) OR (SIf.Cfg.bolPulseExist = FALSE)) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				SIf.In.bolPulse.intern := TRUE; 
				In_bolPulse := TRUE; // MRU 22.10.2013 added for drive without pulse sensor
				fbSimulationTimer.IN := FALSE;
			ELSE
				SIf.In.bolPulse.intern := FALSE;
				In_bolPulse := FALSE; // MRU 22.10.2013 added for drive without pulse sensor
				fbSimulationTimer.IN := TRUE;
			END_IF
		END_IF
	
		IF SIf.Cfg.bolSpeedVariable = TRUE THEN
			SetSpeed();
		END_IF;
		
		udiPulseTimeoutTimer := udiPulseTimeoutTimer + me.FUBInfo.udiSample_ms;
		
		
		// Speed calculation
		IF udiTimerSpeedCalc >= cSpeedCalcTime_ms THEN
			dinSpeedNew_um_s := (SIf.Cur.dinPos_um - dinPosOld_um)*1000 / UDINT_TO_DINT(udiTimerSpeedCalc);
			dinSpeedCalc_um_s := dinSpeedNew_um_s;
			// Get Size of array
			intSpeedShiftSize := SIZEOF(aSpeedShift)/(SIZEOF(aSpeedShift[0]));
			intI := intSpeedShiftSize-1;
			WHILE intI > 0 DO		
				// Shift all speeds one field
				aSpeedShift[intI] := aSpeedShift[intI-1];
				dinSpeedCalc_um_s := dinSpeedCalc_um_s + aSpeedShift[intI];
				intI := intI - 1;
			END_WHILE
			aSpeedShift[0] := dinSpeedNew_um_s;
			SIf.Cur.dinSpeed_um_s := dinSpeedCalc_um_s / intSpeedShiftSize;
			dinPosOld_um := SIf.Cur.dinPos_um;
			udiTimerSpeedCalc := 0;
				
		ELSE
			udiTimerSpeedCalc := udiTimerSpeedCalc + me.FUBInfo.udiSample_ms;
		END_IF
		
		
		// State Change Condition
		IF ((udiPulseTimeoutTimer >= Sif.Par.udi_pulseTimeout_ms) AND (SIf.Cfg.bolPulseExist = TRUE)) THEN
			// SIf.Alm[2].strText := 'Timeout no pulse detected';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,2,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);

			me.StateMachine.intStateNext :=  cSTA_ERROR;		
		ELSIF (me.intCmd=cCMD_OFF) THEN
			me.StateMachine.intStateNext :=  cSTA_OFFBusy;
		END_IF
		
	END_IF



//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		// Set speed zero
		SIf.Cur.dinSpeed_um_s := 0;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{8628a7bc-058a-47d8-b52f-15ef6e40e799}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	///if TRUE, the retain variables are initialized (warm start / cold start)
	bInitRetains: BOOL;
	///if TRUE, the instance afterwards gets moved into the copy code (online change)
	bInCopyCode: BOOL;
END_VAR
VAR
	ii: UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR ii:= 0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[ii].intCmd=cCMD_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR
CIf.Job.aCmdList[ii].intCmd := cCMD_RUN;
CIf.Job.aCmdList[ii].strName := 'Run'; 
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;

// set name of class/typ
CIf.Info.strType := 'FB_DRV';
CIf.Info.strFullName := 'Drive';

// set alarm class
SIf.Alm[1].eAlmClass := E_AlmClass.OFF;
SIf.Alm[1].strText := 'Drive overload'; 
SIf.Alm[2].eAlmClass := E_AlmClass.OFF;
SIf.Alm[2].strText := 'Timeout no pulse detected';
SIf.Alm[3].eAlmClass := E_AlmClass.OFF;
SIf.Alm[3].strText := 'Drive blocked, Pins are broken';
SIf.Alm[4].eAlmClass := E_AlmClass.OFF;
SIf.Alm[4].strText := 'Maintenance Switch is OFF'; 

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// parmeter
SIf.Par.udi_pulseTimeout_ms := 2000;
SIf.Par.udi_pulseSim_ms := 56;
SIf.Par.usi_speedLevel := 0;
SIf.Par.int_MaxBrokenPins := 5;

SIf.Cfg.dinDistPerPulse_um := 28400; // 28,4[mm/puls]
SIf.Cfg.usiCountBlockedSupervis := 0;
SIf.Cfg.dinPinDistance_um := 305000;
SIf.Cfg.bolEnableMaintenaceSwitch := FALSE; // Normaly no Maintenance Switch exist]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine" Id="{9e54f73c-c5f1-450b-a027-e2c0a4ba8cad}">
      <Declaration><![CDATA[METHOD PROTECTED StateMachine : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
    cSTA_RUN: 
        THIS^.sta_RUN();
END_CASE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetSpeed" Id="{a56d404a-7ae4-4439-82b0-a2e594cfa9eb}">
      <Declaration><![CDATA[METHOD PRIVATE SetSpeed
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// 0=slow, 1=middle, 2=fast
CASE SIf.Par.usi_speedLevel OF
	0:
		SIf.Out.bolSpeed_1.intern := TRUE;
		SIf.Out.bolSpeed_2.intern := FALSE;
	1:
		SIf.Out.bolSpeed_1.intern := TRUE;
		SIf.Out.bolSpeed_2.intern := TRUE;
	2:
		SIf.Out.bolSpeed_1.intern := FALSE;
		SIf.Out.bolSpeed_2.intern := TRUE;
	ELSE
		SIf.Out.bolSpeed_1.intern := TRUE;
		SIf.Out.bolSpeed_2.intern := FALSE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoInBridge" Id="{abf2d6d2-e1ae-4cba-8c33-fac5a09856c0}">
      <Declaration><![CDATA[METHOD PROTECTED IoInBridge : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
SIf.In.bolOverload.map := THIS^.In_bolOverload;
SIf.In.bolPulse.map := THIS^.In_bolPulse;
SIf.In.bolMaintenanceSwitch.map := THIS^.In_bolMaintenanceSwitch;

FOR intI := 1 TO SIf.Cfg.usiCountBlockedSupervis DO
	SIf.In.a_bolBlockedSupvervis[intI].map := THIS^.In_a_bolBlockedSupvervis[intI];
	IF (CIf.SwCfg.bolSimulation = FALSE) THEN
		getInBol(CIf.Job.bolIoForce,ADR(SIf.In.a_bolBlockedSupvervis[intI]));
	END_IF
END_FOR

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolOverload));
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolPulse));
	//ctrl.In.bol_PosSwitchBasicDefTyp.intern := getInBol(ctrl.ifc.Job.bol_Force ,ADR(ctrl.In.bol_PosSwitchBasicDefTyp);
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolMaintenanceSwitch));
ELSE
	//simulation of global IO
	SIf.In.bolOverload.intern := FALSE;
	SIf.In.bolMaintenanceSwitch.intern := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_ERROR" Id="{b6f8afae-ced3-4019-b3bb-384684e21c5c}">
      <Declaration><![CDATA[METHOD PROTECTED sta_ERROR : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -> possibillity to go back to state before error
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	
	SIf.Out.bolSpeed_1.intern := FALSE;
	SIf.Out.bolSpeed_2.intern := FALSE;
	
END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_PON" Id="{baf35169-6ce0-4ca9-8b4e-517e7a3aedfb}">
      <Declaration><![CDATA[METHOD PROTECTED sta_PON : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF ((me.intCmd=cCMD_OFF) OR (me.intCmd=cCMD_RUN)) THEN
			me.StateMachine.intStateNext := cSTA_OFFBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoOutBridge" Id="{c273ebae-f621-49b0-bbde-a6a72c865130}">
      <Declaration><![CDATA[METHOD PROTECTED IoOutBridge : BOOL
VAR
	bolSwitchValvesOff: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolSpeed_1));
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolSpeed_2));

	THIS^.Out_bolSpeed_1 := SIf.Out.bolSpeed_1.map;
	THIS^.Out_bolSpeed_2 := SIf.Out.bolSpeed_2.map;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_RUNBusy" Id="{e0541a79-ec22-49f9-be02-61c7af714a1d}">
      <Declaration><![CDATA[METHOD PROTECTED sta_RUNBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		IF SIf.Cfg.bolSpeedVariable = TRUE THEN
			SetSpeed();
		ELSE
			SIf.Out.bolSpeed_1.intern := TRUE;
		END_IF;		
		
		// State Change Condition
		IF (TRUE) THEN
			me.StateMachine.intStateNext := cSTA_RUN;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <ObjectProperties />
  </POU>
</TcPlcObject>