<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.23">
  <POU Name="FB_BCC" Id="{6cbf6bde-03ca-47a6-8fd4-bc19c5ccd296}">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_BCC EXTENDS FB_CtrlBase
VAR_INPUT
	pBCD_SIf_In: POINTER TO T_BCD;
END_VAR
VAR
	/// Specific interface struct for public access
	SIf: T_Ctrl_SIf_BCC;
	/// old barcode to know that a new barcode is present from sensor
	uliBarCodeOld: ULINT;
	/// simulated barcode
	uliSimBarCode: ULINT;
	/// Variables for driver simulation
	pBCD_SIf: POINTER TO T_BCD;
	stBCD_Sim: T_BCD;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Barcode reader controller.
Controls the communication to the barcode reader.

History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		06.01.2014		AVME/DSC	Start history
0.00.2		07.01.2014		AVME/DSC	Basic functionalities implemented and tested. 	
0.00.3		27.01.2014		AVME/DSC	- Added info "bolNoRead" in cur interface
					 					- Revision in error recovery
___________________________________________________________________________________________________*)


IF (me.bolActivate) AND (pBCD_SIf_In<>0) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -> init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	
	END_IF
END_IF;
]]></ST>
    </Implementation>
    <Method Name="getCmdState" Id="{128b59ec-2834-4d1f-9c12-3d7f5b59ca52}">
      <Declaration><![CDATA[METHOD PROTECTED getCmdState : STRING
VAR_INPUT
	intCmdState: INT;
	bolState: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states
IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		// cmd's
		CASE intCmdState OF
			cBCC_CMD_READ: 
				getCmdState := 'cBCC_CMD_READ';
		END_CASE;
	ELSE
	
	// cmd's
		CASE intCmdState OF
			cBCC_STA_READBusy: 
				getCmdState := 'cBCC_STA_READBusy';
			cBCC_STA_READ: 
				getCmdState := 'cBCC_STA_READ';
		END_CASE;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_READ" Id="{31b79811-9d7d-499f-8529-96d377021a8b}">
      <Declaration><![CDATA[METHOD PROTECTED sta_READ : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// State Change Condition
		IF(me.intCmd=cBCC_CMD_READ) THEN
			me.StateMachine.intStateNext := cBCC_STA_READBusy;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_READBusy" Id="{527739d8-73d2-48cb-9a35-0e730206c213}">
      <Declaration><![CDATA[METHOD PROTECTED sta_READBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Simulation timer	
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiTORead_ms / 2);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
		
		// Init
		SIf.Cur.bolNewCodeReaded:= FALSE;
		SIf.Cur.bolNoRead:= FALSE;
		SIf.Cur.stData.uliBarCode:= 0;
		SIf.Cur.stData.strBarCode:= '';
		
		// Read barcode
		pBCD_SIf^.intCmd := cBCD_CMD_READ_BARCODE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				SIf.Cur.bolNewCodeReaded:= TRUE;
				uliSimBarCode:= uliSimBarCode + 1;
				pBCD_SIf^.stData.uliBarCode:= uliSimBarCode;
				pBCD_SIf^.stData.strBarCode:= ULINT_TO_STRING(pBCD_SIf^.stData.uliBarCode);
				pBCD_SIf^.intCmd := cBCD_CMD_DONE;		
			END_IF
		END_IF	

		// Check for new barcode
		IF (pBCD_SIf^.stData.uliBarCode <> uliBarCodeOld) AND (pBCD_SIf^.stData.uliBarCode<>0) THEN
			uliBarCodeOld:= pBCD_SIf^.stData.uliBarCode;
			SIf.Cur.bolNewCodeReaded:= TRUE;
		END_IF
		
		// Get data from driver
		SIf.Cur.stData.uliBarCode:= pBCD_SIf^.stData.uliBarCode;
		SIf.Cur.stData.strBarCode:= pBCD_SIf^.stData.strBarCode;			
		
		// State Change Condition
		IF (pBCD_SIf^.stErr.bolErrorActive = TRUE) THEN  
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF (me.StateMachine.udiTimeInState_ms > SIf.Par.udiTORead_ms) THEN
			// SIf.Alm[4].strText := 'Timeout wait on data';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,4,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF (pBCD_SIf^.intCmd = cBCD_CMD_DONE) THEN
			IF (SIf.Cur.stData.uliBarCode=0) THEN
				SIf.Cur.bolNoRead:= TRUE;
				uliBarCodeOld:= 0;
				// SIf.Alm[3].strText := 'Barcode could not be read. Answer *NoRead* from device';
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,3,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);	
			END_IF		
			me.StateMachine.intStateNext := cBCC_STA_READ;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		CIf.Job.intACmd:= cCMD_DONE;
		CIf.Job.intMCmd:= cCMD_DONE;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_PON" Id="{64c7cc47-2849-4176-9ba7-68bc37b94de6}">
      <Declaration><![CDATA[METHOD PROTECTED sta_PON : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;	
		// State Change Condition
		IF (me.intCmd<>cCMD_PON) AND (me.intCmd<>cCMD_DONE) THEN
			me.StateMachine.intStateNext := cSTA_OFFBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_OFF" Id="{80b71cff-761c-4b04-bd4b-93e13e5a3bb3}">
      <Declaration><![CDATA[METHOD PROTECTED sta_OFF : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;		
		// State Change Condition
		IF (me.Alarm.eActivAlmClass<>E_AlmClass.EOFF) AND (me.Alarm.eActivAlmClass<>E_AlmClass.OFF) THEN	
			IF(me.intCmd=cBCC_CMD_READ) THEN
				me.StateMachine.intStateNext := cBCC_STA_READBusy;
			END_IF
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoInBridge" Id="{8373e9da-2f8a-4338-a0a1-522d0d8c649d}">
      <Declaration><![CDATA[METHOD PROTECTED IoInBridge : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	;
	// no physical inputs
ELSE
	//simulation of global IO
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_ERROR" Id="{9c76f763-cccb-4e24-baa1-c8234ccb1463}">
      <Declaration><![CDATA[METHOD PROTECTED sta_ERROR : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -> possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Driver error activ
		IF (pBCD_SIf^.stErr.bolErrorActive = TRUE) THEN
			// SIf.Alm[1].strText := 'Barcode reader driver error'; 
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,1,UDINT_TO_DINT(pBCD_SIf^.stErr.udiErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			// Error response from sensor
			IF (pBCD_SIf^.stErr.bolSensorError = TRUE) THEN
				// SIf.Alm[5].strText := 'Error response from sensor with sopas error number';
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,5,UDINT_TO_DINT(pBCD_SIf^.stErr.udiErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);		
			END_IF
		ELSE
			// Close TCP socket		
			pBCD_SIf^.intCmd := cBCD_CMD_CLOSE_SOCKET;  	
		END_IF
		
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			// Error ack driver 
			pBCD_SIf^.stErr.bolErrAck:= TRUE;
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_OFFBusy" Id="{9ce35a5a-d216-437e-a67a-9a424b618430}">
      <Declaration><![CDATA[METHOD PROTECTED sta_OFFBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Simulation timer	
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiTORead_ms / 2);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
		
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				pBCD_SIf^.intCmd := cBCD_CMD_DONE;
			END_IF
		END_IF
			
		// State Change Condition
		IF (pBCD_SIf^.stErr.bolErrorActive = TRUE) THEN
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF(pBCD_SIf^.intCmd = cBCD_CMD_DONE) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getCtrlSIf" Id="{a77a99c2-2a3f-4ac7-8289-9321c2956ed9}">
      <Declaration><![CDATA[METHOD getCtrlSIf : POINTER TO T_Ctrl_SIf_BCC
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getCtrlSIf := ADR(SIf);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Always" Id="{abd5f6d1-5de8-477c-bb54-61e236f76ae4}">
      <Declaration><![CDATA[METHOD PROTECTED Always : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Always();

// Simulation
IF (CIf.SwCfg.bolSimulation) THEN
	// Access to driver empty structure
	pBCD_SIf := ADR(stBCD_Sim);
ELSE
	// Access to real driver interface
	pBCD_SIf := pBCD_SIf_In;
END_IF

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState<>cSTA_SINGLE_ANSWER) THEN
	// Status info from driver
	SIf.Cur.bolComChecked:= pBCD_SIf^.stStatus.bolComChecked;
	SIf.Cur.bolConnected:= pBCD_SIf^.stStatus.bolSocketConnected;
END_IF

// config driver
pBCD_SIf^.stCfg.bolSimulation := CIf.SwCfg.bolSimulation;
pBCD_SIf^.stCfg.strSensorIPAdr := SIf.Cfg.strSensorIPAdr;
pBCD_SIf^.stCfg.udiSensorPort := SIf.Cfg.udiSensorPort;

// ----------------------------------------------------------------------------------
// Always change actions in Base Library
// ----------------------------------------------------------------------------------
// overrule error always from base -> no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState=cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF

// Conditions Always
IF (((me.Alarm.eActivAlmClass=E_AlmClass.EOFF) OR (me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF))
		 AND (me.StateMachine.intState<>cSTA_ERROR) AND (me.StateMachine.intState<>cSTA_ERRORQuit) AND
		(me.StateMachine.intState<>cSTA_OFF) AND (me.StateMachine.intState<>cSTA_OFFBusy)) THEN
	// alarm evt EOFF, OFF or cmd off
	me.StateMachine.intStateNext := cSTA_OFFBusy;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="IoOutBridge" Id="{dd274407-4626-407a-8a96-aa0a56be7b12}">
      <Declaration><![CDATA[METHOD PROTECTED IoOutBridge : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	// check interlocks to prevent damages
	IF (CIf.Job.bolIlkOverwrite=FALSE) THEN
		;
		// no physical outputs
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{f3ebcf80-2012-450c-95a0-99ef21fa9fe6}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	///if TRUE, the retain variables are initialized (warm start / cold start)
	bInitRetains: BOOL;
	///if TRUE, the instance afterwards gets moved into the copy code (online change)
	bInCopyCode: BOOL;
END_VAR
VAR
	udiTaskCnt: UDINT;
	ii: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR ii:= 0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[ii].intCmd=cCMD_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR
CIf.Job.aCmdList[ii].intCmd := cBCC_CMD_READ;
CIf.Job.aCmdList[ii].strName := 'Read'; 
CIf.Job.aCmdList[ii].bolAvailable := TRUE;

// set name of class/typ
CIf.Info.strType := 'FB_BCC'; 

// set alarm class
SIf.Alm[1].eAlmClass := E_AlmClass.INFO;
SIf.Alm[1].strText := 'Barcode reader driver error'; 
SIf.Alm[2].eAlmClass := E_AlmClass.OFF;
SIf.Alm[2].strText := 'Initialisation error from barcode reader. No answer from device.';
SIf.Alm[3].eAlmClass := E_AlmClass.INFO;
SIf.Alm[3].strText := 'Barcode could not be read. Answer *NoRead* from device';
SIf.Alm[4].eAlmClass := E_AlmClass.INFO;
SIf.Alm[4].strText := 'Timeout wait on data';
SIf.Alm[5].eAlmClass := E_AlmClass.INFO;
SIf.Alm[5].strText := 'Error response from sensor';

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// parameter
SIf.Par.udiTORead_ms := 4000;  		// Has to be correspond with the "duration" setting of sensor object trigger
SIf.Par.udiTOPowerOn_ms := 3000;

// configuration
SIf.Cfg.strSensorIPAdr := '192.168.70.28';
SIf.Cfg.udiSensorPort := 2112;

// simulation
uliSimBarCode:= 1250000000000;]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine" Id="{f456250a-2321-44d4-91ce-e922d700752e}">
      <Declaration><![CDATA[METHOD PROTECTED StateMachine : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    cBCC_STA_READBusy: 
        THIS^.sta_READBusy();
    cBCC_STA_READ: 
        THIS^.sta_READ();	
END_CASE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="sta_PONBusy" Id="{ff585d4f-0a2e-4d9d-acbc-5de478a58ef0}">
      <Declaration><![CDATA[METHOD PROTECTED sta_PONBusy : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState<>me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Simulation timer	
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiTORead_ms / 2);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
		
		// Reset driver status
		pBCD_SIf^.stStatus.bolSocketConnected := FALSE;
		pBCD_SIf^.stStatus.bolComChecked := FALSE;
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
			
		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				// Set driver status
				pBCD_SIf^.stStatus.bolSocketConnected := TRUE;
				pBCD_SIf^.stStatus.bolComChecked := TRUE;		
			END_IF
		END_IF
			
		// Try to open the TCP socket		
		pBCD_SIf^.intCmd := cBCD_CMD_CONNECT_SOCKET;  
					
		// Check if socket connected
		IF (pBCD_SIf^.stStatus.bolSocketConnected = TRUE) THEN
			pBCD_SIf^.intCmd :=	cBCD_CMD_COM_TEST; // Execute a communication test to see if the device answer		
		END_IF
		
		// State Change Condition
		IF ((pBCD_SIf^.stErr.bolErrorActive = TRUE) OR (me.StateMachine.udiTimeInState_ms >= SIf.Par.udiTOPowerOn_ms)) THEN
			// SIf.Alm[2].strText := 'Initialisation error from barcode reader. No answer from device.';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,2,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := cSTA_ERROR;				
		ELSIF (pBCD_SIf^.stStatus.bolComChecked = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_PON;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState<>me.StateMachine.intStateNext) THEN
		;
	END_IF]]></ST>
      </Implementation>
    </Method>
    <ObjectProperties />
  </POU>
</TcPlcObject>