<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.0.23">
  <POU Name="MiddlePRG_1" Id="{d0b780f9-d9b7-47f3-8805-851f8ce5d376}">
    <Declaration><![CDATA[PROGRAM MiddlePRG_1
VAR
	fbAlm_Man: FB_Alm_Man; // alarm manager
	
	bolPlcStartupDone: BOOL := FALSE;
	bolHostInitDone: BOOL := FALSE;
	bolInitDone: BOOL := FALSE;
	uinTaskNbr : UINT := 2; // MiddleTask is Task Nr 2
	fbRFW_11: FB_RFW;
	fbRFW_12: FB_RFW;
	fbBCC_1: FB_BCC;
	fbCYL_1: FB_CYL;
	fbPRS_1: FB_PRS;
	fbUMC_1: FB_UMC;
	fbVPC_1: FB_VPC;
	fbDRV_1: FB_DRV;
	pTmpSIf_RFW: POINTER TO Base_Elements.T_Ctrl_SIf_RFW;
	pTmpSIf_BCC: POINTER TO T_Ctrl_SIf_BCC;
	fbVLV_1: FB_VLV;
	
	// ADS Client Example
	fbACL_1: FB_ACL;
	sCon01_ShirtStream: T_ADS_ConnectionData; 			// Example: Read connection to shirt stream PLC (Port 851) drive FUB interface .cur
	DrvCurData: T_Ctrl_SIf_DRV_Cur;	
	sCon02_ShirtStream: T_ADS_ConnectionData; 			// Example: Write connection to shirt stream PLC (Port 851) drive FUB interface .par
	DrvParData: T_Ctrl_SIf_DRV_Par;	
	sCon03_ShirtStream: T_ADS_ConnectionData; 			// Example: Write connection to shirt stream PLC (Port 852) drive FUB interface .cfg
	DrvCfgData: T_Ctrl_SIf_DRV_Cfg;	
	// ADS Client Example
	
	// EtherCAT Diagnose
	fbECD_1: FB_ECD;
	pTmpSIf_ECD: POINTER TO T_Ctrl_SIf_ECD;

	fbSGT_1: 		FB_SGT;		// Signal tower	
	pDRV_CIf:		POINTER TO Base_PLC.T_Ctrl_CIf; // Used for Signal tower example
	pDRV_SIf:		POINTER TO Base_Elements.T_Ctrl_SIf_DRV; // Used for Signal tower example
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
call of all controller (FUB) for the middle task class.


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		25.09.2013		AVME/KVO	Start history
0.00.2		12.11.2013		VP/RE		Local AlarmManager
0.00.3		07.01.2014		AVME/DSC 	Insert barcode reader example
0.00.4		08.01.2014		AVME/MRU	Insert DRV example
0.00.5		06.01.2014		AVME/PRE	Implement RFW for Promo Read and Write RFID Reader
0.00.6		13.01.2014		AVME/PRE	Implement Starting Up Process
0.00.7		05.02.2014		AVME/DSC	Insert ADS client example
0.00.8		06.03.2014		AVME/DSC	Insert FB_VLV example
0.00.9		17.06.2014		AVME/MRU	SGT example added

___________________________________________________________________________________________________*)

// -----------------------------------------------------------------------------------------------
// Initialize the PLC Parameter and check the PLC health
// -----------------------------------------------------------------------------------------------
IF (NOT bolPlcStartupDone) AND (g_uinStartProzess>=(uinTaskNbr-1)) THEN
	
	// init	
	// Level0 -------------------------------------------------------------------
	
	// RFID Reader, element Controller in this Task, Driver in fastest Task class
	fbRFW_11.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.RFW_11); // init and entry fb_instance in global fb pointer array
	fbRFW_11.pRFD_SIf := g_pFB_RFR^.getSIf();
	pTmpSIf_RFW := fbRFW_11.getCtrlSIf();
	pTmpSIf_RFW^.Cfg.eTyp := E_Typ_RFW.RF382R;
	// the following parameters are not needed at the moment because the parameters will not be written down for RF382R at the moment
	pTmpSIf_RFW^.Cfg.stNetId := '192.168.2.123.1.1'; //PLC NetId
	pTmpSIf_RFW^.Cfg.uinSlaveAddr := 1024; //Io card Ethercat adress 
	pTmpSIf_RFW^.Cfg.bolGetTrayIDAuto := FALSE;
	
	// RFID Reader, element Controller in this Task, Drive in fastest Task class
	fbRFW_12.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.RFW_12); // init and entry fb_instance in global fb pointer array
	fbRFW_12.pRFD_SIf := g_pFB_RFD^.getSIf();
	pTmpSIf_RFW := fbRFW_12.getCtrlSIf();
	pTmpSIf_RFW^.Cfg.eTyp := E_Typ_RFW.RF310R;
	// the following parameters are not needed at the moment because the parameters will not be written down for RF382R at the moment
	pTmpSIf_RFW^.Cfg.stNetId := '192.168.2.123.1.1'; //PLC NetId
	pTmpSIf_RFW^.Cfg.uinSlaveAddr := 1024; //Io card Ethercat adress 
	pTmpSIf_RFW^.Cfg.bolGetTrayIDAuto := TRUE;
	
	// *********************************************************
	// Barcode reader example
	// *********************************************************
	
	// Barcode reader, element Controller in this Task, Driver in fastest Task class
	fbBCC_1.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.BCC_1); // init and entry fb_instance in global fb pointer array
	fbBCC_1.pBCD_SIf_In := g_pFB_BCD^.getSIf();
	pTmpSIf_BCC := fbBCC_1.getCtrlSIf();
	// configuration	
	pTmpSIf_BCC^.Cfg.strSensorIPAdr := '192.168.70.28';
	pTmpSIf_BCC^.Cfg.udiSensorPort := 2111;
	

	// *********************************************************
	// ADS client example
	// *********************************************************
	
	// ADS client connection
	fbACL_1.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.ACL_1); // init and entry fb_instance in global fb pointer array

	// Add a read connection
	sCon01_ShirtStream.eAccessType := E_ADS_AccessType.READ;
	sCon01_ShirtStream.uinTargetPort:= 851;
	sCon01_ShirtStream.strNetID := '192.168.70.27.1.1';
	sCon01_ShirtStream.strRoute := 'SlowPRG_1.fbDRV_1.SIf.Cur';
	sCon01_ShirtStream.udiDataLen:= SIZEOF(DrvCurData);
	sCon01_ShirtStream.pData:= ADR(DrvCurData);	
	// Add defined connection to client
	fbACL_1.AddConnection(sCon01_ShirtStream);

	// Add a write connection
	sCon02_ShirtStream.eAccessType := E_ADS_AccessType.WRITE;
	sCon02_ShirtStream.uinTargetPort:= 851;
	sCon02_ShirtStream.strNetID := '192.168.70.27.1.1';
	sCon02_ShirtStream.strRoute := 'SlowPRG_1.fbDRV_1.SIf.Par';
	sCon02_ShirtStream.udiDataLen:= SIZEOF(DrvParData);
	sCon02_ShirtStream.pData:= ADR(DrvParData);	
	// Add defined connection to client
	fbACL_1.AddConnection(sCon02_ShirtStream);
	
	// Add a write connection
	sCon03_ShirtStream.eAccessType := E_ADS_AccessType.WRITE;
	sCon03_ShirtStream.uinTargetPort:= 852;
	sCon03_ShirtStream.strNetID := '192.168.70.27.1.1';
	sCon03_ShirtStream.strRoute := 'SlowPRG_1.fbDRV_1.SIf.Cfg';
	sCon03_ShirtStream.udiDataLen:= SIZEOF(DrvCfgData);
	sCon03_ShirtStream.pData:= ADR(DrvCfgData);	
	// Add defined connection to client
	fbACL_1.AddConnection(sCon03_ShirtStream);
	
	// More connections can be insert here ... !
	
	
	
	// *********************************************************
	// Different controller
	// *********************************************************
	
	// cylinder example
	fbCYL_1.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.CYL_1); // init and entry fb_instance in global fb pointer array
	fbPRS_1.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.PRS_1); // init and entry fb_instance in global fb pointer array
	fbUMC_1.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.UMC_1); // init and entry fb_instance in global fb pointer array
	fbVPC_1.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.VPC_1); // init and entry fb_instance in global fb pointer array
	fbDRV_1.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.DRV_1); // init and entry fb_instance in global fb pointer array
	fbVLV_1.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.VLV_1); // init and entry fb_instance in global fb pointer array	
	
	
	bolPlcStartupDone := TRUE;	
	g_uinStartProzess := g_uinStartProzess + 1; // For StartUp order
	
		// EtherCAT Diagnostic Element
	fbECD_1.iniAllCtrlArrays(ADR(g_a_pCtrlInst),ADR(g_a_pCtrlCIf),E_CtrlId.ECD_1); // init and entry fb_instance in global fb pointer array
	pTmpSIf_ECD := fbECD_1.getCtrlSIf();
	pTmpSIf_ECD^.Cfg.strNetID := '192.168.70.24.2.1'; //PLC NetId

END_IF
// -----------------------------------------------------------------------------------------------


// -----------------------------------------------------------------------------------------------
// The host system is downloading all parameter at startup. 
// bolPlcStartupDone will be set to true after the Host is done with the initialization
// -----------------------------------------------------------------------------------------------
IF (bolPlcStartupDone AND (NOT bolHostInitDone) AND NOT bolInitDone AND (g_uinStartProzess>=(uinTaskNbr-1)+10)) THEN
	bolHostInitDone := TRUE;
	g_uinStartProzess := g_uinStartProzess + 1; // For StartUp order
END_IF
// -----------------------------------------------------------------------------------------------


// -----------------------------------------------------------------------------------------------
// Start PLC code initialization
// -----------------------------------------------------------------------------------------------
IF NOT bolInitDone AND bolPlcStartupDone AND bolHostInitDone AND (g_uinStartProzess>=(uinTaskNbr-1)+20) THEN
		
	bolInitDone := TRUE;
	g_uinStartProzess := g_uinStartProzess + 1; // For StartUp order
END_IF
// -----------------------------------------------------------------------------------------------

// -----------------------------------------------------------------------------------------------
// Normal Run mode after all the initialization is done
// -----------------------------------------------------------------------------------------------
IF (bolInitDone AND bolPlcStartupDone AND bolHostInitDone AND (g_uinStartProzess>=(20+c_uinCntTaskClass))) THEN
	
	//****************************************************************************************************
	// cyclic controller calls
	//****************************************************************************************************
	fbRFW_11();
	fbRFW_12();
	fbCYL_1();
	fbPRS_1();
	fbUMC_1();
	fbVPC_1();
	fbDRV_1();
	fbVLV_1();
	
	fbBCC_1();   // Barcode reader example
	fbACL_1();		// ADS client example
		
	fbECD_1(); // EtherCAT Diagnostic
	
	// --------------------------------------------------
	// Signal tower
	// --------------------------------------------------

	// Signal tower conditions for red, yellow and green
	// -------------------------------------------------
	
	// Get access to FB_DRV
	pDRV_CIf := fbDRV_1.CtrlCIf;
	pDRV_SIf := fbDRV_1.getCtrlSIf();
	
	// GreenBlink
	IF (pDRV_CIf^.Job.intState = Base_PLC.cSTA_RUNBusy) THEN
		fbSGT_1.In_bolGreenBlink:= TRUE;
	ELSE
		fbSGT_1.In_bolGreenBlink:= FALSE;
	END_IF
	
	// GreenOn
	IF (pDRV_CIf^.Job.intState = Base_PLC.cSTA_RUN) THEN
		fbSGT_1.In_bolGreenOn:= TRUE;
	ELSE
		fbSGT_1.In_bolGreenOn:= FALSE;
	END_IF
	
(*	// Yellow
	fbSGT_1.In_uinCntYellow:= pDRV_SIf^.Cur.uinNrOfActiveInfo;
	// Red
	fbSGT_1.In_uinCntRed:= pDRV_SIf^.Cur.uinNrOfActiveAlarm;
	// Beep (only in case of an alarm)
	fbSGT_1.In_uinCntBeep:= pDRV_SIf^.Cur.uinNrOfActiveAlarm;
*)
	// Call SGT 
	fbSGT_1();	
	Out_bolLED_RD:= fbSGT_1.Out_bolRed;
	Out_bolLED_YE:= fbSGT_1.Out_bolYellow;
	Out_bolLED_GN:= fbSGT_1.Out_bolGreen;	
	Out_bolBeep:= fbSGT_1.Out_bolBeep;
	
END_IF
// -----------------------------------------------------------------------------------------------]]></ST>
    </Implementation>
    <ObjectProperties>﻿<XmlArchive>
  <Data>
    <o xml:space="preserve" t="POUImageProperty">
      <n n="ImageData" />
      <v n="TransparencyColor">"White"</v>
      <v n="MakeTransparent">false</v>
    </o>
  </Data>
  <TypeList>
    <Type n="Boolean">System.Boolean</Type>
    <Type n="POUImageProperty">{bb741845-1ec5-4be9-bb0d-2cf7058af574}</Type>
    <Type n="String">System.String</Type>
  </TypeList>
</XmlArchive></ObjectProperties>
  </POU>
</TcPlcObject>