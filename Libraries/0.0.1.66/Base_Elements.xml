<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6_0200">
  <fileHeader companyName="Beckhoff Automation GmbH" productName="TwinCAT PLC Control" productVersion="3.5.6.0" creationDateTime="2015-09-07T10:33:48.4706416" />
  <contentHeader name="Base_Elements" modificationDateTime="2015-09-07T10:33:48.472642">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1" />
      </fbd>
      <ld>
        <scaling x="1" y="1" />
      </ld>
      <sfc>
        <scaling x="1" y="1" />
      </sfc>
    </coordinateInfo>
    <addData>
      <data name="http://www.3s-software.com/plcopenxml/projectinformation" handleUnknown="implementation">
        <ProjectInformation />
      </data>
    </addData>
  </contentHeader>
  <types>
    <dataTypes />
    <pous />
  </types>
  <instances>
    <configurations />
  </instances>
  <addData>
    <data name="http://www.3s-software.com/plcopenxml/application" handleUnknown="implementation">
      <resource name="Base_Elements">
        <globalVars name="Global_Version" constant="true">
          <variable name="stLibVersion_Base_Elements">
            <type>
              <derived name="ST_LibVersion" />
            </type>
            <initialValue>
              <structValue>
                <value member="iMajor">
                  <simpleValue value="0" />
                </value>
                <value member="iMinor">
                  <simpleValue value="0" />
                </value>
                <value member="iBuild">
                  <simpleValue value="1" />
                </value>
                <value member="iRevision">
                  <simpleValue value="66" />
                </value>
                <value member="sVersion">
                  <simpleValue value="'0.0.1.66'" />
                </value>
              </structValue>
            </initialValue>
            <addData>
              <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                <Attributes>
                  <Attribute Name="const_non_replaced" Value="" />
                </Attributes>
              </data>
            </addData>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>6b6dc6af-b87e-41c1-b05f-94651408b334</ObjectId>
            </data>
          </addData>
          <documentation>
            <xhtml xmlns="http://www.w3.org/1999/xhtml"> This function has been automatically generated from the project information.</xhtml>
          </documentation>
        </globalVars>
        <globalVars name="ACL_Const" constant="true">
          <variable name="cuinMaxConnections">
            <type>
              <UINT />
            </type>
            <initialValue>
              <simpleValue value="50" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>c8d6b96f-e5c4-4b10-b8bc-2f87add6d659</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="ADS_IndexGroup" constant="true">
          <variable name="cGET_SYMHANDLE_BYNAME">
            <type>
              <UDINT />
            </type>
            <initialValue>
              <simpleValue value="16#F003" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> "Index-Group/Offset", GET_SYMHANDLE_BYNAME</xhtml>
            </documentation>
          </variable>
          <variable name="cREAD_WRITE_SYMVAL_BYHANDLE">
            <type>
              <UDINT />
            </type>
            <initialValue>
              <simpleValue value="16#F005" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> "Index-Group/Offset", READ_WRITE_SYMVAL_BYHANDLE</xhtml>
            </documentation>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>06e1f24a-87bb-47a4-8d8e-fc0192b1e43e</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="BCD_CmdState" constant="true">
          <variable name="cBCD_CMD_DONE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="-1" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> ctrl commands definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cBCD_CMD_CONNECT_SOCKET">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1002" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Connect TCP socket</xhtml>
            </documentation>
          </variable>
          <variable name="cBCD_CMD_CLOSE_SOCKET">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1004" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Close TCP socket</xhtml>
            </documentation>
          </variable>
          <variable name="cBCD_CMD_COM_TEST">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1006" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Communication test </xhtml>
            </documentation>
          </variable>
          <variable name="cBCD_CMD_READ_DEV_INFO">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1008" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Readout device information</xhtml>
            </documentation>
          </variable>
          <variable name="cBCD_CMD_READ_OP_DATA">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1010" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Readout operating data</xhtml>
            </documentation>
          </variable>
          <variable name="cBCD_CMD_READ_SERVICE_INFO">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1012" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Readout service information	</xhtml>
            </documentation>
          </variable>
          <variable name="cBCD_CMD_READ_BARCODE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1014" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Command enable the sensor gate for X-TIME ("duration" setting of sensor object trigger)</xhtml>
            </documentation>
          </variable>
          <variable name="cBCD_STA_WaitForJob">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1000" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sensor try to detect a barcode.
 ctrl state definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cBCD_STA_ConnectSocketBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1002" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Open TCP socket busy</xhtml>
            </documentation>
          </variable>
          <variable name="cBCD_STA_CloseSocketBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1004" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Close TCP socket busy</xhtml>
            </documentation>
          </variable>
          <variable name="cBCD_STA_SocketClosed">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1006" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> TCP socket closed</xhtml>
            </documentation>
          </variable>
          <variable name="cBCD_STA_ComTestBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1008" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Communication test busy</xhtml>
            </documentation>
          </variable>
          <variable name="cBCD_STA_ReadCodeBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1010" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Read bar code busy</xhtml>
            </documentation>
          </variable>
          <variable name="cBCD_STA_Error">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="256" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error</xhtml>
            </documentation>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>654b17fc-95c4-4a6e-8747-ce7bbd1ea6d8</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="PRS_CmdState" constant="true">
          <variable name="cSTA_PRESENTBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="201" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl commands definitions
specific commands &gt;200 - every command has to be a even number
ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSTA_PRESENT">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
          </variable>
          <variable name="cSTA_ABSENTBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="203" />
            </initialValue>
          </variable>
          <variable name="cSTA_ABSENT">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>01651ab3-2c2c-4701-adfc-9d38c8613551</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="RFD_Cmd" constant="true">
          <variable name="cRFD_STA_Error">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="256" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> ctrl state definitions
 Error</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_STA_PowerOnBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="999" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Power On</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_STA_WaitForJob">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1002" />
            </initialValue>
          </variable>
          <variable name="cRFD_STA_ResetBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1003" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> RESET Reader </xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_STA_OffBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1007" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Turn Off antenna </xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_STA_Off">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1008" />
            </initialValue>
          </variable>
          <variable name="cRFD_STA_WriteBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1009" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Write Data to Tag </xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_STA_ReadBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1011" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Read Data from Tag </xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_STA_TagInitBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1013" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tag initialisation </xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_STA_CheckBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1017" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Check connection to antenna</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_STA_MDSBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1019" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Service function read MDS-State (State of the near Tag)</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_STA_SLGBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1021" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Service function read SLG State (State of the antenna)</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_CMD_DONE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="-1" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> ctrl commands definitions
 specific commands &gt;200 - every command has to be a even number</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_CMD_CTRL_ON">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1000" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Switch controller on </xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_CMD_CTRL_OFF">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1006" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Switch controller off </xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_CMD_Write">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1010" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Write Data to Tag </xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_CMD_Read">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1012" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Read Data from Tag </xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_CMD_Check">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1018" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Check connection to antenna </xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_CMD_MDS">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1020" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Service function read MDS-State (State of the near Tag)</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_CMD_SLG">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="1022" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Service function read SLG State (State of the antenna)</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_SUB_SetBaudrate">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2001" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sub States
 Power On Busy</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_SUB_SetComSettings">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2002" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Set Communication Settings</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_SUB_ClearBuffer">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2003" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">  Clear Buffer</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_SUB_InitString">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2004" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Initialisation String sending</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_SUB_CheckPon">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2005" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">  Check Power On State</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_SUB_Prepare">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2010" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> OFF Busy</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_SUB_SendBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2011" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Data send</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_SUB_WaitAnswer">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2012" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wait Answer</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_SUB_Write1">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2020" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> SLG Write Mode 1</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_SUB_Wait1">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2021" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> SLG Wait Mode 1</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_SUB_Write6">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2022" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> SLG Write Mode 6</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_SUB_Wait6">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2023" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> SLG Wait Mode 6</xhtml>
            </documentation>
          </variable>
          <variable name="cRFD_SUB_SubStatesEnd">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="2100" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">  Substates finished</xhtml>
            </documentation>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>b9d100af-ead9-4729-bfd8-63723378b736</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="RFD_Constants">
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>6f1bed1e-6340-4698-9eec-8e2b1ccc5445</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="BCC_CmdState" constant="true">
          <variable name="cBCC_CMD_READ">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> ctrl commands definitions
 specific commands &gt;200 - every command has to be a even number</xhtml>
            </documentation>
          </variable>
          <variable name="cBCC_STA_READBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="201" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cBCC_STA_READ">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="cBCC_CMD_READ" />
            </initialValue>
          </variable>
          <variable name="cSUB_READDELAYBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="300" />
            </initialValue>
          </variable>
          <variable name="cSUB_SENDREADCOMMAND">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="301" />
            </initialValue>
          </variable>
          <variable name="cSUB_READBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="302" />
            </initialValue>
          </variable>
          <variable name="cSUB_CLOSESOCKETstart">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="310" />
            </initialValue>
          </variable>
          <variable name="cSUB_CLOSESOCKETbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="311" />
            </initialValue>
          </variable>
          <variable name="cSUB_CONNECTSOCKETstart">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="312" />
            </initialValue>
          </variable>
          <variable name="cSUB_CONNECTSOCKETbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="313" />
            </initialValue>
          </variable>
          <variable name="cSUB_TESTSOCKETstart">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="314" />
            </initialValue>
          </variable>
          <variable name="cSUB_TESTSOCKETbusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="315" />
            </initialValue>
          </variable>
          <variable name="cSUB_DONE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="316" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>56fea13e-d56a-481c-81fa-4bf893476a5b</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="CYL_CmdState" constant="true">
          <variable name="cCMD_RETRACT">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl commands definitions
specific commands &gt;200 - every command has to be a even number</xhtml>
            </documentation>
          </variable>
          <variable name="cCMD_EXTEND">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <variable name="cSTA_RETRACTBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="201" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSTA_RETRACT">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="CYL_CmdState.cCMD_RETRACT" />
            </initialValue>
          </variable>
          <variable name="cSTA_EXTENDBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="203" />
            </initialValue>
          </variable>
          <variable name="cSTA_EXTEND">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="CYL_CmdState.cCMD_EXTEND" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>1352af2f-7e80-4ea0-bd89-71a4376b7c42</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="Const_DRV" constant="true">
          <variable name="cMAX_BLOCKED_SUP">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="3" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>bfc948d3-aed2-420b-b3ac-e40e075c9ae3</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="ECD_Const" constant="true">
          <variable name="cuinMaxSlaves">
            <type>
              <UINT />
            </type>
            <initialValue>
              <simpleValue value="256" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>9b105619-e1da-40d5-b99f-e7b61135db23</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="RFID_Data" constant="true">
          <variable name="cRFID_RepetionID">
            <type>
              <DWORD />
            </type>
            <initialValue>
              <simpleValue value="16#10100" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml"> RFID Data connection
 See RFID Specification
 Defines the Start Adress and the lengh of the Data in the RF ID Tag
 Every DoubleWord has to Words, Higher is lengh, lower word is Startadress
 Example	
 16#010005 =&gt; Startadress 5 Byte 1 =&gt; UV Settings</xhtml>
            </documentation>
          </variable>
          <variable name="cRFID_TrayInfo">
            <type>
              <DWORD />
            </type>
            <initialValue>
              <simpleValue value="16#10101" />
            </initialValue>
          </variable>
          <variable name="cRFID_HeighOfTray">
            <type>
              <DWORD />
            </type>
            <initialValue>
              <simpleValue value="16#10102" />
            </initialValue>
          </variable>
          <variable name="cRFID_Pretreatment">
            <type>
              <DWORD />
            </type>
            <initialValue>
              <simpleValue value="16#10103" />
            </initialValue>
          </variable>
          <variable name="cRFID_UVcuring">
            <type>
              <DWORD />
            </type>
            <initialValue>
              <simpleValue value="16#10104" />
            </initialValue>
          </variable>
          <variable name="cRFID_Filename">
            <type>
              <DWORD />
            </type>
            <initialValue>
              <simpleValue value="16#80105" />
            </initialValue>
          </variable>
          <variable name="cRFID_Brush">
            <type>
              <DWORD />
            </type>
            <initialValue>
              <simpleValue value="16#1010D" />
            </initialValue>
          </variable>
          <variable name="cRFID_TrayID">
            <type>
              <DWORD />
            </type>
            <initialValue>
              <simpleValue value="16#E0000" />
            </initialValue>
          </variable>
          <variable name="cRFID_TagID">
            <type>
              <DWORD />
            </type>
            <initialValue>
              <simpleValue value="16#8FFF0" />
            </initialValue>
          </variable>
          <variable name="cRFID_AllData">
            <type>
              <DWORD />
            </type>
            <initialValue>
              <simpleValue value="16#F0100" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>6afaa887-3afa-4537-928b-996534509c05</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="RFW_CmdState" constant="true">
          <variable name="cCMD_ON">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl commands definitions
specific commands &gt;200 - every command has to be a even number</xhtml>
            </documentation>
          </variable>
          <variable name="cCMD_READ">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <variable name="cCMD_WRITE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="206" />
            </initialValue>
          </variable>
          <variable name="cSTA_ONBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="201" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSTA_ON">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="cCMD_ON" />
            </initialValue>
          </variable>
          <variable name="cSTA_READBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="203" />
            </initialValue>
          </variable>
          <variable name="cSTA_READ">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="cCMD_READ" />
            </initialValue>
          </variable>
          <variable name="cSTA_WRITEBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="205" />
            </initialValue>
          </variable>
          <variable name="cSTA_WRITE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="cCMD_WRITE" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>076eb220-029f-4365-935e-6bd6b509e191</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="UMC_CmdState" constant="true">
          <variable name="cCMD_RIGHT">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl commands definitions
specific commands &gt;200 - every command has to be a even number</xhtml>
            </documentation>
          </variable>
          <variable name="cCMD_LEFT">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <variable name="cSTA_RESETMOTORERROR">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="203" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>e8f106a6-b2e6-4f7c-b68a-850a8394f646</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="VLV_CmdState" constant="true">
          <variable name="cCMD_OPEN">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="202" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl commands definitions
specific commands &gt;200 - every command has to be a even number</xhtml>
            </documentation>
          </variable>
          <variable name="cCMD_CLOSE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="204" />
            </initialValue>
          </variable>
          <variable name="cSTA_OPENBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="201" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <variable name="cSTA_OPEN">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="VLV_CmdState.cCMD_OPEN" />
            </initialValue>
          </variable>
          <variable name="cSTA_CLOSEBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="203" />
            </initialValue>
          </variable>
          <variable name="cSTA_CLOSE">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="VLV_CmdState.cCMD_CLOSE" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>75b1de79-e96e-4f7d-a4d3-461fb22b206a</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="VPC_CmdState" constant="true">
          <variable name="cSTA_VPC_StabilizeBusy">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="201" />
            </initialValue>
            <documentation>
              <xhtml xmlns="http://www.w3.org/1999/xhtml">ctrl specific states definitions</xhtml>
            </documentation>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>3cafe79f-fa4f-4674-b801-a9597a583bd0</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="ItemConst" constant="true">
          <variable name="MAX_OVEN_SEGMENTS">
            <type>
              <UINT />
            </type>
            <initialValue>
              <simpleValue value="7" />
            </initialValue>
          </variable>
          <variable name="MAX_PRINT_HEAD_COUNT">
            <type>
              <UINT />
            </type>
            <initialValue>
              <simpleValue value="5" />
            </initialValue>
          </variable>
          <variable name="MAX_PRINT_MODULE_COUNT">
            <type>
              <UINT />
            </type>
            <initialValue>
              <simpleValue value="2" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>72e57533-63d3-4bfb-a14c-0ccf4c178ea3</ObjectId>
            </data>
          </addData>
        </globalVars>
        <globalVars name="IdBaseConst" constant="true">
          <variable name="cRECVDATACHANNELBUFFER">
            <type>
              <INT />
            </type>
            <initialValue>
              <simpleValue value="20" />
            </initialValue>
          </variable>
          <addData>
            <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
              <ObjectId>51e34f2e-f000-4250-a825-02bf8723db30</ObjectId>
            </data>
          </addData>
        </globalVars>
        <addData>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ADS_AccessType">
              <baseType>
                <enum>
                  <values>
                    <value name="READ" value="0" />
                    <value name="WRITE" value="1" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>29ec6f3b-7d64-4135-9c48-375d1d344678</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_ADS_ConnectionData">
              <baseType>
                <struct>
                  <variable name="udiConID">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Connection ID. Automatically assigned by calling method for adding new connection</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiHandle">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Handle ID for data exchange. Determined automatically during state PONbusy.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strRoute">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Route of the PRG or FUB instance on server side. Example: 'SlowPRG_1.fbData.SIf.cur.st_ADSData'</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinTargetPort">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> ADS target port</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strNetID">
                    <type>
                      <string length="30" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> NetID</xhtml>
                    </documentation>
                  </variable>
                  <variable name="eAccessType">
                    <type>
                      <derived name="E_ADS_AccessType" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Access type</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiDataLen">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Length of the data structure</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pData">
                    <type>
                      <derived name="PVOID" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pointer to data structure. Note: Defined structure must be the same on client and server side.</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>93417077-ba05-4cd3-85d5-97ee470a754f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_ACL">
              <baseType>
                <struct>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_ACL_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_ACL_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="7" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>33cf6f00-8fa4-4a27-b1e4-f1d66d832525</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_ACL_Cur">
              <baseType>
                <struct>
                  <variable name="uinNumOfAdsConnections">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Shows the number of ADS (server) connections</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>fa5f4aba-0896-4336-a8f6-7ebb5891e07d</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_ACL_Par">
              <baseType>
                <struct>
                  <variable name="udiTOPowerOn_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Timeout power on. Timeout for initialize all ADS connections.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTOAddRoute_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Timeout add route</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTOReadData_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Timeout read data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTOWriteData_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Timeout write data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTORWData_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Timeout read/write data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiPollingInterval_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Polling interval for read/write of all ADS connections in list</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>1b468377-b892-489f-aca5-37fa42bf7e98</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_BCD_Type">
              <baseType>
                <enum>
                  <values>
                    <value name="None" value="0" />
                    <value name="SICK" />
                    <value name="KEYENCE" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>2c07d06e-e910-44fe-a4e8-69b111a759ce</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCD">
              <baseType>
                <struct>
                  <variable name="strState">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="strCmd">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="intCmd">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="stStatus">
                    <type>
                      <derived name="T_BCD_Status" />
                    </type>
                  </variable>
                  <variable name="stErr">
                    <type>
                      <derived name="T_BCD_Error" />
                    </type>
                  </variable>
                  <variable name="stCfg">
                    <type>
                      <derived name="T_BCD_Cfg" />
                    </type>
                  </variable>
                  <variable name="stPar">
                    <type>
                      <derived name="T_BCD_Par" />
                    </type>
                  </variable>
                  <variable name="stData">
                    <type>
                      <derived name="T_BCD_Data" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>653462ab-8000-47c2-b28c-62082b11c24f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCD_Cfg">
              <baseType>
                <struct>
                  <variable name="bolSimulation">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="strSensorIPAdr">
                    <type>
                      <string length="15" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                  </variable>
                  <variable name="udiSensorPort">
                    <type>
                      <UDINT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                  <variable name="iSensorType">
                    <type>
                      <derived name="E_BCD_Type" />
                    </type>
                  </variable>
                  <variable name="bolResponseIncludingDiagnostics">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Barcode is also sending diagnostics data</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5671334e-1135-48ec-bd02-a55db5293a77</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCD_Data">
              <baseType>
                <struct>
                  <variable name="bolCodeReaded">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="uliBarCode">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="strBarCode">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="stDevInfo">
                    <type>
                      <derived name="T_BCD_DeviceInfo" />
                    </type>
                  </variable>
                  <variable name="stServInfo">
                    <type>
                      <derived name="T_BCD_ServiceInfo" />
                    </type>
                  </variable>
                  <variable name="stOpData">
                    <type>
                      <derived name="T_BCD_OperatingData" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>f363979a-64df-4246-8b26-2ce9dead1690</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCD_DeviceInfo">
              <baseType>
                <struct>
                  <variable name="strComTestResult">
                    <type>
                      <string length="40" />
                    </type>
                  </variable>
                  <variable name="strManufacturer">
                    <type>
                      <string length="25" />
                    </type>
                  </variable>
                  <variable name="strDeviceType">
                    <type>
                      <string length="25" />
                    </type>
                  </variable>
                  <variable name="strOrderNumber">
                    <type>
                      <string length="20" />
                    </type>
                  </variable>
                  <variable name="strSWVersion">
                    <type>
                      <string length="10" />
                    </type>
                  </variable>
                  <variable name="strFWVersion">
                    <type>
                      <string length="10" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> shows the firmware version of the device</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strSerialNumber">
                    <type>
                      <string length="20" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>8edb2553-df50-405c-8a8e-ef2f7bc2c866</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCD_Error">
              <baseType>
                <struct>
                  <variable name="bolErrAck">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Reset failure</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolErrorActive">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> atleast one failure active</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSocketError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> error in TCP socket</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSensorError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> error in sensor (SICK)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiErrorID">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> error ID</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>a58447e5-b8e7-48fb-b4f5-eb7d091ad122</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCD_OperatingData">
              <baseType>
                <struct>
                  <variable name="strPowerOnCounter">
                    <type>
                      <string length="25" />
                    </type>
                  </variable>
                  <variable name="strOpHours">
                    <type>
                      <string length="25" />
                    </type>
                  </variable>
                  <variable name="strPowerOnHours">
                    <type>
                      <string length="20" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ba30ce24-d1ca-4601-863a-5f0ee5c9dd0a</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCD_Par">
              <baseType>
                <struct>
                  <variable name="tTOConnection">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="tTOSend">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                  <variable name="tTOReceive">
                    <type>
                      <TIME />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>0e73db4f-0e7a-4012-9bb4-a6baac9a06b6</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCD_ServiceInfo">
              <baseType>
                <struct>
                  <variable name="strLastUsername">
                    <type>
                      <string length="25" />
                    </type>
                  </variable>
                  <variable name="strLastParChangeDate">
                    <type>
                      <string length="10" />
                    </type>
                  </variable>
                  <variable name="strLastParChangeTime">
                    <type>
                      <string length="5" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>932bdba5-41cd-40cd-99de-cc9439f52f80</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCD_StateMachine">
              <baseType>
                <struct>
                  <variable name="intState">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> actual state</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStateLastCycle">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> state of last cycle</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStateHistory">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> save history backup p.e. in ERROR state</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStateNext">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> set state for next cycle</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTimeInState_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Time in this State</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>fb09af41-742f-464f-a012-e48229615a1b</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCD_Status">
              <baseType>
                <struct>
                  <variable name="bolSocketConnected">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Socket connected</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolComChecked">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>b917762c-531c-47d1-904c-a37d4358f834</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCD_TxStructure">
              <baseType>
                <struct>
                  <variable name="intMessageSize">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual message size</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aTxData">
                    <type>
                      <array>
                        <dimension lower="0" upper="300" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tx data buffer</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>76d94535-b978-4030-b768-06522da3d248</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_PRS">
              <baseType>
                <enum>
                  <values>
                    <value name="Dummy" value="1" />
                    <value name="MAX_E_ALM_PRS" />
                  </values>
                  <baseType>
                    <UINT />
                  </baseType>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>aff47857-208f-4a05-ade5-9bdd57b44296</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PRS">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_PRS_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_PRS_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_PRS_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_PRS_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <derived name="T_Ctrl_SIf_PRS_Out" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="E_ALM_PRS.MAX_E_ALM_PRS" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Ilk">
                    <type>
                      <derived name="T_Ctrl_SIf_PRS_Ilk" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">interlock of output/movements</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>e69bb677-6853-4824-9f34-f19f504014af</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PRS_Cfg">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ab0eff3e-f125-40a6-9b44-b53f0ee42a0f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PRS_Cur">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>026cd9c2-bbcb-47eb-b2ae-5e5f04eb6c27</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PRS_Ilk">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>817b33d9-cc28-402f-8198-37ca51afbdb8</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PRS_In">
              <baseType>
                <struct>
                  <variable name="bolPresent">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Input Sensor is present</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5626a472-a15a-4f04-a51f-80d3b3aec087</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PRS_Out">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>d7130d1c-77ba-4534-8e71-61c9a5983132</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_PRS_Par">
              <baseType>
                <struct>
                  <variable name="udiDebouncePresentTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Debounce time until it shows as present</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiDebounceAbsentTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Debounce time until it shows as absent</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSimHangerAvailable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> True = simulated hanger available</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5eb894d2-18f2-47c1-94e0-f58713c4d395</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_Typ_Baudrate">
              <baseType>
                <enum>
                  <values>
                    <value name="baud_2400" value="4" />
                    <value name="baud_4800" value="5" />
                    <value name="baud_9600" value="6" />
                    <value name="baud_19200" value="7" />
                    <value name="baud_38400" value="8" />
                    <value name="baud_57600" value="9" />
                    <value name="baud_115200" value="10" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>4dac086b-9156-4981-ab7c-6e4177cd39a6</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_Typ_Ftim">
              <baseType>
                <enum>
                  <values>
                    <value name="RF300" value="0" />
                    <value name="ISO_generall" value="1" />
                    <value name="ISO_infineon" value="3" />
                    <value name="ISO_Fujitsu" value="4" />
                    <value name="ISO_NXP" value="5" />
                    <value name="ISO_TI" value="6" />
                    <value name="ISO_ST" value="7" />
                    <value name="Max_E_Typ_Ftim" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
                  <EnumValueDocumentation>
                    <EnumValue>
                      <Name>RF300</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> Setting for air interface</xhtml>
                      </Documentation>
                    </EnumValue>
                  </EnumValueDocumentation>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>62f386c1-e9b6-4244-a2a1-ede63fe56419</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_RFD">
              <baseType>
                <struct>
                  <variable name="strState">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="strCmd">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="intCmd">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="intServiceCmd">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="stStatus">
                    <type>
                      <derived name="T_RFD_Status" />
                    </type>
                  </variable>
                  <variable name="stCfg">
                    <type>
                      <derived name="T_RFD_Cfg" />
                    </type>
                  </variable>
                  <variable name="stCur">
                    <type>
                      <derived name="T_RFD_Cur" />
                    </type>
                  </variable>
                  <variable name="stErr">
                    <type>
                      <derived name="T_RFD_Error" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>eaab37f2-ed1c-4b67-bac1-f10b4db1a221</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_RFD_Cfg">
              <baseType>
                <struct>
                  <variable name="bolSimulation">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="eTyp">
                    <type>
                      <derived name="E_Typ_RFW" />
                    </type>
                  </variable>
                  <variable name="usiResetParameter">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="2#101010" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Reset parameter value</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiFtimSetting">
                    <type>
                      <derived name="E_Typ_Ftim" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Setting of the Air interface</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiResetOption1">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="2#10" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Reset option1 value</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinBaudrate">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Set Baudrate</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinComSettings">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Set Communikationsettings</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stNetId">
                    <type>
                      <derived name="TC2_SYSTEM.T_AmsNetID" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Net ID oft EtherCat Master</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinSlaveAddr">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Port Number of EtherCat Slave Comunication Module</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinCoeIndexComSettings">
                    <type>
                      <WORD />
                    </type>
                    <initialValue>
                      <simpleValue value="16#8000" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> CoE Object Index for Communication Settings</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiCoeSubindexComBaudrate">
                    <type>
                      <BYTE />
                    </type>
                    <initialValue>
                      <simpleValue value="16#11" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> CoE Object SubIndex for Baudrate</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiCoeSubindexComDataframe">
                    <type>
                      <BYTE />
                    </type>
                    <initialValue>
                      <simpleValue value="16#15" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> CoE Object SubIndex for Dataframe</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiRetry">
                    <type>
                      <UDINT />
                    </type>
                    <initialValue>
                      <simpleValue value="10" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Retry Job to RFID Reader</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiMemory">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">///////////////////////////////////////////////
 Reset Memory 00=RAM, 01=remanent</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiScanMode">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="1" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Scan Mode 00= Continous Read; 01=Single Read</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinLockTime_ms">
                    <type>
                      <UINT />
                    </type>
                    <initialValue>
                      <simpleValue value="5000" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Lock Time in ms</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>f6a5f8d6-2bd2-4c90-8a22-3378c4b5783f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_RFD_Cur">
              <baseType>
                <struct>
                  <variable name="pData">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="255" />
                            <baseType>
                              <BYTE />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pointer to Received Data Array</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinAdressData">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Startadress to Read/Write at the data Array Element</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinAdressTag">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Startadress to Read/Write at the Tag</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiCount">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Number of bytes to Read/Write</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>6c168028-0cb6-43b9-8034-77f26b88aab1</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_RFD_Error">
              <baseType>
                <struct>
                  <variable name="bolErrAck">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Reset failure</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolErrorActive">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> atleast one failure active</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolComError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> error at communication card</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolProtcolError">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bolRFIDError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error with RF ID Tag</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSDOError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error at setting of the communication Card (SDO Write)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiErrorID">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> information to Communication Card error</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>dd9f466c-845d-4e6a-aa70-0b0f9512822a</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_RFD_MDS_Diagnose">
              <baseType>
                <struct>
                  <variable name="usiLFD">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Power flux density: as smaller the value, as higher the field intensity</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiFZP">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Errorcounter inactive mode</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiFZA">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Errorcounter active: CRC or signature errors</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiANWZ">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Presence time of tag, resolution in 9.7ms</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>2bb3cefc-9dd9-4c16-9998-f2ff9df8215f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_RFD_MDS_State">
              <baseType>
                <struct>
                  <variable name="bytMDSType">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> MDS Type 1=no FRAM; 2=8k FRAM; 3=32k FRAM; 4=64k FRAM; 5=128k FRAM; 6=256k FRAM</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytLockState">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Lock bit registers (lock state)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytVersion">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> MDS Version</xhtml>
                    </documentation>
                  </variable>
                  <variable name="worMemSize">
                    <type>
                      <WORD />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Memory Size</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytBlockSize">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Blocksize in Byte</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytBlockNo">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Value of memory Blocks</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>4c289891-fd14-4474-ada9-f856e721836b</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_RFD_SLG_Diagnose">
              <baseType>
                <struct>
                  <variable name="usiS_Info">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Mode SLG Diagnose</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiFZP">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Errorcounter inactive mode</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiABZ">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Counter abort</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiCFZ">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Errorcounter code errors</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiSFZ">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Errorcounter signature errors</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiCRCFZ">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Errorcounter CRC</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiBSTAT">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual command state</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiASMFZ">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Counter interface errors to host (Parity, BCC, Frame)</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>8440531f-c5ee-4b68-b480-2af3a7af51cc</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_RFD_SLG_State">
              <baseType>
                <struct>
                  <variable name="bytHWType">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> HW Type of SLG  0=RF310R RF340R RF350R (-xAA10); 1=RF380R (-3AA10); 2=RF310R(-1AB10); 3=RF380R (-3AB10); 4=RF340R RF350R (-2AB10,-4AB10)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="worHWVersion">
                    <type>
                      <WORD />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> HW Version</xhtml>
                    </documentation>
                  </variable>
                  <variable name="worURLVersion">
                    <type>
                      <WORD />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Loading Version</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytFWType">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> FW Type</xhtml>
                    </documentation>
                  </variable>
                  <variable name="worFWVersion">
                    <type>
                      <WORD />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> FW Version</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytDriverType">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Driver Type 1=3964R</xhtml>
                    </documentation>
                  </variable>
                  <variable name="worDriverVersion">
                    <type>
                      <WORD />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Driver Version</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytComm">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Communication port 1=RS422, 2=RS232</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytBaud">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Communication Baud rate 1=19.2kBaud; 3=57.6kBaud; 5=115.2kBaud</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytPower">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> sending power (only RF380R) 0=standard; 2=0.5W; 3=0.75W; 4=1W; 5=1.25W (default); 6=1.5W; 7=1.75W; 8=2W</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytMtag">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Number of maximal tags in the field</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytFtim">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> air interface 0=RF300; 1=ISO generall; 3=ISO infineon Chip; 4=ISO Fujitsu; 5=ISO NXP; 6=ISO TI; 7=ISO ST</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytAntenna">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> State antenna 1=ON; 2=OFF</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytPresence">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tag presence 0=No presence; 1=prexence</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>97e293b2-c29e-40d5-9f2f-b996ac56d98e</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_RFD_StateMachine">
              <baseType>
                <struct>
                  <variable name="intState">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">actual state</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStateLastCycle">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">state of last cycle</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStateHistory">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">save history backup p.e. in ERROR state</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStateNext">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">set state for next cycle</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTimeInState_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Time in this State</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>a517ce1a-b938-4526-b147-20ccd6dbf4af</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_RFD_Status">
              <baseType>
                <struct>
                  <variable name="bolStartupOk">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = Antenna is initialized  </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolInitOk">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = Antenna is initialized  </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolOn">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = Antenna is on </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolPresent">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = tag is present  </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolL_UEB">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = Communication to SLG is OK  </xhtml>
                    </documentation>
                  </variable>
                  <variable name="stSLG_State">
                    <type>
                      <derived name="T_RFD_SLG_State" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> SLG State only actual on demand </xhtml>
                    </documentation>
                  </variable>
                  <variable name="stSLG_Diag">
                    <type>
                      <derived name="T_RFD_SLG_Diagnose" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> SLG Diagnose only actual on demand </xhtml>
                    </documentation>
                  </variable>
                  <variable name="stMDS_State">
                    <type>
                      <derived name="T_RFD_MDS_State" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> SLG State only actual on demand  </xhtml>
                    </documentation>
                  </variable>
                  <variable name="stMDS_Diag">
                    <type>
                      <derived name="T_RFD_MDS_Diagnose" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> SLG Diagnose only actual on demand  </xhtml>
                    </documentation>
                  </variable>
                  <variable name="abyteUID">
                    <type>
                      <array>
                        <dimension lower="0" upper="7" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tag ID</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>54fa781f-53ac-46eb-bdd5-6b787b2a4c94</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_StateWord">
              <baseType>
                <struct>
                  <variable name="bolTransmitAccepted">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Acknowledge the datachange of this Command bit</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolReceiveRequest">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">New Datat at the input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolInputAccepted">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">0=Ready for Data exchange; 1=initialisation of the clam</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolBufferFull">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Input Buffer is full, all new arriveing data lost</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolParityErr">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Parity Error occured</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolFramingErr">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Framing Error occured</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolOverrunErr">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Overrun Error occured</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiInLenght">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Amounth of the reached Input Bytes</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>686b79f1-4a31-4865-bdd7-0e5ad042dd57</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_LIGHTSTATE">
              <baseType>
                <enum>
                  <values>
                    <value name="Off" />
                    <value name="BlinkSlow" />
                    <value name="BlinkFast" />
                    <value name="On" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>be89386a-9bcb-48a0-ac2c-45ae69d612ed</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_StackLightColor">
              <baseType>
                <enum>
                  <values>
                    <value name="Red" />
                    <value name="Yellow" />
                    <value name="Green" />
                    <value name="Blue" />
                    <value name="Max_SackLightColor" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>bda7aab6-4fca-41b3-82c6-e005308c37c1</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_LighInformation">
              <baseType>
                <struct>
                  <variable name="eState">
                    <type>
                      <derived name="E_LIGHTSTATE" />
                    </type>
                  </variable>
                  <variable name="udiTime_ms">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="bolOutput">
                    <type>
                      <derived name="REFERENCE TO REFERENCE TO BOOL" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>d00a6430-b78a-49b6-842b-9a8dd51cba33</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_BCC_Data">
              <baseType>
                <struct>
                  <variable name="uliBarCode">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="strBarCode">
                    <type>
                      <string />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>7b943ac5-46bd-4a90-9c24-e628690f2936</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_BCC">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_BCC_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_BCC_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_BCC_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_BCC_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <derived name="T_Ctrl_SIf_BCC_Out" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="7" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>f11c08c6-0943-4a3f-848d-ef8e1afb035e</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_BCC_Cfg">
              <baseType>
                <struct>
                  <variable name="strSensorIPAdr">
                    <type>
                      <string length="15" />
                    </type>
                    <initialValue>
                      <simpleValue value="''" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> IP Adress of the sensor (PLC = Client, Sensor = Server)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSensorPort">
                    <type>
                      <UDINT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Port number of the sensor</xhtml>
                    </documentation>
                  </variable>
                  <variable name="iSensorType">
                    <type>
                      <derived name="E_BCD_Type" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>a97881d0-f15c-463e-bed4-a9157cd373d9</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_BCC_Cur">
              <baseType>
                <struct>
                  <variable name="bolConnected">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sensor connected</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolComChecked">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Communication checked during PON</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolNewCodeReaded">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = new bar code readed </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolNoRead">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = no code readed, answer *No Read* </xhtml>
                    </documentation>
                  </variable>
                  <variable name="stData">
                    <type>
                      <derived name="T_BCC_Data" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sensor data</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>d6acd4c7-9b27-4de2-89d8-6109860947d5</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_BCC_In">
              <baseType>
                <struct>
                  <variable name="bolSensorTrigScan">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sensor input for triggering a new barcode scan </xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>1672ef70-7add-4ced-bc4f-d0dd9717cff4</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_BCC_Out">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>677ad9db-090e-4212-91bd-3082e715726c</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_BCC_Par">
              <baseType>
                <struct>
                  <variable name="udiTOPowerOn_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Timeout power on</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTORead_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Timeout read</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiExecuteScanDelayTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Barcode scan delay time - Delay before a barcode scan will be triggered after a new product has been detected by trigger sensor input</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>f116adff-fddf-4ac8-95de-c4ab4f337edd</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_CYL">
              <baseType>
                <enum>
                  <values>
                    <value name="SensorRetractAlwaysOn" value="1" />
                    <value name="SensorExtendNotReached" value="2" />
                    <value name="SensorExtendAlwaysOn" value="3" />
                    <value name="SensorRetractNotReached" value="4" />
                    <value name="InterlockExtend" value="5" />
                    <value name="InterlockRetract" value="6" />
                    <value name="MAX_E_ALM" />
                  </values>
                  <baseType>
                    <UINT />
                  </baseType>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="qualified_only" Value="" />
                  </Attributes>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>de1323c6-236a-49e4-bde6-ee0d6f7c08fe</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_Typ_CYL">
              <baseType>
                <enum>
                  <values>
                    <value name="Valve2_Sensor2" value="0" />
                    <value name="Valve2_SensorExtended" />
                    <value name="Valve2_SensorRetracted" />
                    <value name="Valve2_Sensor0" />
                    <value name="Valve1_Sensor2" />
                    <value name="Valve1_SensorExtended" />
                    <value name="Valve1_SensorRetracted" />
                    <value name="Valve1_Sensor0" />
                    <value name="Max_E_Typ_CYL" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
                  <EnumValueDocumentation>
                    <EnumValue>
                      <Name>Valve2_Sensor2</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">bistabile and two feedback sensors</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Valve2_SensorExtended</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">bistabile and extended feedback sensors	</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Valve2_SensorRetracted</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">bistabile and retracted feedback sensors	</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Valve2_Sensor0</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">bistabile and no feedback sensors</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Valve1_Sensor2</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">monostabile and 2 feedback sensors	</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Valve1_SensorExtended</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">monostabile and extended feedback sensors	</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Valve1_SensorRetracted</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">monostabile and retracted feedback sensor</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Valve1_Sensor0</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">monostabile and no feedback sensors</xhtml>
                      </Documentation>
                    </EnumValue>
                  </EnumValueDocumentation>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>986763a4-a581-4222-a762-c3c7959a5857</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_CYL">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_CYL_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_CYL_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_CYL_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_CYL_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <derived name="T_Ctrl_SIf_CYL_Out" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="(E_ALM_CYL.MAX_E_ALM - 1)" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Ilk">
                    <type>
                      <derived name="T_Ctrl_SIf_CYL_Ilk" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">interlock of output/movements</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5c2a2407-bb24-4c57-a14a-77cf8113d51d</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_CYL_Cfg">
              <baseType>
                <struct>
                  <variable name="eTyp">
                    <type>
                      <derived name="E_Typ_CYL" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>fb5cfb74-feb4-405c-a6fe-09f460def687</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_CYL_Cur">
              <baseType>
                <struct>
                  <variable name="udiMoveTimeRetract">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] time last movement to retract</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiMoveTimeExtend">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] time last movement to extend</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>d9d9d7ac-5771-4c59-afac-51216b873cc4</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_CYL_Ilk">
              <baseType>
                <struct>
                  <variable name="bolRetract">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">interlock retraction of cylinder</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolExtend">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">interlock extend of cylinder</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>306d491c-702b-4109-95c1-9e9e92b5c7b7</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_CYL_In">
              <baseType>
                <struct>
                  <variable name="bolExtended">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">sensor feedback position extended reached</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolRetracted">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">sensor feedback position retracted reached</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>4601b753-b0b2-4566-871e-c444d9f36dcf</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_CYL_Out">
              <baseType>
                <struct>
                  <variable name="bolRetract">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">switch valve retract</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolExtend">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">switch valve extend</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>3b004f65-cb6d-45b8-9ae1-390b26ec4067</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_CYL_Par">
              <baseType>
                <struct>
                  <variable name="udiExtendTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] until failure to long time for extend</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiRetractTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] until failure to long time for retract</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSimExtendTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] simulation time for extend or /2 of timeout time?</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSimRetractTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] simulation time for retract or /2 of timeout time?</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>d2a041b0-9ccd-45c7-8c9c-38689c415a92</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_Typ_DRV">
              <baseType>
                <enum>
                  <values>
                    <value name="None" value="0" />
                    <value name="TLP" />
                    <value name="TLK" />
                    <value name="TLKV" />
                    <value name="TLPsort" />
                    <value name="TLS" />
                    <value name="TLC" />
                    <value name="Max_E_Typ_JUN" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>e428a6b9-6d5f-44be-983a-f52fb9e97335</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_DRV">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_DRV_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_DRV_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_DRV_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_DRV_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <derived name="T_Ctrl_SIf_DRV_Out" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="5" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5a32ac4e-6ebf-44bf-a08a-614dc14fbcdf</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_DRV_Cfg">
              <baseType>
                <struct>
                  <variable name="eTyp">
                    <type>
                      <derived name="E_Typ_DRV" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Type of drive</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinDistPerPulse_um">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Distance per pulse	</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSpeedVariable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Has Variable Speed	</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolPulseExist">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Has Pulse signal for position and speed calculation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiCountBlockedSupervis">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Number of blocked supervision inputs</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinPinDistance_um">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [um] PinDistance</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolEnableMaintenaceSwitch">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Enable Maintenace Switch</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>bce6612a-fe0b-49d8-9e8e-9e023c034430</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_DRV_Cur">
              <baseType>
                <struct>
                  <variable name="dinPulseCounter">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="dinPos_um">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="dinSpeed_um_s">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>b0dc7119-59e8-48da-a345-efe3289e0ff2</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_DRV_In">
              <baseType>
                <struct>
                  <variable name="bolOverload">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                  </variable>
                  <variable name="bolPulse">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                  </variable>
                  <variable name="a_bolBlockedSupvervis">
                    <type>
                      <array>
                        <dimension lower="1" upper="cMAX_BLOCKED_SUP" />
                        <baseType>
                          <derived name="BASE_PLC.T_Ctrl_IoBool" />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="bolMaintenanceSwitch">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> DI of Maintenance Switch</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>fbc3fb3f-0955-46ed-a4bb-0076c57fea6c</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_DRV_Out">
              <baseType>
                <struct>
                  <variable name="bolSpeed_1">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> bolSpeed_1 = slow
 bolSpeed_2 = fast
 bolSpeed_1 &amp; bolSpeed_2 = middle speed </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSpeed_2">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ad8e0015-b138-4cb4-9001-517d7cf9dba1</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_DRV_Par">
              <baseType>
                <struct>
                  <variable name="udi_pulseTimeout_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Timeout supervision of pulse in RUN</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udi_pulseSim_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Simulation of pulse in RUN: 0.676mm/ms / 38.4mm/puls =&gt; 56.8ms/puls</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usi_speedLevel">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 0=slow, 1=middle, 2=fast</xhtml>
                    </documentation>
                  </variable>
                  <variable name="int_MaxBrokenPins">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Maximum Broken Pins</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>cabacbe0-14ef-4839-a7e6-fa8cff440b56</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_ECD">
              <baseType>
                <enum>
                  <values>
                    <value name="ADS_ComError" value="1" />
                    <value name="TimeOutFunction" value="2" />
                    <value name="NotAllSlaveConnected" value="3" />
                    <value name="ToManySlaves" value="4" />
                    <value name="MasterStateError" value="5" />
                    <value name="SlaveStateError" value="6" />
                    <value name="SlaveCRCError" value="7" />
                    <value name="SlaveLinkError" value="8" />
                    <value name="NoSlaveFound" value="9" />
                    <value name="StateChanges" value="10" />
                    <value name="MAX_E_ALM" />
                  </values>
                  <baseType>
                    <UINT />
                  </baseType>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
                  <EnumValueDocumentation>
                    <EnumValue>
                      <Name>ADS_ComError</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> ADS Communication Error to EtherCAT Master =&gt; Info = ADS_Errorcode</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>TimeOutFunction</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> A Function is not finished after the defined Timeout</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>NotAllSlaveConnected</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> Configured and reached Slaves are not the same =&gt; Info Byte 0+1 = Slave Addres from last error Info Byte 2+3 = Numbers of error Slaves</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>ToManySlaves</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> More slaves at the master as the structure could handle =&gt; Info Byte 0+1 = Slave Addres from last error Info Byte 2+3 = Numbers of error Slaves</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>MasterStateError</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> Master not in the correct state =&gt; Info = Masterstate</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>SlaveStateError</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> Minimum one Slave not in the correct state =&gt; Byte 0+1 = Slave Addres from last error, Info Byte 2 + 3 = State of last error Slave</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>SlaveCRCError</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> Minimum one Slave has to many CRC Erros =&gt; Byte 0+1 = Slave Addres from last error, Info Byte 2 +3 = Number of CRC Errors from last Slave with error</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>SlaveLinkError</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> Minimum one Slave has a LinkState Erros =&gt; Byte 0+1 = Slave Addres from last error Info Byte 2 + 3 = Link State of last error Slave</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>NoSlaveFound</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> No slave found in the network</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>StateChanges</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> To many abnormal State Changes</xhtml>
                      </Documentation>
                    </EnumValue>
                  </EnumValueDocumentation>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>932b64ec-7c8c-42fb-8048-153855c94db6</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_ECD">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_ECD_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_ECD_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_ECD_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="(E_ALM_ECD.MAX_E_ALM - 1)" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>1b148a58-3b69-41f0-8c7d-2947da3da205</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_ECD_Cfg">
              <baseType>
                <struct>
                  <variable name="strNetID">
                    <type>
                      <string length="30" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> NetID</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolRunAlways">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Run allways the scanning without set into run</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>6e57999f-20da-4b90-b2ab-1a877f653fbf</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_ECD_Cur">
              <baseType>
                <struct>
                  <variable name="uinNumOfSlaves">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Shows the number of EtherCAT Slaves</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stSlaveData">
                    <type>
                      <array>
                        <dimension lower="0" upper="ECD_Const.cuinMaxSlaves" />
                        <baseType>
                          <derived name="T_ECD_SlaveData" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Information of every slave</xhtml>
                    </documentation>
                  </variable>
                  <variable name="worMasterState">
                    <type>
                      <WORD />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> State Of Master</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiCRCSumm">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> All CRC Errors</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinNumOfSlaveErrors">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Counter of Slave Errors State</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>100f61e7-53bf-46d9-97f9-d0372380cc5d</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_ECD_Par">
              <baseType>
                <struct>
                  <variable name="udiTOPowerOn_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Timeout power on. Timeout for initialize all ADS connections.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTOCheckAll_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Timeout function over all slaves</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTOCheckOne_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Timeout function for one slave</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiPollingInterval_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Polling interval for States</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiMaxCRC">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Maximum CRC Value one slave </xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>01379ec2-bf43-4e18-96a1-59fd7c4b2c58</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_ECD_SlaveData">
              <baseType>
                <struct>
                  <variable name="stConfigData">
                    <type>
                      <derived name="Tc2_EtherCAT.ST_EcSlaveConfigData" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Slave Configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinAddress">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Address of the slave (as UINT, beacuase in stConfigData is only as WORD)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stState">
                    <type>
                      <derived name="Tc2_EtherCAT.ST_EcSlaveState" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> State of the slave</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stCRCError">
                    <type>
                      <derived name="Tc2_EtherCAT.ST_EcCrcErrorEx" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> CRC Error totally</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>3e382130-7769-4e99-9c92-9d08b9ab5518</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_Typ_RFW">
              <baseType>
                <enum>
                  <values>
                    <value name="RF310R" value="0" />
                    <value name="RF382R" value="1" />
                    <value name="Max_E_Typ_CYL" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
                  <EnumValueDocumentation>
                    <EnumValue>
                      <Name>RF310R</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> RF310</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>RF382R</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> RF382R</xhtml>
                      </Documentation>
                    </EnumValue>
                  </EnumValueDocumentation>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>879fc782-15af-4f75-a012-e12eb427a762</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_RFW">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_RFW_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_RFW_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_RFW_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_RFW_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <derived name="T_Ctrl_SIf_RFW_Out" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="DtChnToLine">
                    <type>
                      <derived name="T_Ctrl_SIf_RFW_DtChnToLine" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Data Channel from PLC to Line Controller</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="6" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>d9a4a247-421c-44e7-8bfc-57fcfe0b5511</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_RFW_Cfg">
              <baseType>
                <struct>
                  <variable name="eTyp">
                    <type>
                      <derived name="E_Typ_RFW" />
                    </type>
                  </variable>
                  <variable name="bolGetTrayIDAuto">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Get automatically the Tray ID too </xhtml>
                    </documentation>
                  </variable>
                  <variable name="stNetId">
                    <type>
                      <derived name="TC2_SYSTEM.T_AmsNetID" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Net ID oft EtherCat Master</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinSlaveAddr">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Port Number of EtherCat Slave Comunication Module</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolDtChToLine_send">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Send every New RFID to Line controller</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>6b942f5f-0429-4027-a9d6-f0ab33a8eff8</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_RFW_Cur">
              <baseType>
                <struct>
                  <variable name="bolPresent">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1 = tag is present  </xhtml>
                    </documentation>
                  </variable>
                  <variable name="abytData">
                    <type>
                      <array>
                        <dimension lower="0" upper="255" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Data to read / write</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stData">
                    <type>
                      <derived name="T_RFW" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Data in Structure</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dwoJob">
                    <type>
                      <DWORD />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Job information, what data read or write</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>cbc1eee0-e47f-408a-9d03-6db73294d146</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_RFW_DtChnToLine">
              <baseType>
                <struct>
                  <variable name="stNewRfid">
                    <type>
                      <derived name="T_NewRFID_DtChn" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>691e189f-a29e-4fd6-a78c-50e8410d1145</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_RFW_In">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>dbc9c954-8778-46e0-8057-f6886c73fe2b</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_RFW_Out">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>c810c854-060a-4ded-9c4d-aededf9b3111</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_RFW_Par">
              <baseType>
                <struct>
                  <variable name="udiReadTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] until failure to long time for read</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiWriteTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] until failure to long time for write</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiMinCmdTime">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] minimum wait time between two read command</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiLockTime">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] locktime prevents sending same ID's to LineControl multiple times</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>d8376c7a-9f8f-4b58-9129-6407a4608458</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_NewRFID_DtChn">
              <baseType>
                <struct>
                  <variable name="strID">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> configurable if Tag or Tray ID</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uliTagID">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="strTimestamp">
                    <type>
                      <string length="24" />
                    </type>
                  </variable>
                  <variable name="intDataState">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>8f51bc39-bcf8-4bc4-978c-c474f1fb6d1b</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_RFW">
              <baseType>
                <struct>
                  <variable name="usiRepetitionID">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">	Repeteition ID			Identifies the try number in the sequence	</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolWorkstation2">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">	Workstation		2 workstations in the cell	1 BIT	0: Workstation1, 2: Workstation2</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolDeleteFileAfterPrint">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">usiProductID : USINT;				// 	The product ID bits 1 to 5 are indeed not used. Mail T.Bosgiraud 11.6.2013 Product type	Max number of product types = 32	5 bits,	product ID (bits 1 to 5), </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolPrintOk">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 	1 means that the image has been printed without problem.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolHeightUseMeasure">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">	0: Use the bottom of the tray as basis and add Offset</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiHeightOffset">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">	Email 1.06.2013 Berk “Use measured height=1”, the actual measurement of the  laser plus any offsets programmed into the tray are used to adjust the lifting height
	1: Use the printable product surface as basis and add Offset to the measured height</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolHeightOffsetSignMinus">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 	“Offset +/-” = 1 means that the printable surface OF the item will go further away FROM the print head.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolIonizer">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 	“Offset +/-” = 0 (default value) means that the printable surface of the item will come closer to the print head</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiPlasmaLevel">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 	Pre-treatment	Plasma 0: Plasma off, 1: Level 1 ..3:Level3</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolPrintPass">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 	Print numbers 1 means that the image needs to be printed twice on the products</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolNozzleCheck">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 	1 means that the nozzle check pattern has to be printed onto the products.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolAligneCheck">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">	1 means that the alignment check pattern has to be printed onto the products.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiUVPinningLevel">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">	UV-pinning intensity 0: Level1 ... 15: Level16</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiUVLampLevel">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">	UV-lamp intensity 0: Level1 ... 15: Level16</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strFileName">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> p.e.: 268205625-3.pdf -&gt; The file name sent by VIPER to the printer and to the conveyor is made out of 64 bits</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolBrush">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> The RFID divides the rest of the name (268205625-3) as 8 successive bytes arranged as follows:
	-	Byte 7 (RFID byte 0Dhex) to byte 1 (RFID byte 07hex) express the number before the hyphen sign (in this case 268205625)
	-	Byte 0 (RFID byte 06hex) expresses the number after the hyphen sign (in this case 3).</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolBrushClean">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">	1: use second brush means that the brush has TO be used FOR the considered tray</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolBrushFans">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">	“Brush Fans”=1 means that the fans have to be used for the considered tray</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolGutterClean">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">	“Gutter Clean”=1 means that the tray is running for gutter cleaning purposes.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSpecialTray">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 	This bit tells whether the tray is a regular production tray or a special tray (nozzle check, alignment...).</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strTrayID">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 	Byte 0-13	-&gt;9999999999999	</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strTagID">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 	Byte 0-13	-&gt;9999999999999	</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uliTagID">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>3e51dc33-0305-4c60-82e0-8b1f28fdb88f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_SGT">
              <baseType>
                <enum>
                  <values>
                    <value name="Dummy" value="1" />
                    <value name="MAX_E_ALM" />
                  </values>
                  <baseType>
                    <UINT />
                  </baseType>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="qualified_only" Value="" />
                  </Attributes>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>bc7ed57b-bdcd-4e99-8136-da85d9f53475</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_SGT">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_SGT_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_SGT_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <derived name="T_Ctrl_SIf_SGT_Out" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="(E_ALM_SGT.MAX_E_ALM - 1)" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9e172bd7-7fc6-4aac-ba50-a15e176a7521</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_SGT_Cfg">
              <baseType>
                <struct>
                  <variable name="bolEnableLampTest">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Enable lamp test in PONBusy state</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>3273db0a-4fb0-4402-8d78-b703159a5254</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_SGT_Out">
              <baseType>
                <struct>
                  <variable name="bolGreen">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> green lamp</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolYellow">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> yellow lamp</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolRed">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> red lamp</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolBeep">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> acoustic signal</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>74828ba3-5fa7-4c13-a659-f7267e3bb943</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_SGT_Par">
              <baseType>
                <struct>
                  <variable name="udiBlinkTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Blink interval time</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiBeepOnTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Beep on time</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiBeepOffTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Beep off time</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiLampTestTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Lamp test time, used in PONBusy</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>c9b3c771-0266-4303-9b25-0bad0c77e050</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_UMC">
              <baseType>
                <enum>
                  <values>
                    <value name="MotorOnTimeout" value="1" />
                    <value name="MotorError" value="2" />
                    <value name="MotorWarning" value="3" />
                    <value name="MotorOverCurrent" value="4" />
                    <value name="MotorNotReady" value="5" />
                    <value name="DirectionParameterOverflow" value="6" />
                    <value name="SpeedOverLimit" value="7" />
                    <value name="MotorStatusInformation" value="8" />
                    <value name="MAX_E_ALM_UMC" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>0e81823e-a6e7-4b07-bc48-5defe334492f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_CFG_UMC">
              <baseType>
                <enum>
                  <values>
                    <value name="Standard" value="0" />
                    <value name="LenzeFC" value="1" />
                    <value name="MAY_E_CFG_UMC" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>13c27364-c2e6-4822-9f8f-ab42b9793010</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_TURN_DIRECTION">
              <baseType>
                <enum>
                  <values>
                    <value name="AUTOMATIC" value="0" />
                    <value name="LEFT" value="1" />
                    <value name="RIGHT" value="2" />
                    <value name="MAX_E_TURN_DIRECTION" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>c64f9134-9c1a-4730-886a-ba6e51a4143f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_UMC_MOTOR_STATUS">
              <baseType>
                <enum>
                  <values>
                    <value name="FirmwareUpdate" value="0" />
                    <value name="Init" value="1" />
                    <value name="MotorIdent" value="2" />
                    <value name="ReadyToSwitchON" value="3" />
                    <value name="SwitchedON" value="4" />
                    <value name="OperationEnabled" value="5" />
                    <value name="Warning" value="6" />
                    <value name="Trouble" value="7" />
                    <value name="Fault" value="8" />
                    <value name="TroubleQSP" value="9" />
                    <value name="SafeTorqueOff" value="10" />
                    <value name="SystemFail" value="11" />
                    <value name="MAX_E_UMC_MOTOR_STATUS" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>92f20bd3-90b2-4209-a659-7ad490feab1d</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_UMC">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_UMC_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_UMC_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_UMC_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_UMC_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <derived name="T_Ctrl_SIf_UMC_Out" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="MAX_E_ALM_UMC" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Ilk">
                    <type>
                      <derived name="T_Ctrl_SIf_UMC_Ilk" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">interlock of output/movements</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>33525c32-04ac-4344-9209-308827820ce8</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_UMC_Cfg">
              <baseType>
                <struct>
                  <variable name="MotorType">
                    <type>
                      <derived name="E_CFG_UMC" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Motor Type</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinLC11">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [RPM] L0011 Setting of the Lenze motor. This value is 100% of the output control setting.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinLC11_100">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Value that is equal to 100% of LC11</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinMaxSpeed">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Maximum allowed speed in [%] of LC11</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>f8552fca-b1a4-492e-8c49-2fced970e6ef</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_UMC_Cur">
              <baseType>
                <struct>
                  <variable name="eDirection">
                    <type>
                      <derived name="E_TURN_DIRECTION" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual Turning Direction</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinSpeedOuput">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual speed as output 16384 = 100% of L-C11 (1500RPM)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinSpeed_rpm">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual speed as output in [rpm]</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinSpeedLimit">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Motor Limit as Output value</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinMotorResetCnt">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Motor reset retries</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9bbe3747-9471-4932-b534-489f84dd505c</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_UMC_Ilk">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>1af82183-9d16-47aa-8cf3-8126c880ad15</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_UMC_In">
              <baseType>
                <struct>
                  <variable name="uinStatus">
                    <type>
                      <derived name="Base_PLC.T_Ctrl_IoUint" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Status Word of Lenze</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intMotorActualSpeed">
                    <type>
                      <derived name="Base_PLC.T_Ctrl_IoInt" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Motor actual speed</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinMotorSetSpeed">
                    <type>
                      <derived name="Base_PLC.T_Ctrl_IoUint" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Motor actual speed setpoint </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bol400V_Ok">
                    <type>
                      <derived name="Base_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Motor 400V available information</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>b0db4743-48ef-4a32-af02-0493db66d305</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_UMC_Out">
              <baseType>
                <struct>
                  <variable name="uinControl">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoUint" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Control word for Lenze FU</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinSpeedSetpoint">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoUint" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Speed Setpoint; 16384 (214) ≡ 100% (bez. auf L-C11)</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>000c99f6-65d6-40ac-a59c-acdb9a383c92</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_UMC_Par">
              <baseType>
                <struct>
                  <variable name="eRotationDirection">
                    <type>
                      <derived name="E_TURN_DIRECTION" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Rotation direction E_CFG_UMC</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiStartupOnTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] time to initialize and reset the errors on the motor</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiMotorOnTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] time the motor has time to go from OFF to ON</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinSpeed_rpm">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [rpm] Speed control selection</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSimMotorOnTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] time to wait until the motor reaches the set speed.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiMoveStartLatency">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Delay until the drive startsup</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiMoveStopLatency">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Delay until the drive stops </xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinMotorResetCnt">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Motor reset retries</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinMotorResetPulseTime_ms">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Motor Reset Pulse Time		</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>b9ba4ec3-2cb8-45c2-aa71-d1ebd44a47e5</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_UMC_Lenze_Control">
              <baseType>
                <struct>
                  <variable name="SwitchOn">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="DisableVoltage">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="SetQuickStop">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="EnableOperation">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="ModeSpecific_1">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="ModeSpecific_2">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="ModeSpecific_3">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="ResetFault">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="SetHalt">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="Reserved_1">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="Reserved_2">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="SetDCBreak">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="JogSpeed1">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="JogSpeed2">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="SetFail">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="SetSpeedCcw">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ca3c0471-19a9-4721-9e57-fa8225b8f4b0</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_UMC_Lenze_Status">
              <baseType>
                <struct>
                  <variable name="FreeStatusBit0">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="PowerDisabled_IMP">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="ImaxActive">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="SpeedSetReached">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="SpeedActEqualSet">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="NActualCompare">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="ActSpeedIsZero">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="ControllerInhibit">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="Status_1">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="Status_2">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="Status_3">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="Status_4">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="Warning">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="Trouble">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="SpeedCcw">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                  <variable name="DriveReady">
                    <type>
                      <derived name="BIT" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>fe3152c0-67c8-4b35-b794-fa19019db014</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_VLV">
              <baseType>
                <enum>
                  <values>
                    <value name="SensorOpenAlwaysOn" value="1" />
                    <value name="SensorCloseNotReached" value="2" />
                    <value name="SensorCloseAlwaysOn" value="3" />
                    <value name="SensorOpenNotReached" value="4" />
                    <value name="InterlockOpen" value="5" />
                    <value name="InterlockClose" value="6" />
                    <value name="MAX_E_ALM" />
                  </values>
                  <baseType>
                    <UINT />
                  </baseType>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="qualified_only" Value="" />
                  </Attributes>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>f2556bf9-99c8-45d7-b1bc-32e66fc35080</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_Typ_VLV">
              <baseType>
                <enum>
                  <values>
                    <value name="Valve2_Sensor2" value="0" />
                    <value name="Valve2_SensorOpened" />
                    <value name="Valve2_SensorClosed" />
                    <value name="Valve2_Sensor0" />
                    <value name="Valve1_Sensor2" />
                    <value name="Valve1_SensorOpened" />
                    <value name="Valve1_SensorClosed" />
                    <value name="Valve1_Sensor0" />
                    <value name="Max_E_Typ_VLV" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
                  <EnumValueDocumentation>
                    <EnumValue>
                      <Name>Valve2_Sensor2</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">bistabile and two feedback sensors</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Valve2_SensorOpened</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">bistabile and open feedback sensor	</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Valve2_SensorClosed</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">bistabile and close feedback sensor</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Valve2_Sensor0</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">bistabile and no feedback sensors</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Valve1_Sensor2</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">monostabile and 2 feedback sensors	</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Valve1_SensorOpened</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">monostabile and open feedback sensor	</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Valve1_SensorClosed</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">monostabile and close feedback sensor</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Valve1_Sensor0</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">monostabile and no feedback sensors</xhtml>
                      </Documentation>
                    </EnumValue>
                  </EnumValueDocumentation>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>09bff28b-050d-4cdd-84b9-9dd0b54825fc</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_VLV">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_VLV_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_VLV_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_VLV_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_VLV_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <derived name="T_Ctrl_SIf_VLV_Out" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="(E_ALM_VLV.MAX_E_ALM - 1)" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Ilk">
                    <type>
                      <derived name="T_Ctrl_SIf_VLV_Ilk" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">interlock of output/movements</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>a4d20334-f21a-406d-be9c-f9d52e65c3c9</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_VLV_Cfg">
              <baseType>
                <struct>
                  <variable name="eTyp">
                    <type>
                      <derived name="E_Typ_VLV" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9fae5b7b-ef7a-4045-96df-fb9d599d8c18</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_VLV_Cur">
              <baseType>
                <struct>
                  <variable name="udiMoveTimeOpen">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] time last movement to open	</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiMoveTimeClose">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] time last movement to close</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>a5e2401f-5031-45c2-85c8-1927a4425540</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_VLV_Ilk">
              <baseType>
                <struct>
                  <variable name="bolOpen">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">interlock open valve</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolClose">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">interlock close valve</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ca04c944-bceb-4a8f-a239-f2adcca0c7f0</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_VLV_In">
              <baseType>
                <struct>
                  <variable name="bolOpen">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">sensor feedback position open reached</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolClose">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">sensor feedback position close reached</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>af0fdb37-d482-41bf-84e9-cd382802b727</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_VLV_Out">
              <baseType>
                <struct>
                  <variable name="bolOpen">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">switch valve open</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolClose">
                    <type>
                      <derived name="T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">switch valve close</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>bafe0db6-049e-4651-861f-e6144a75ffec</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_VLV_Par">
              <baseType>
                <struct>
                  <variable name="udiOpenTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] until failure to long time for open	</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiCloseTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] until failure to long time for close	</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSimOpenTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] simulation time for open or /2 of timeout time?</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSimCloseTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">[ms] simulation time for close or /2 of timeout time?</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>12650060-3baa-459e-9db6-72472008acfb</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_VPC">
              <baseType>
                <enum>
                  <values>
                    <value name="VacuumPumpOnTimeout" value="1" />
                    <value name="VacuumPumpOffTimeout" value="2" />
                    <value name="VacuumFailure" value="3" />
                    <value name="MAX_E_ALM_VPC" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>43ee1ae9-8ecb-4504-96d3-64d299d2135d</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_CFG_VPC">
              <baseType>
                <enum>
                  <values>
                    <value name="Standard" value="0" />
                    <value name="VaccumSensor" value="1" />
                    <value name="MotorFeedback" value="2" />
                    <value name="MAY_E_CFG_CYL" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
                  <EnumValueDocumentation>
                    <EnumValue>
                      <Name>Standard</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> Only Vacuum Motor with no feedback</xhtml>
                      </Documentation>
                    </EnumValue>
                  </EnumValueDocumentation>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5608cec9-c1c7-4f6f-980c-656a02cd221c</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_VPC">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <derived name="T_Ctrl_SIf_VPC_Cfg" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <derived name="T_Ctrl_SIf_VPC_Par" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <derived name="T_Ctrl_SIf_VPC_Cur" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <derived name="T_Ctrl_SIf_VPC_In" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <derived name="T_Ctrl_SIf_VPC_Out" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="E_ALM_VPC.MAX_E_ALM_VPC" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Ilk">
                    <type>
                      <derived name="T_Ctrl_SIf_VPC_Ilk" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">interlock of output/movements</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>a6b281d7-742d-4faf-bfb4-49a6e5ac6322</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_VPC_Cfg">
              <baseType>
                <struct>
                  <variable name="VacuumPumpFeedback">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> VacuumPump has a feedback</xhtml>
                    </documentation>
                  </variable>
                  <variable name="VacuumSensorAvailable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Vacuum Sensor available</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>1dee7cde-c5ef-47a6-bc46-81e0cd8ddff8</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_VPC_Cur">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>1cdc868b-0a1c-449d-acfa-52b69b7f5599</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_VPC_Ilk">
              <baseType>
                <struct />
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>6c772d6d-1891-4e4d-ae3b-c60994dc1743</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_VPC_In">
              <baseType>
                <struct>
                  <variable name="bolVacuumOk">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 0 = Vacuum is NOK; 1 = Vacuum is Ok --&gt; Vacuum Pump is probably running</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolPumpOn">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pump has a feedback</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>795b3629-5b6f-4e97-ae8f-a8fc1eb2d28f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_VPC_Out">
              <baseType>
                <struct>
                  <variable name="bolVacuumPumpOn">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> 0 = Vacuum Pump Off; 1 = Vacuum Pump On</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>bf7b5b2f-52fe-4cb0-96db-3a6b86cdba2d</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_VPC_Par">
              <baseType>
                <struct>
                  <variable name="udiVacuumPumpTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] time the pump has time to go from OFF to ON</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiVacuumStabilizationTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] vacuum stabilization time if no vacuum sensor is available</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiVacuumSensorDebounceTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] time to wait until the vacuum sensor off is acknowledged as off.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSimVacuumPumpOnTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] simulation time for Vacuum Pump ON</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>52622a75-45f7-47dc-bd6c-9f66efa9aa4f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ALM_MOD">
              <baseType>
                <enum>
                  <values>
                    <value name="InvalidPointer" value="1" />
                    <value name="CommunicationError" value="2" />
                    <value name="EmergencyOff" value="3" />
                    <value name="TimeoutStartGroup" value="4" />
                    <value name="TimeoutStopGroup" value="5" />
                    <value name="NextModuleNotReadyWarning" value="6" />
                    <value name="NextModuleNotReadyStop" value="7" />
                    <value name="MAX_E_ALM_MOD" />
                  </values>
                  <baseType>
                    <UDINT />
                  </baseType>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>c067e919-ea45-40f1-8d34-d07e98384c3e</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_MOD_STARTUP">
              <baseType>
                <enum>
                  <values>
                    <value name="NONE" value="0" />
                    <value name="Start" />
                    <value name="ReadCsvFile" />
                    <value name="HostInit" />
                    <value name="ParameterSync" />
                    <value name="Ready" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>86ed49cc-103f-41b2-965a-eae686b88710</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_MOD">
              <baseType>
                <struct>
                  <variable name="Cfg">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_SIf_MOD_Cfg" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> configuration</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Par">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_SIf_MOD_Par" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> parameter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Cur">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_SIf_MOD_Cur" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> current values</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_SIf_MOD_In" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> io input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_SIf_MOD_Out" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> io output</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Alm">
                    <type>
                      <array>
                        <dimension lower="1" upper="MAX_E_ALM_MOD" />
                        <baseType>
                          <derived name="T_Ctrl_Alm" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> alarm number used in this controller</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5f13d4a1-2520-48bb-ad85-26e06ea52c4f</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_MOD_Cfg">
              <baseType>
                <struct>
                  <variable name="bolComToLineControlEnabled">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Enable communication to line control</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolIgnoreReadyInput">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Ignore Ready Input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolStackLightHornEnable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> True = Enable the Stacklight Horn</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>0a6ad749-9fa3-41c0-ba6b-a045ebbc52d5</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_MOD_Cur">
              <baseType>
                <struct>
                  <variable name="dinMaxCapacity">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Max module capacity calculated from all childs which implement interface IBuffer</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinNumOfItems">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual number of items calculated from all childs which implement interface IBuffer</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolKeepAliveHost">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">  Togglebit set by LineControl to indicate it's still alive. If not, the PLC should stop immediately and wait for LineControl.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolKeepAlivePlc">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Togglebit set by PLC to indicate it's still alive. If not, LineControl should stop immediately and try to recover.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="a_bBufferIsFull">
                    <type>
                      <array>
                        <dimension lower="0" upper="10" />
                        <baseType>
                          <BOOL />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Interface data to LineControl: Indicates that an input port is full. LineControl should not route any more items to this port.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolStopReleaseItems">
                    <type>
                      <array>
                        <dimension lower="0" upper="10" />
                        <baseType>
                          <BOOL />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Interface data from LineControl: Request to stop releasing any item to an output port. The module can still be in RUN state but must not release items to the next module. </xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>30796f16-fa3d-47dc-b224-e58799f07d37</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_MOD_In">
              <baseType>
                <struct>
                  <variable name="bolReady">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Ready Signal</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolEmoOk">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Emo Ok</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>310febbc-0c4d-4259-8c32-cba0e4a2b496</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_MOD_Out">
              <baseType>
                <struct>
                  <variable name="bolReady">
                    <type>
                      <derived name="BASE_PLC.T_Ctrl_IoBool" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Ready Signal</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>08e402dd-7973-47f5-b63b-307e53430d30</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Ctrl_SIf_MOD_Par">
              <baseType>
                <struct>
                  <variable name="udiComTimeOutLineCtrl_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Communication timeout to line control</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aListOfRunGrpWaitTime_ms">
                    <type>
                      <array>
                        <dimension lower="0" upper="Base_Const.cMaxNrOfChilds" />
                        <baseType>
                          <UDINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Array with wait time for run groups</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aListOfStopGrpWaitTime_ms">
                    <type>
                      <array>
                        <dimension lower="0" upper="Base_Const.cMaxNrOfChilds" />
                        <baseType>
                          <UDINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Array with wait time for stop groups</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTimeoutStopping_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] timeout for stopping (0= disable timeout monitoring)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTimeoutStarting_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] timeout for starting (0= disable timeout monitoring)</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>af6c9077-6cc4-4b17-8c1d-7a4257341a94</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_Sequence">
              <baseType>
                <struct>
                  <variable name="pChild">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="fb_CtrlBase" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="pCIF">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_CIf" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Access to CIF of child</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinGroupRun">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Associated run sequence group</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinGroupStop">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Associated stop sequence group</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intCmdSeqRun">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Command to be executed for run sequence</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStatusSeqRun">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Expected status for run sequence</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStatusSeqRun2">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alternative status for run sequence</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intCmdSeqStop">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Command to be executed for run sequence</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStatusSeqStop">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Expected status for stop sequence</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStatusSeqStop2">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alternative status for stop sequence</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intCmdSeqStandby">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Command to be executed for standby sequence</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStatusSeqStandby">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Expected status for standby sequence</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStatusSeqStandby2">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Alternative status for standby sequence</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolChecked">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Used internal for run and stop sequence to detect if the sequence has been processed</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>b2c675fc-2993-46a0-911f-c35f3b7aa58e</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_Destination">
              <baseType>
                <enum>
                  <values>
                    <value name="StackerA" />
                    <value name="StackerB" />
                    <value name="StackerC" />
                    <value name="Garbage" />
                    <value name="MAX_E_Destination" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>0fa17c3c-ac93-48ea-b032-1eeb8d491a20</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_ItemHealth">
              <baseType>
                <enum>
                  <values>
                    <value name="Healthy" />
                    <value name="Ovn_Temperature" />
                    <value name="Ovn_Time" />
                    <value name="Ovn_Lost" />
                    <value name="Hpm_Time" />
                    <value name="Hpm_Pressure" />
                    <value name="Hpm_Temperature" />
                    <value name="Hpm_Lost" />
                    <value name="Hpm_Unknown" />
                    <value name="Failed" />
                    <value name="Lost" />
                    <value name="MAX_E_ItemHealth" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
                  <EnumValueDocumentation>
                    <EnumValue>
                      <Name>Healthy</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> 0</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Ovn_Temperature</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> 1</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Ovn_Time</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> 2</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Ovn_Lost</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> 3</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Hpm_Time</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> 4</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Hpm_Pressure</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> 5</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Hpm_Temperature</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> 6</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Hpm_Lost</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> 7</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Hpm_Unknown</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> 8</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Failed</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> 9</xhtml>
                      </Documentation>
                    </EnumValue>
                    <EnumValue>
                      <Name>Lost</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> 10	- Item is lost somewhere	</xhtml>
                      </Documentation>
                    </EnumValue>
                  </EnumValueDocumentation>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>94876fa6-5767-4659-be05-59148d5a7d46</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="E_PrintSelection">
              <baseType>
                <enum>
                  <values>
                    <value name="None" value="16#0" />
                    <value name="PrintHeadA" value="16#1" />
                    <value name="PrintHeadB" value="16#2" />
                    <value name="MAX_E_PrintSelection" />
                  </values>
                </enum>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/enumvaluedocumentation" handleUnknown="implementation">
                  <EnumValueDocumentation>
                    <EnumValue>
                      <Name>None</Name>
                      <Documentation>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml"> Binary Enum. Print A&amp;B = PrintHeadA | PrintHeadB = 0x03</xhtml>
                      </Documentation>
                    </EnumValue>
                  </EnumValueDocumentation>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>1d82097f-f709-40cb-8960-3cb84a3ccf35</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_IdBase_DCH">
              <baseType>
                <struct>
                  <variable name="rBaseInfo">
                    <type>
                      <derived name="T_ItemBase" />
                    </type>
                  </variable>
                  <variable name="udiIdentification">
                    <type>
                      <ULINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Real read process ID values</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="enable_dynamic_creation" Value="" />
                  </Attributes>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>dc4cc25f-5ff4-4b8a-be0b-5c40224b1b92</ObjectId>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'pack_mode' := '1'}</xhtml>
              </documentation>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_ItemBase">
              <baseType>
                <struct>
                  <variable name="bolItemAvailable">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Item Empty</xhtml>
                    </documentation>
                  </variable>
                  <variable name="eHealth">
                    <type>
                      <derived name="E_ItemHealth" />
                    </type>
                    <initialValue>
                      <simpleValue value="E_ItemHealth.Healthy" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual Status of the item.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinModuleId">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual Position</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinActualPosition">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="dtStartTimeStamp">
                    <type>
                      <derived name="TC2_UTILITIES.TIMESTRUCT" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="enable_dynamic_creation" Value="" />
                  </Attributes>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5bdc6427-5e8b-4d7d-924f-75cc9aba7d63</ObjectId>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'pack_mode' := '1'}</xhtml>
              </documentation>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_ItemPaperBase">
              <baseType>
                <struct>
                  <variable name="udiPaperIdProcess">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Paper ID</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiPaperIdSet">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Paper ID</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolLastPaperOfStackBatch">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> true if this is the paper is the last of a stack. After this paper is placed the stack is ejected.</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiDifferenceToPrevious_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Time difference to the previous Paper</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiDifferenceToNext_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] Time difference to the next paper</xhtml>
                    </documentation>
                  </variable>
                  <variable name="eDestination">
                    <type>
                      <derived name="E_Destination" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Paper Stream Destination</xhtml>
                    </documentation>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/datatypeinheritance" handleUnknown="implementation">
                  <Inheritance>
                    <Extends>T_ItemBase</Extends>
                  </Inheritance>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                  <Attributes>
                    <Attribute Name="enable_dynamic_creation" Value="" />
                  </Attributes>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>8b8348d3-cbde-4e04-a040-8f303f755d13</ObjectId>
                </data>
              </addData>
              <documentation>
                <xhtml xmlns="http://www.w3.org/1999/xhtml">{attribute 'pack_mode' := '1'}</xhtml>
              </documentation>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_GHTHashTableBuffer">
              <baseType>
                <struct>
                  <variable name="aBuffer">
                    <type>
                      <array>
                        <dimension lower="0" upper="(50 - 1)" />
                        <baseType>
                          <pointer>
                            <baseType>
                              <derived name="T_HashTableEntry" />
                            </baseType>
                          </pointer>
                        </baseType>
                      </array>
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9a3a7aba-2db4-4014-8751-5e7f48f9bff1</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_IdBaseRecvData">
              <baseType>
                <struct>
                  <variable name="fbDataChannel">
                    <type>
                      <derived name="FB_IdBaseRecvDch" />
                    </type>
                  </variable>
                  <variable name="rDataChannelItem">
                    <type>
                      <derived name="T_IdBase_DCH" />
                    </type>
                  </variable>
                  <variable name="fbFifo">
                    <type>
                      <derived name="FB_DataChannelRecvFifo" />
                    </type>
                  </variable>
                  <variable name="rFifoItem">
                    <type>
                      <derived name="T_IdBase_DCH" />
                    </type>
                  </variable>
                  <variable name="aFifoBuffer">
                    <type>
                      <array>
                        <dimension lower="0" upper="(cRECVDATACHANNELBUFFER - 1)" />
                        <baseType>
                          <derived name="T_IdBase_DCH" />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>ddffdfa7-5299-4644-ab62-0ed48bc9c539</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/datatype" handleUnknown="implementation">
            <dataType name="T_IdBaseSendData">
              <baseType>
                <struct>
                  <variable name="fbDataChannel">
                    <type>
                      <derived name="FB_IdBaseSendDch" />
                    </type>
                  </variable>
                  <variable name="rDataChannelItem">
                    <type>
                      <derived name="T_IdBase_DCH" />
                    </type>
                  </variable>
                  <variable name="fbFifo">
                    <type>
                      <derived name="FB_DataChannelSenderFifo" />
                    </type>
                  </variable>
                </struct>
              </baseType>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>0451610a-dd37-4a2d-b093-9eed77a1d992</ObjectId>
                </data>
              </addData>
            </dataType>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/interface" handleUnknown="implementation">
            <Interface name="IBuffer" ObjectId="6ca8dc5e-3ccb-42a7-b725-bd82639cabe8">
              <Properties>
                <Property name="NumOfItems" ObjectId="20de0e0f-413e-48f7-9eb2-454894ca89b9">
                  <interface>
                    <returnType>
                      <DINT />
                    </returnType>
                  </interface>
                  <GetAccessor />
                  <addData />
                </Property>
                <Property name="BufferFull" ObjectId="2de9695e-388c-467a-9d08-172885753681">
                  <interface>
                    <returnType>
                      <BOOL />
                    </returnType>
                  </interface>
                  <GetAccessor />
                  <addData />
                </Property>
                <Property name="MaxCapacity" ObjectId="3a32b318-0096-428a-9049-f4cfb01a1120">
                  <interface>
                    <returnType>
                      <DINT />
                    </returnType>
                  </interface>
                  <GetAccessor />
                  <addData />
                </Property>
              </Properties>
              <addData />
            </Interface>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/interface" handleUnknown="implementation">
            <Interface name="IGHT" ObjectId="1369cddd-21ca-4288-aafc-6b12aed90293">
              <Methods>
                <Method name="AddItem" ObjectId="9fe970a3-1a2e-4d3f-b649-fa00d84995e2">
                  <interface>
                    <returnType>
                      <BOOL />
                    </returnType>
                    <inputVars>
                      <variable name="uliKey">
                        <type>
                          <ULINT />
                        </type>
                      </variable>
                      <variable name="pData">
                        <type>
                          <pointer>
                            <baseType>
                              <BYTE />
                            </baseType>
                          </pointer>
                        </type>
                      </variable>
                    </inputVars>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                        <Attributes>
                          <Attribute Name="object_name" Value="AddItem" />
                        </Attributes>
                      </data>
                    </addData>
                  </interface>
                  <addData />
                </Method>
                <Method name="Lookup" ObjectId="8fb41088-b237-4034-bdc0-99530f1c464b">
                  <interface>
                    <returnType>
                      <pointer>
                        <baseType>
                          <BYTE />
                        </baseType>
                      </pointer>
                    </returnType>
                    <inputVars>
                      <variable name="uliKey">
                        <type>
                          <ULINT />
                        </type>
                      </variable>
                      <variable name="bolRemove">
                        <type>
                          <BOOL />
                        </type>
                      </variable>
                    </inputVars>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                        <Attributes>
                          <Attribute Name="object_name" Value="Lookup" />
                        </Attributes>
                      </data>
                    </addData>
                  </interface>
                  <addData />
                </Method>
                <Method name="Clear" ObjectId="2b5f83c9-7e25-4125-ad11-d67fee5836df">
                  <interface>
                    <returnType>
                      <BOOL />
                    </returnType>
                    <inputVars>
                      <variable name="bolFreePointer">
                        <type>
                          <BOOL />
                        </type>
                      </variable>
                    </inputVars>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                        <Attributes>
                          <Attribute Name="object_name" Value="Clear" />
                        </Attributes>
                      </data>
                    </addData>
                  </interface>
                  <addData />
                </Method>
                <Method name="Initialize" ObjectId="43adaa89-a44f-4bbe-9e5c-4fae0639e37e">
                  <interface>
                    <returnType>
                      <BOOL />
                    </returnType>
                    <addData>
                      <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                        <Attributes>
                          <Attribute Name="object_name" Value="Initialize" />
                        </Attributes>
                      </data>
                    </addData>
                  </interface>
                  <addData />
                </Method>
              </Methods>
              <Properties>
                <Property name="Count" ObjectId="5bac76e5-ef0e-4aee-b32a-c5fdd14d0d2c">
                  <interface>
                    <returnType>
                      <UINT />
                    </returnType>
                  </interface>
                  <GetAccessor />
                  <addData />
                </Property>
              </Properties>
              <addData />
            </Interface>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_ACL" pouType="functionBlock">
              <interface>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_ACL" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbAddRoute">
                    <type>
                      <derived name="FB_AddRouteEntry" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Used blocks from lib. "utilities" for AMS route handling</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbWrite">
                    <type>
                      <derived name="ADSWRITE" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Used ADS blocks for communication</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbRead">
                    <type>
                      <derived name="ADSREAD" />
                    </type>
                  </variable>
                  <variable name="fbReadWrite">
                    <type>
                      <derived name="ADSRDWRT" />
                    </type>
                  </variable>
                  <variable name="aListOfConnections">
                    <type>
                      <array>
                        <dimension lower="0" upper="cuinMaxConnections" />
                        <baseType>
                          <derived name="T_ADS_ConnectionData" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> List of all ADS connections handled by this block</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinNumOfAdsConnections">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Number of ADS (server) connections</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinLoopReqHandle">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Loop variable for request of the handle ID</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinConIndex">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Connection index</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinRouteID">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Used for generate unique AMS route names</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <localVars constant="true">
                  <variable name="cSTA_SUB_INITIALIZE">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="500" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sub states</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cSTA_SUB_READ">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="501" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_READBusy">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="502" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_WRITE">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="503" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_WRITEBusy">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="504" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_RW">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="505" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_RWBusy">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="506" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_ADD_ROUTE">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="507" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_ADD_ROUTEBusy">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="508" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_ERROR">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="509" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_DONE">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="510" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_WAIT_NEXT_POLL">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="511" />
                    </initialValue>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
ADS client for data exchange.
Controls the data exchange between various ADS devices. Devices can be added as server connections to that FUB. 

History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		05.02.2014		AVME/DSC	Start history
0.00.2		17.02.2014		AVME/DSC	BugZilla 140 - Enter ADS route string automatically during state PONBusy

___________________________________________________________________________________________________*)

IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	
	END_IF
END_IF;
</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="GetNextAccessType" ObjectId="096217a9-b3f5-4913-8799-35029a3ae704">
                    <interface>
                      <returnType>
                        <INT />
                      </returnType>
                      <inputVars>
                        <variable name="uinNextConnection">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="GetNextAccessType" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE aListOfConnections[uinNextConnection].eAccessType OF	
	E_ADS_AccessType.READ:
		GetNextAccessType:= cSTA_SUB_READ;	
	E_ADS_AccessType.WRITE:
		GetNextAccessType:= cSTA_SUB_WRITE;	
END_CASE</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PONBusy" ObjectId="10205a02-c205-4a68-aa3f-517c69831d55">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="stRoute">
                          <type>
                            <derived name="ST_AmsRouteEntry" />
                          </type>
                        </variable>
                        <variable name="strRouteName">
                          <type>
                            <string />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PONBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		uinRouteID:= 0;
		uinConIndex:=0;
		// Initialize sub state machine
		me.SubStateMachine.intState:= cSTA_SUB_ADD_ROUTE; 
		me.SubStateMachine.intStateNext := cSTA_SUB_ADD_ROUTE;
		
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
			// Sub statemachine to set necessary AMS routes and determine the handle ID of all connections in list	
			CASE me.SubStateMachine.intState OF	
			
				// **************************************************************************
				// Call fbAddRoute to add AMS route. Block automatically check if NetID or Name already exist.
				// Double entries not possible!
				// **************************************************************************
				cSTA_SUB_ADD_ROUTE:
				
					// Prepare unique AMS route name: Controller Name: + ID
					uinRouteID:= uinRouteID + 1;
					strRouteName := CONCAT(CIf.Info.strName, ': ID');
					strRouteName := CONCAT(strRouteName, UINT_TO_STRING(uinRouteID));
							
					// Prepare route data
					stRoute.sName:= strRouteName;
					stRoute.sNetID:= aListOfConnections[uinConIndex].strNetID;
					stRoute.sAddress:= THIS^.NetIDtoAddress(aListOfConnections[uinConIndex].strNetID);
					stRoute.eTransport:= eRouteTransport_TCP_IP;
				
					// Add route
					fbAddRoute(bExecute	:= FALSE);
					fbAddRoute( sNetID 	:= '',
								stRoute	:= stRoute,
								bExecute:= TRUE,
								tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOAddRoute_ms),
								bBusy	=&gt;,
								bError	=&gt;,
								nErrID	=&gt;);
				
					me.SubStateMachine.intStateNext := cSTA_SUB_ADD_ROUTEBusy;		
							
				// **************************************************************************
				// Add route busy
				// **************************************************************************
				cSTA_SUB_ADD_ROUTEBusy:
				
					fbAddRoute(bExecute:= FALSE);
					// Add route done
					IF NOT (fbAddRoute.bBusy) THEN
						IF NOT (fbAddRoute.bError) THEN
							// More connections?
							IF (uinConIndex &lt; (uinNumOfAdsConnections-1)) THEN
								uinConIndex:= uinConIndex+1;
								me.SubStateMachine.intStateNext := cSTA_SUB_ADD_ROUTE;
							// All routes added - go on with determine the handle ID 
							ELSE
								uinConIndex:=0;
								me.SubStateMachine.intStateNext := cSTA_SUB_RW;	
							END_IF
						// Error
						ELSE
							// SIf.Alm[7].strText :=  'Adding AMS route failed. Note add. info for affected connection ID';
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,7,UDINT_TO_DINT(aListOfConnections[uinConIndex].udiConID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
							me.SubStateMachine.intStateNext := cSTA_SUB_ERROR;		
						END_IF
					END_IF
			
				// **************************************************************************
				// Call fbReadWrite to determine the handle ID
				// **************************************************************************
				cSTA_SUB_RW:
			
					fbReadWrite(WRTRD:= FALSE);
    				fbReadWrite(NETID		:= aListOfConnections[uinConIndex].strNetID,
                				PORT		:= aListOfConnections[uinConIndex].uinTargetPort,
                   				IDXGRP		:= cGET_SYMHANDLE_BYNAME,  
                   				IDXOFFS     := 16#0000,
                   				WRITELEN    := INT_TO_UDINT(LEN(aListOfConnections[uinConIndex].strRoute)+1),
								READLEN     := SIZEOF(aListOfConnections[uinConIndex].udiHandle),
								SRCADDR     := ADR(aListOfConnections[uinConIndex].strRoute),
								DESTADDR    := ADR(aListOfConnections[uinConIndex].udiHandle),
								WRTRD       := TRUE,
								TMOUT       := UDINT_TO_TIME(SIf.Par.udiTORWData_ms),
								BUSY        =&gt; ,
								ERR         =&gt; ,
								ERRID       =&gt; );
								
					me.SubStateMachine.intStateNext := cSTA_SUB_RWBusy;		
				
				// **************************************************************************
				// Read/Write busy
				// **************************************************************************
				cSTA_SUB_RWBusy:
					fbReadWrite(WRTRD:= FALSE);
					// Read/Write done
					IF NOT (fbReadWrite.BUSY) THEN
						IF NOT (fbReadWrite.ERR) THEN
							// More connections?
							IF (uinConIndex &lt; (uinNumOfAdsConnections-1)) THEN
								uinConIndex:= uinConIndex+1;
								me.SubStateMachine.intStateNext := cSTA_SUB_RW;
							// Done - all connection handles are determined 
							ELSE
								me.SubStateMachine.intStateNext := cSTA_SUB_DONE;	
							END_IF
						// Error
						ELSE
							// SIf.Alm[3].strText := 'Init of ADS connection failed. Check add. info for affected connection ID';
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,3,UDINT_TO_DINT(aListOfConnections[uinConIndex].udiConID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
							me.SubStateMachine.intStateNext := cSTA_SUB_ERROR;		
						END_IF
					END_IF
				
				// **************************************************************************
				// All necessary AMS routes set and connection handles are determined 
				// **************************************************************************
				cSTA_SUB_DONE:
				
				// **************************************************************************
				// Error
				// **************************************************************************
				cSTA_SUB_ERROR:
				
			END_CASE	
			
		
		// State Change Condition
		IF ((me.SubStateMachine.intState=cSTA_SUB_ERROR) OR (me.StateMachine.udiTimeInState_ms &gt;= SIf.Par.udiTOPowerOn_ms)) THEN
			// In case if TO
			IF (me.StateMachine.udiTimeInState_ms &gt;= SIf.Par.udiTOPowerOn_ms) THEN
				// SIf.Alm[2].strText := 'Timeout initialize ADS connection(s)';
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,2,UDINT_TO_DINT(me.StateMachine.udiTimeInState_ms),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF
			me.StateMachine.intStateNext := cSTA_ERROR;				
		ELSIF (me.SubStateMachine.intState=cSTA_SUB_DONE) THEN
			me.StateMachine.intStateNext := cSTA_PON;
		END_IF
			
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNBusy" ObjectId="17796103-9d26-4e6c-8d4b-5a11d68fbae7">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		;
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (TRUE) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUN;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="1eadda75-9ac1-47cb-b64c-ca5613f16207">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
					
		uinConIndex:=0;
		// Initialize sub state machine
		me.SubStateMachine.intState:= cSTA_SUB_INITIALIZE; 
		me.SubStateMachine.intStateNext := cSTA_SUB_INITIALIZE;
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Sub statemachine to handle all connections in list dependent access type (read, write, rw)
		CASE me.SubStateMachine.intState OF	
	
			//************************************************************************
			// Initialize
			//************************************************************************
			cSTA_SUB_INITIALIZE:
				// Get access type
				me.SubStateMachine.intStateNext:= THIS^.GetNextAccessType(uinConIndex);
							
			//************************************************************************					
			// Call fbRead
			//************************************************************************
			cSTA_SUB_READ:
		
				fbRead(READ:= FALSE);
				fbRead(NETID       := aListOfConnections[uinConIndex].strNetID,
						PORT       := aListOfConnections[uinConIndex].uinTargetPort,
						IDXGRP     := cREAD_WRITE_SYMVAL_BYHANDLE,
						IDXOFFS    := aListOfConnections[uinConIndex].udiHandle,
						LEN        := aListOfConnections[uinConIndex].udiDataLen,
						DESTADDR   := aListOfConnections[uinConIndex].pData,
						READ       := TRUE,
						TMOUT      := UDINT_TO_TIME(SIf.Par.udiTOReadData_ms),
						BUSY       =&gt; ,
						ERR        =&gt; ,
						ERRID      =&gt; );
														
				me.SubStateMachine.intStateNext := cSTA_SUB_READBusy;			
							
			//************************************************************************
			// Read busy
			//************************************************************************
			cSTA_SUB_READBusy:
				fbRead(READ:= FALSE);
				// Read done
				IF NOT (fbRead.BUSY) THEN
					IF NOT (fbRead.ERR) THEN	
						// More connections?
						IF (uinConIndex &lt; (uinNumOfAdsConnections-1)) THEN
							uinConIndex:= uinConIndex+1;
							// Get next access type
							me.SubStateMachine.intStateNext:= THIS^.GetNextAccessType(uinConIndex);
						// Done - all connection handles are determined 
						ELSE
							me.SubStateMachine.intStateNext := cSTA_SUB_WAIT_NEXT_POLL;	
						END_IF						
					// Error
					ELSE
						// SIf.Alm[4].strText := 'ADS read data failed. Note add. info to get ADS error ID';
						pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,4,UDINT_TO_DINT(fbRead.ERRID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
						me.SubStateMachine.intStateNext := cSTA_SUB_ERROR;		
					END_IF
				END_IF	
				
			//************************************************************************					
			// Call fbWrite
			//************************************************************************
			cSTA_SUB_WRITE:
		
				fbWrite(WRITE:= FALSE);
				fbWrite(NETID      := aListOfConnections[uinConIndex].strNetID,
						PORT       := aListOfConnections[uinConIndex].uinTargetPort,
						IDXGRP     := cREAD_WRITE_SYMVAL_BYHANDLE,
						IDXOFFS    := aListOfConnections[uinConIndex].udiHandle,
						LEN        := aListOfConnections[uinConIndex].udiDataLen,
						SRCADDR    := aListOfConnections[uinConIndex].pData,
						WRITE      := TRUE,
						TMOUT      := UDINT_TO_TIME(SIf.Par.udiTOWriteData_ms),
						BUSY       =&gt; ,
						ERR        =&gt; ,
						ERRID      =&gt; );
														
				me.SubStateMachine.intStateNext := cSTA_SUB_WRITEBusy;		
				
			//************************************************************************
			// Write busy
			//************************************************************************
			cSTA_SUB_WRITEBusy:
				fbWrite(WRITE:= FALSE);
				// Write done
				IF NOT (fbWrite.BUSY) THEN
					IF NOT (fbWrite.ERR) THEN
						// More connections?
						IF (uinConIndex &lt; (uinNumOfAdsConnections-1)) THEN
							uinConIndex:= uinConIndex+1;
							// Get next access type
							me.SubStateMachine.intStateNext:= THIS^.GetNextAccessType(uinConIndex);
						// Done - all connection handles are determined 
						ELSE
							me.SubStateMachine.intStateNext := cSTA_SUB_WAIT_NEXT_POLL;	
						END_IF
					// Error
					ELSE
						// SIf.Alm[5].strText := 'ADS write data failed. Note add. info to get ADS error ID';
						pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,5,UDINT_TO_DINT(fbWrite.ERRID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
						me.SubStateMachine.intStateNext := cSTA_SUB_ERROR;		
					END_IF
				END_IF			
		
			//************************************************************************
			// Wait for next polling - Connection list completely processed 
			//************************************************************************	
			cSTA_SUB_WAIT_NEXT_POLL:
			
				// Wait polling time expired 	
				IF (me.SubStateMachine.udiTimeInState_ms &gt;= SIf.Par.udiPollingInterval_ms) THEN				
					//Start again at first connection in list
					uinConIndex:=0;
					me.SubStateMachine.intStateNext := cSTA_SUB_INITIALIZE;
				END_IF
				
			//************************************************************************
			// ERROR			
			//************************************************************************	
			cSTA_SUB_ERROR:
				// SIf.Alm[6].strText := 'ADS connection fault. Note add. info for affected connection ID';
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,6,UDINT_TO_DINT(aListOfConnections[uinConIndex].udiConID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				me.StateMachine.intStateNext := BASE_PLC.cSTA_ERROR;	
			
		END_CASE			
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="AddConnection" ObjectId="2e3aa29c-2c8b-4b4e-b83b-bda7f50bd268">
                    <interface>
                      <inputVars>
                        <variable name="stConnection">
                          <type>
                            <derived name="T_ADS_ConnectionData" />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="AddConnection" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Method adds a connection to the internal list of all ADS connections handled by this block
IF (uinNumOfAdsConnections &lt;= (cuinMaxConnections-1)) THEN
	// Add connection to list
	aListOfConnections[uinNumOfAdsConnections] := stConnection;
	// Assigned connection ID
	aListOfConnections[uinNumOfAdsConnections].udiConID := uinNumOfAdsConnections+1;
	// Inc. number of connections
	uinNumOfAdsConnections:= uinNumOfAdsConnections+1;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="3c973f2a-7cfa-4400-8508-f52d5e67adff">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
    cSTA_RUN: 
        THIS^.sta_RUN();				
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="48c1ab59-ea2d-486d-bdfb-c97920a611f0">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states
IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		(*
		// cmd's
		CASE intCmdState OF
			;
		END_CASE
		*)
	ELSE
		// states
		CASE intCmdState OF
			// SUB States
			cSTA_SUB_INITIALIZE:
				getCmdState := 'cSTA_SUB_INITIALIZE';
			cSTA_SUB_READ:
				getCmdState := 'cSTA_SUB_READ';
			cSTA_SUB_READBusy:
				getCmdState := 'cSTA_SUB_READBusy';
			cSTA_SUB_WRITE:
				getCmdState := 'cSTA_SUB_WRITE';
			cSTA_SUB_WRITEBusy:
				getCmdState := 'cSTA_SUB_WRITEBusy';			
			cSTA_SUB_RW:
				getCmdState := 'cSTA_SUB_RW';
			cSTA_SUB_RWBusy:
				getCmdState := 'cSTA_SUB_RWBusy';	
			cSTA_SUB_ADD_ROUTE:
				getCmdState := 'cSTA_SUB_ADD_ROUTE';	
			cSTA_SUB_ADD_ROUTEBusy:
				getCmdState := 'cSTA_SUB_ADD_ROUTEBusy';			
			cSTA_SUB_ERROR:
				getCmdState := 'cSTA_SUB_ERROR';
			cSTA_SUB_DONE:
				getCmdState := 'cSTA_SUB_DONE';
			cSTA_SUB_WAIT_NEXT_POLL:
				getCmdState := 'cSTA_SUB_WAIT_NEXT_POLL';
		END_CASE
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="5bcded1c-e34b-4dd0-82f9-810996aa589a">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_ACL" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="82e22428-a03a-4e02-9fcd-a314f0399cc9">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		// Initialize sub state machine
		me.SubStateMachine.intState:= cSTA_SUB_INITIALIZE; 
		me.SubStateMachine.intStateNext := cSTA_SUB_INITIALIZE;
	END_IF
	
//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN	
		// State Change Condition
		IF (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.EOFF) AND (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.OFF) THEN	
			IF(me.intCmd=BASE_PLC.cCMD_RUN) THEN
				me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
			END_IF
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="83199abc-a2c6-42b3-97c5-faf95e44d62f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	SIf.Cur.uinNumOfAdsConnections:= uinNumOfAdsConnections;	
END_IF

// If no connection added, set alarm and change to state error
IF (uinNumOfAdsConnections = 0) THEN
	// Set Alarm: SIf.Alm[1].strText := 'Initialization error. Minimum one ADS connection must be configured'; 
	pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,1,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);	
	me.StateMachine.intStateNext := BASE_PLC.cSTA_ERROR;
END_IF

// ----------------------------------------------------------------------------------
// Always change actions in Base Library
// ----------------------------------------------------------------------------------
// overrule error always from base -&gt; no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState=cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="bae7231a-f1c3-4551-a7da-0fd79e4b7301">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;	
		// State Change Condition
		IF (me.intCmd&lt;&gt;cCMD_PON) AND (me.intCmd&lt;&gt;cCMD_DONE) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_OFFBusy;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="NetIDtoAddress" ObjectId="d12b7a94-c50c-4873-88a2-9a106eb6cd59">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="strNetID">
                          <type>
                            <string />
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="intI">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="strCharacter">
                          <type>
                            <string length="1" />
                          </type>
                        </variable>
                        <variable name="uinExitCounter">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="cDot">
                          <type>
                            <USINT />
                          </type>
                          <initialValue>
                            <simpleValue value="16#2E" />
                          </initialValue>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="NetIDtoAddress" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Method convert a ADS NetID to a standard IP Address
// Example: 192.168.70.27.1.1 -&gt; 192.168.70.27
uinExitCounter:=0;
// Get all numbers up to 4 point
FOR intI:=0 TO LEN(strNetID) DO	
	// Get single char
	strCharacter:= Mid(strNetID,1,intI);
	// Incr. exit counter if char = '.'
	IF (F_ToASC(strCharacter) = cDot) THEN
		uinExitCounter:= uinExitCounter +1;
	END_IF
	// As long as 4 point not reached
	IF uinExitCounter &lt; 4 THEN
		NetIDtoAddress:= CONCAT(NetIDtoAddress,strCharacter);	
	ELSE
		EXIT;
	END_IF 
END_FOR




</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="da026435-4584-4f7d-b3e7-ef72bcf894b2">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="udiTaskCnt">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                        <variable name="ii">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR ii:= 0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[ii].intCmd=cCMD_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR
CIf.Job.aCmdList[ii].intCmd := cCMD_RUN;
CIf.Job.aCmdList[ii].strName := 'Run'; 
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;

// set name of class/typ
CIf.Info.strType := 'FB_ACL';
CIf.Info.strFullName := 'ADS Client';

// set alarm class
SIf.Alm[1].eAlmClass := E_AlmClass.OFF;
SIf.Alm[1].strText := 'Initialization error. Minimum one ADS connection must be configured'; 
SIf.Alm[2].eAlmClass := E_AlmClass.OFF;
SIf.Alm[2].strText := 'Timeout initialize ADS connection(s)';
SIf.Alm[3].eAlmClass := E_AlmClass.OFF;
SIf.Alm[3].strText := 'Init of ADS connection failed. Note add. info for affected connection ID';
SIf.Alm[4].eAlmClass := E_AlmClass.OFF;
SIf.Alm[4].strText := 'ADS read data failed. Note add. info to get ADS error ID';
SIf.Alm[5].eAlmClass := E_AlmClass.OFF;
SIf.Alm[5].strText := 'ADS write data failed. Note add. info to get ADS error ID';
SIf.Alm[6].eAlmClass := E_AlmClass.OFF;
SIf.Alm[6].strText := 'ADS connection fault. Note add. info for affected connection ID';
SIf.Alm[7].eAlmClass := E_AlmClass.OFF;
SIf.Alm[7].strText :=  'Adding AMS route failed. Note add. info for affected connection ID';

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// parameter
SIf.Par.udiTOAddRoute_ms:= 1500;
SIf.Par.udiTOPowerOn_ms:= 10000;
SIf.Par.udiTOReadData_ms:= 1500;
SIf.Par.udiTOWriteData_ms:= 1500;
SIf.Par.udiTORWData_ms:= 1500;
SIf.Par.udiPollingInterval_ms:= 100;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="f00aa3c1-1388-4d00-961e-356b78c04a4b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Initialize sub state machine
		me.SubStateMachine.intState:= cSTA_SUB_INITIALIZE; 
		me.SubStateMachine.intStateNext := cSTA_SUB_INITIALIZE;
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="309b1a1d-faae-42bc-9507-42d211c6d40e">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_ACL" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>35c44579-8ee6-4bc6-a332-f87fe74b8d5d</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_BCD" pouType="functionBlock">
              <interface>
                <localVars>
                  <variable name="bolInitDone">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bolActivate">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="SIf">
                    <type>
                      <derived name="T_BCD" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> driver specific interface</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stStateMachine">
                    <type>
                      <derived name="T_BCD_StateMachine" />
                    </type>
                  </variable>
                  <variable name="stSubStateMachine">
                    <type>
                      <derived name="T_BCD_StateMachine" />
                    </type>
                  </variable>
                  <variable name="fbClientConnection">
                    <type>
                      <derived name="FB_ClientServerConnection" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Create/release TCP/IP connection</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbSend">
                    <type>
                      <derived name="FB_SocketSend" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Send TCP/IP data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbReceive">
                    <type>
                      <derived name="FB_SocketReceive" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Receive TCP/IP data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aRxData">
                    <type>
                      <array>
                        <dimension lower="0" upper="300" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Rx data buffer</xhtml>
                    </documentation>
                  </variable>
                  <variable name="rTxData">
                    <type>
                      <derived name="T_BCD_TxStructure" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Tx data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intTxState">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="bolExecuteSend">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="udiNSend">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> counter for sended frames </xhtml>
                    </documentation>
                  </variable>
                  <variable name="intRxState">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="bolExecuteRead">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="udiReceivedBytes">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Count of received data bytes</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strReceivedMessage">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="iStringLength">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="iReaderType">
                    <type>
                      <derived name="E_BCD_Type" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> bar code reader type</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <localVars constant="true">
                  <variable name="cBCD_SUB_Send">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2000" />
                    </initialValue>
                  </variable>
                  <variable name="cBCD_SUB_Wait">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2001" />
                    </initialValue>
                  </variable>
                  <variable name="cBCD_SUB_Read">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2002" />
                    </initialValue>
                  </variable>
                  <variable name="cBCD_SUB_CheckAnswer">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2003" />
                    </initialValue>
                  </variable>
                  <variable name="cBCD_SUB_GetData">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2004" />
                    </initialValue>
                  </variable>
                  <variable name="cBCD_SUB_Done">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2005" />
                    </initialValue>
                  </variable>
                  <variable name="cBCD_SUB_Error">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2006" />
                    </initialValue>
                  </variable>
                  <variable name="cTxIdle">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                  <variable name="cTxBusy">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="1" />
                    </initialValue>
                  </variable>
                  <variable name="cRxIdle">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                  <variable name="cRxBusy">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="1" />
                    </initialValue>
                  </variable>
                  <variable name="cRxConv">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="2" />
                    </initialValue>
                  </variable>
                  <variable name="cSTX">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="16#2" />
                    </initialValue>
                  </variable>
                  <variable name="cETX">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="16#3" />
                    </initialValue>
                  </variable>
                  <variable name="cCR">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="16#D" />
                    </initialValue>
                  </variable>
                  <variable name="cLF">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="16#A" />
                    </initialValue>
                  </variable>
                </localVars>
              </interface>
              <actions>
                <action name="ClearTxBuffer">
                  <body>
                    <ST>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Tc2_System.MEMSET(ADR(rTxData.aTxData),16#00,SIZEOF(rTxData.aTxData));
</xhtml>
                    </ST>
                  </body>
                  <addData>
                    <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                      <ObjectId>8c46fc43-76b4-4f74-95d3-37737a30e53c</ObjectId>
                    </data>
                  </addData>
                </action>
              </actions>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
TCP-IP driver for SICK barcode reader CLV632-0120
Note: This driver work as a TCP client.

History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		18.12.2013		AVME/DSC	Start history
0.00.2		03.01.2014		AVME/DSC	Basic functionalities implemented and tested. Following commands are supported:
										CMD_CONNECT_SOCKET 	1002 		// Connect TCP socket
										CMD_CLOSE_SOCKET 	1004 		// Close TCP socket
										CMD_COM_TEST 		1006 		// Communication test 
										CMD_READ_BARCODE 	1014 		// Command enable the sensor gate for X-TIME ("duration" setting of sensor object trigger)
																		// Sensor try to detect a barcode.
0.00.3		27.01.2014		AVME/DSC    Added new method "CheckSensorError" to set "bolSensorError" in case if sensor answer with SOPAS error																					 							
0.00.4		24.10.2014		HLV/MAH		driver can be used for Sick or Keyence scanner configured by SIf.Cfg.iSensorType := E_BCD_Type.xxxx
										the port of Keyence scanner must be always 9004
										if Keyence scanner is used, FB_SocketCloseAll must be called in main PRG (see MiddlePRG in BaseElementsSample)

	
___________________________________________________________________________________________________*)


IF (bolActivate) THEN // cyclic call enabled
	
	IF (bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();	
		bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
				
		StateMachine();
		
		CycleEndDuty();
	END_IF
	
END_IF;</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ConnectSocketBusy" ObjectId="1ad3cc92-44b3-41f8-8ba2-1e11181ec2a9">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ConnectSocketBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateHistory := stStateMachine.intStateLastCycle;
		stStateMachine.intStateLastCycle := stStateMachine.intState;
			
		// Initialize and connect socket
		fbClientConnection.nMode := CONNECT_MODE_ENABLEDBG; 			// not used
		fbClientConnection.sRemoteHost := SIf.stCfg.strSensorIPAdr;
		fbClientConnection.nRemotePort := SIf.stCfg.udiSensorPort;
		fbClientConnection.tReconnect := SIf.stPar.tTOConnection;
		fbClientConnection.bEnable:= TRUE;

	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
		
	
		// State Change Condition

		// Check about FUB error	
		IF (fbClientConnection.bError = TRUE) OR (fbClientConnection.nErrId &lt;&gt; 0) THEN
			SIf.stErr.bolErrorActive := TRUE;	
			SIf.stErr.bolSocketError := TRUE;
			SIf.stErr.udiErrorID := fbClientConnection.nErrId;
			stStateMachine.intStateNext := cBCD_STA_Error;
		END_IF
	
		// Wait for socket handle ID	
		IF (fbClientConnection.hSocket.handle &lt;&gt; 0) AND (fbClientConnection.eState = eSOCKET_CONNECTED) THEN
			stStateMachine.intStateNext := cBCD_STA_WaitForJob;
		END_IF

	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		SIf.intCmd := cBCD_CMD_DONE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CycleStartDuty" ObjectId="322a3606-8adb-415b-a8c0-2d06fa66396c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CycleStartDuty" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine

// Simulation active
IF (SIf.stCfg.bolSimulation) THEN
	;
ELSE
	;
END_IF

// Cyclic call of the client connection
fbClientConnection();
// Cyclic call of method "HandleRxData"
THIS^.HandleRxData();

// Generate socket connected status info
IF (fbClientConnection.eState = eSOCKET_CONNECTED) THEN
	SIf.stStatus.bolSocketConnected:= TRUE;
ELSE
	SIf.stStatus.bolSocketConnected:= FALSE;	
	SIf.stStatus.bolComChecked:= FALSE;
END_IF

// Command close socket can be executed all the time.
// Used for error recovery in case if parent controller has an error.
IF (SIf.intCmd=cBCD_CMD_CLOSE_SOCKET) THEN	
	stStateMachine.intStateNext := cBCD_STA_CloseSocketBusy;
END_IF
			
SIf.strCmd := THIS^.getCmdState(intCmdState:=SIf.intCmd,bolState:=FALSE);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="PrepareReadMsg" ObjectId="3d4dade1-2577-4970-9e9b-2f8226f80caf">
                    <interface>
                      <localVars>
                        <variable name="uinI">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="strCharacter">
                          <type>
                            <string length="1" />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Private="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="PrepareReadMsg" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Delete last message
strReceivedMessage:= '';

// Loop over receive buffer
FOR uinI:= 0 TO SIZEOF(aRxData)-1 DO	
	// Start of text?
	IF (aRxData[uinI] = cSTX) THEN
		;
	// End of text?
	ELSIF (aRxData[uinI] = cETX) THEN
		EXIT;
	ELSE
		// Convert ASCII to string
		strCharacter:= F_ToCHR(aRxData[uinI]);
		strReceivedMessage:= CONCAT(strReceivedMessage,strCharacter);			
	END_IF
END_FOR</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_SocketClosed" ObjectId="434f1ca1-1c54-45bf-96b7-273daaa6f39e">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_SocketClosed" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		;
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		// State Change Condition
		IF (SIf.intCmd=cBCD_CMD_CONNECT_SOCKET) THEN
			stStateMachine.intStateNext := cBCD_STA_ConnectSocketBusy;
		END_IF
		
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_CloseSocketBusy" ObjectId="5d499f6a-81ba-4ae4-9b9a-1876c9564350">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_CloseSocketBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateHistory := stStateMachine.intStateLastCycle;
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
		// Reset pending commands			
		bolExecuteSend:= FALSE;
		bolExecuteRead:= FALSE;
		// Reset Rx/Tx states
		intRxState:= cRxIdle;
		intTxState:= cTxIdle;
		// Close socket
		fbClientConnection.bEnable:= FALSE;

	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
		
	
		// State Change Condition

		// Check about FUB error	
		IF (fbClientConnection.bError = TRUE) OR (fbClientConnection.nErrId &lt;&gt; 0) THEN
			SIf.stErr.bolErrorActive := TRUE;	
			SIf.stErr.bolSocketError := TRUE;
			SIf.stErr.udiErrorID := fbClientConnection.nErrId;
			stStateMachine.intStateNext := cBCD_STA_Error;
		END_IF
	
		// Wait until socket is closed	
		IF (fbClientConnection.eState = eSOCKET_CLOSED) THEN
			stStateMachine.intStateNext := cBCD_STA_WaitForJob;
		ELSIF  (SIf.stErr.bolErrorActive= TRUE) THEN 
			stStateMachine.intStateNext := cBCD_STA_Error;		
		END_IF
	
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		SIf.intCmd := cBCD_CMD_DONE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CycleEndDuty" ObjectId="6991b51e-f6c1-4114-833e-5ce5a16ba432">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CycleEndDuty" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf.strState := THIS^.getCmdState(intCmdState:=stStateMachine.intState,bolState:=TRUE);

IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
	stStateMachine.intState := stStateMachine.intStateNext;  // set next state for next cycle
END_IF

(***************************************************************
        Function Block Calls
***************************************************************)

// Cyclic call of method "HandleTxData"
THIS^.HandleTxData();</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="HandleRxData" ObjectId="74c0ff1a-cafe-4771-9bc8-4f903dd97345">
                    <interface>
                      <localVars>
                        <variable name="uinI">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Private="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="HandleRxData" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// GET/FETCH RX DATA
CASE intRxState OF
	
	// wait for read command
	cRxIdle:
		IF (bolExecuteRead=TRUE) AND (fbClientConnection.eState = eSOCKET_CONNECTED)THEN	

			// clear rx buffer
			FOR uinI:= 0 TO SIZEOF(aRxData)-1 DO
				aRxData[uinI]:= 16#00;
			END_FOR
			// Delete last message
			strReceivedMessage:= '';
			udiReceivedBytes := 0;
								
			// receive frame			
			fbReceive( bExecute := FALSE );
			fbReceive( 	sSrvNetId	:= '',
						hSocket		:= fbClientConnection.hSocket,
						cbLen		:= SIZEOF(aRxData),
						pDest		:= ADR(aRxData),
						bExecute	:= TRUE,
						tTimeout	:= SIf.stPar.tTOReceive);
			intRxState := cRxBusy;		
		END_IF
		
	// wait until receive not busy
	cRxBusy:
		fbReceive( bExecute := FALSE );
		IF NOT fbReceive.bBusy THEN
			IF NOT fbReceive.bError THEN
				IF (fbReceive.nRecBytes &gt; 0) THEN (* some bytes received *)
					udiReceivedBytes := fbReceive.nRecBytes;
					intRxState := cRxConv; // convert received message
				ELSE
					// Try to read again
					intRxState := cRxIdle;
				END_IF	
			// Error	
			ELSE
				IF (SIf.stErr.bolErrorActive = FALSE) THEN
					SIf.stErr.bolErrorActive := TRUE;	
					SIf.stErr.udiErrorID := fbReceive.nErrId;	
					// Try to close the socket. Needs reconnect for socket after an error!	
					stStateMachine.intStateNext := cBCD_STA_CloseSocketBusy;	
				END_IF	
			END_IF			
		END_IF
			
	// convert received message to string
	cRxConv: 
		THIS^.PrepareReadMsg();
		THIS^.CheckSensorError(); // Error response: [STX]sFA &lt;x&gt;[ETX]    	
		bolExecuteRead:= FALSE; // Read done and data converted to string format
		intRxState := cRxIdle;
		
END_CASE
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_Error" ObjectId="82b7a404-d88f-4473-ba9c-3069496ba777">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_Error" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateHistory := stStateMachine.intStateLastCycle;
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
		// Reset pending commands			
		bolExecuteSend:= FALSE;
		bolExecuteRead:= FALSE;
		// Reset Rx/Tx states
		intRxState:= cRxIdle;
		intTxState:= cTxIdle;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
			
		// State Change Condition
		IF (SIf.stErr.bolErrAck = TRUE) THEN
			// Reset all active errors
			SIf.stErr.bolErrorActive := FALSE;
			SIf.stErr.bolSocketError := FALSE;
			SIf.stErr.bolSensorError := FALSE;
			SIf.stErr.udiErrorID := 0;
			SIf.stErr.bolErrAck := FALSE;
			// Needs reconnect for socket after an error!		
			stStateMachine.intStateNext := cBCD_STA_CloseSocketBusy;		
		END_IF
		
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="85bf2f8e-a78a-43fa-bbb7-de6999e2d4bc">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">
// main statemachine
CASE stStateMachine.intState OF	
	cBCD_STA_WaitForJob:
   		THIS^.sta_WaitForJob();
	cBCD_STA_ConnectSocketBusy: 
        THIS^.sta_ConnectSocketBusy();	
	cBCD_STA_CloseSocketBusy: 
        THIS^.sta_CloseSocketBusy();		
	cBCD_STA_SocketClosed: 
        THIS^.sta_SocketClosed();	
	cBCD_STA_ComTestBusy:
	    THIS^.sta_ComTestBusy();
	cBCD_STA_ReadCodeBusy:
	    THIS^.sta_ReadCodeBusy();
    cBCD_STA_Error: 
        THIS^.sta_Error();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getSIf" ObjectId="86fc9feb-45c7-4163-830f-c53ee419e66f">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_BCD" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="8fb68db1-6cc4-4222-a9c4-8c5478851770">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// get string cmd/state string information in runtime
IF (bolState=FALSE) THEN
	
// cmd's
	CASE intCmdState OF
		cBCD_CMD_DONE: 
			getCmdState := 'cBCD_CMD_DONE';
		cBCD_CMD_CONNECT_SOCKET: 
			getCmdState := 'cBCD_CMD_CONNECT_SOCKET';
		cBCD_CMD_CLOSE_SOCKET: 
			getCmdState := 'cBCD_CMD_CLOSE_SOCKET';
		cBCD_CMD_READ_BARCODE: 
			getCmdState := 'cBCD_CMD_READ_BARCODE';		
		cBCD_CMD_COM_TEST: 
			getCmdState := 'cBCD_CMD_COM_TEST';			
	END_CASE;
ELSE

// state's
	CASE intCmdState OF
		cBCD_STA_WaitForJob: 
			getCmdState := 'cBCD_STA_WaitForJob';
		cBCD_STA_ConnectSocketBusy: 
			getCmdState := 'cBCD_STA_ConnectSocketBusy';
		cBCD_STA_CloseSocketBusy: 
			getCmdState := 'cBCD_STA_CloseSocketBusy';
		cBCD_STA_SocketClosed: 
			getCmdState := 'cBCD_STA_SocketClosed';	
		cBCD_STA_ReadCodeBusy: 
			getCmdState := 'cBCD_STA_ReadCodeBusy';	
		cBCD_STA_ComTestBusy:
			getCmdState := 'cBCD_STA_ComTestBusy';	
		cBCD_STA_Error: 
			getCmdState := 'cBCD_STA_Error';
	END_CASE;
	
END_IF

</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="HandleTxData" ObjectId="98cf61cd-8d55-4d42-a889-0dcddf7e415e">
                    <interface>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Private="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="HandleTxData" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// HANDLE TX DATA
CASE intTxState OF
	
	// wait for send command (ready for send)
	cTxIdle:
		IF (bolExecuteSend) AND (fbClientConnection.eState = eSOCKET_CONNECTED)THEN									
			// send frame
			fbSend( bExecute := FALSE );
			fbSend(	sSrvNetID 	:= '',
					hSocket		:= fbClientConnection.hSocket,
					cbLen		:= rTxData.intMessageSize,
					pSrc		:= ADR(rTxData.aTxData),					// pointer to the frame data
					bExecute	:= TRUE,
					tTimeout 	:= SIf.stPar.tTOSend);
	
			intTxState := cTxBusy;							
		END_IF
		
	// wait until send not busy
	cTxBusy:
		fbSend( bExecute := FALSE );
		IF NOT (fbSend.bBusy) THEN
			intTxState := cTxIdle;
			// Check about FUB error	
			IF (fbSend.bError = TRUE) THEN
				IF (SIf.stErr.bolErrorActive = FALSE) THEN
					SIf.stErr.bolErrorActive := TRUE;	
					SIf.stErr.udiErrorID := fbSend.nErrId;	
					// Try to close the socket. Needs reconnect for socket after an error!	
					stStateMachine.intStateNext := cBCD_STA_CloseSocketBusy;	
				END_IF				
			// no error
			ELSE
				udiNSend := udiNSend + 1; // increment the number of send frames
				bolExecuteSend:= FALSE;
			END_IF
		END_IF
		
END_CASE</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ComTestBusy" ObjectId="99a1b8ab-8b22-441c-8645-6eb1864c1e85">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ComTestBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateHistory := stStateMachine.intStateLastCycle;
		stStateMachine.intStateLastCycle := stStateMachine.intState;

		// Clear data
		SIf.stData.stDevInfo.strComTestResult:='';
		SIf.stStatus.bolComChecked:=FALSE;
	
		// Init sub state machine
		stSubStateMachine.intState := cBCD_SUB_Send;
		stSubStateMachine.intStateNext := cBCD_SUB_Send;	
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
			
		// sub state machine for reading the bar code	
		CASE stSubStateMachine.intState OF

			cBCD_SUB_Send:
				// Check Tx state idle
				IF (intTxState = cTxIdle) THEN
					CASE SIf.stCfg.iSensorType OF
						E_BCD_Type.SICK:
							THIS^.PrepareSendMsg('sRI0'); // Call SOPAS command "sRI0"
							
						E_BCD_Type.KEYENCE:
							THIS^.PrepareSendMsg('BCLR'); // clear send buffer
					END_CASE
					bolExecuteSend:= TRUE;
					stSubStateMachine.intState := cBCD_SUB_Wait;
				END_IF
		
			cBCD_SUB_Wait:
				// Wait until executed -&gt; flag set back to false by method handle TxData
				IF (bolExecuteSend=FALSE)THEN
					stSubStateMachine.intState := cBCD_SUB_Read;
				END_IF
				
			cBCD_SUB_Read:
				// Check Rx state idle
				IF (intRxState = cRxIdle) THEN
					bolExecuteRead:= TRUE;
					stSubStateMachine.intState := cBCD_SUB_CheckAnswer;
				END_IF
			
			cBCD_SUB_CheckAnswer:
				// Wait until executed -&gt; flag set back to false by method handle RxData
				IF (bolExecuteRead=FALSE)THEN				
					// Check about corresponding answer for the command	
					CASE SIf.stCfg.iSensorType OF
						E_BCD_Type.SICK:					
							IF (TC2_STANDARD.FIND(strReceivedMessage,'sRA') &lt;&gt; 0) THEN
								SIf.stData.stDevInfo.strComTestResult:=strReceivedMessage;
								SIf.stStatus.bolComChecked:=TRUE;
							END_IF
						
						E_BCD_Type.KEYENCE:
							IF (TC2_STANDARD.FIND(strReceivedMessage,'OK,BCLR') &lt;&gt; 0) THEN
								SIf.stData.stDevInfo.strComTestResult:=strReceivedMessage;
								SIf.stStatus.bolComChecked:=TRUE;
							END_IF
					END_CASE
					stSubStateMachine.intState := cBCD_SUB_Done;
				END_IF
			
			cBCD_SUB_Done:
				; // job executed
			
		END_CASE
		
		 // job executed
		IF (stSubStateMachine.intState = cBCD_SUB_Done) THEN
			stStateMachine.intStateNext := cBCD_STA_WaitForJob;	
		END_IF
	
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		SIf.intCmd := cBCD_CMD_DONE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="b6d626b0-4836-4bae-8d83-6e5cf1aff188">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Communication Settings
SIf.stCfg.strSensorIPAdr := '192.168.1.103';  //'192.168.0.10'; 
SIf.stCfg.udiSensorPort := 9004;
SIf.stCfg.bolResponseIncludingDiagnostics := FALSE;
SIf.stCfg.iSensorType := E_BCD_Type.KEYENCE;

// Parameter
SIf.stPar.tTOConnection := T#50S;
SIf.stPar.tTOReceive := T#5S;
SIf.stPar.tTOSend := T#5S;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="PrepareBarCodeData" ObjectId="d5e1ae75-4f39-477a-a1bb-21f1080191ae">
                    <interface>
                      <localVars>
                        <variable name="intI">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="intStartIndex">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="intStartIndexCode">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bASCIISign">
                          <type>
                            <BYTE />
                          </type>
                        </variable>
                        <variable name="strCharacter">
                          <type>
                            <string length="1" />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Private="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="PrepareBarCodeData" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">
// Note: Currently only the bar code is read out from the received message. "OI=" section in message.
// Other data sections like e.g. "TT=", "OTL=", "CC=" are not prepared.

// ----------------------------------------------------
// Get bar code and write result to structure "stData"
// ----------------------------------------------------
	
// Example of message: &lt;stx&gt; &lt;CR&gt;&lt;LF&gt; TT=125ms OTL=0mm CC=1 OI=25&lt;CR&gt;&lt;LF&gt;45376049874&lt;CR&gt;&lt;LF&gt; .... and so on ...   &lt;etx&gt;
				 
// Get start index for bar code 'OI='
intStartIndex := TC2_STANDARD.FIND(strReceivedMessage,'OI=');

// Loop over received message to get the bar code
FOR intI:=intStartIndex TO LEN(strReceivedMessage)-intStartIndex DO	
	// Convert to ASCII to detect CR and LF
	bASCIISign:= F_ToASC(Mid(strReceivedMessage,1,intI));
	// The bar code number starts after LF					
	IF (bASCIISign = cLF) THEN
		// Save start index of the bar code
		intStartIndexCode:= intI + 1;
	END_IF
	// Read every single number of the bar code until the end "CR"
	IF ((intStartIndexCode &lt;&gt; 0) AND (intI &gt;= intStartIndexCode)) THEN
		// As long as the end is not reached...(The bar code number ends with CR)	
		IF (bASCIISign &lt;&gt; cCR) THEN								
			// Write result to structure stData	
			strCharacter:= Mid(strReceivedMessage,1,intI);
			SIf.stData.strBarCode:= CONCAT(SIf.stData.strBarCode,strCharacter);	
			SIf.stData.uliBarCode:= STRING_TO_ULINT(SIf.stData.strBarCode);
			SIf.stData.bolCodeReaded:= TRUE;																	
		ELSE
			// end of bar code reached "CR" -&gt; EXIT loop
			EXIT;
		END_IF
	END_IF
	
END_FOR</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CheckSensorError" ObjectId="e2fa62b7-d503-4d82-902e-027602ebecdc">
                    <interface>
                      <localVars>
                        <variable name="strErrorID">
                          <type>
                            <string length="3" />
                          </type>
                        </variable>
                        <variable name="bytErrorID">
                          <type>
                            <BYTE />
                          </type>
                        </variable>
                        <variable name="cbData">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Private="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CheckSensorError" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">(*--------------------------------------------------------------------------
IF an error occurs the Sopas command is answered with:
[STX]sFA &lt;x&gt;[ETX] as an error response

	Error list: &lt;x&gt; can have following values:
	1:	Access denied
	2:	Unknown Index
	3:	Unknown Index
	4:	Wrong Condition
	5:	Invalid Data
	6:	Unknown Error
	7:	Too Many Parameter
	8:	Parameter Missing
	9: 	Wrong Parameter
	A:	No Write Access
	B:	Unknown Command
	C:	Unknown Command
	D:	Server Busy
	E:	Textstring Too Long
	F:	Unknown Event
	10:	Too many Parameter
	11: Invalid Character
	12.	No Message
	13:	No Answer
	14:	Internal Error
	15:	HubAddress: wrong
	16:	HubAddress: error
	17:	HubAddress: error

---------------------------------------------------------------------------*)

// If received message is an error response from sensor: [STX]sFA &lt;x&gt;[ETX]    				
IF (TC2_STANDARD.FIND(strReceivedMessage,'sFA') &lt;&gt; 0) THEN
	
	// Get error number
	strErrorID := Mid(strReceivedMessage,LEN(strReceivedMessage)-1,5);
	cbData := HEXSTR_TO_DATA( strErrorID, ADR(bytErrorID), SIZEOF(bytErrorID));

	// No interpretation of the error number, only set SensorError with error number info 
	(*
	CASE bytErrorID OF
		16#1: 
		16#2:
		16#3:	
		16#A:			
		16#B,16#C:
	END_CASE
	*)
	
	IF (SIf.stErr.bolErrorActive = FALSE) THEN
		SIf.stErr.bolErrorActive:= TRUE;	
		SIf.stErr.bolSensorError:= TRUE; 
		SIf.stErr.udiErrorID := bytErrorID;	
		// Try to close the socket. Needs reconnect for socket after an error!	
		stStateMachine.intStateNext := cBCD_STA_CloseSocketBusy;	
	END_IF	

END_IF
	</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ReadCodeBusy" ObjectId="e54c24e3-afec-45d9-9a45-a1bd55bc6eb2">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ReadCodeBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateHistory := stStateMachine.intStateLastCycle;
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
		// Clear data
		SIf.stData.uliBarCode:=0;
		SIf.stData.strBarCode:='';
		SIf.stData.bolCodeReaded:= FALSE;
						
		// Init sub state machine
		stSubStateMachine.intState := cBCD_SUB_Send;
		stSubStateMachine.intStateNext := cBCD_SUB_Send;	
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
			
		// sub state machine for reading the bar code	
		CASE stSubStateMachine.intState OF

			cBCD_SUB_Send:
				// Check Tx state idle
				IF (intTxState = cTxIdle) THEN
					CASE SIf.stCfg.iSensorType OF
						E_BCD_Type.SICK:
							THIS^.PrepareSendMsg('sMN mTCgateon'); // Call SOPAS method "sMN mTCgateon"
							bolExecuteSend:= TRUE;
							stSubStateMachine.intState := cBCD_SUB_Wait;
							
						E_BCD_Type.KEYENCE:
							THIS^.PrepareSendMsg('LON'); // Call Trigger ON
							bolExecuteSend:= TRUE;
							stSubStateMachine.intState := cBCD_SUB_Wait;
					ELSE
						SIf.stData.strBarCode:= 'no sensor type defined';
						SIf.stData.uliBarCode:= 0;
					END_CASE
					
				END_IF
		
			cBCD_SUB_Wait:
				// Wait until executed -&gt; flag set back to false by method handle TxData
				IF (bolExecuteSend=FALSE)THEN
					stSubStateMachine.intState := cBCD_SUB_Read;
				END_IF
				
			cBCD_SUB_Read:
				// Check Rx state idle
				IF (intRxState = cRxIdle) THEN
					bolExecuteRead:= TRUE;
					stSubStateMachine.intState := cBCD_SUB_CheckAnswer;
				END_IF
			
			cBCD_SUB_CheckAnswer:
				// Wait until executed -&gt; flag set back to false by method handle RxData
				IF (bolExecuteRead=FALSE)THEN				
					// Check about corresponding answer for the called method
					CASE SIf.stCfg.iSensorType OF
						E_BCD_Type.SICK:
							IF (FC_StrComp(strReceivedMessage,'sAN mTCgateon 1') = 0) THEN			
								// Check Rx state idle
								IF (intRxState = cRxIdle) THEN
									bolExecuteRead:= TRUE;
									stSubStateMachine.intState := cBCD_SUB_GetData;
								END_IF
							END_IF
							
						E_BCD_Type.KEYENCE:
							IF (FC_StrComp(strReceivedMessage,'OK,LON') = 0) THEN			
								// Check Rx state idle
								IF (intRxState = cRxIdle) THEN
									bolExecuteRead:= TRUE;
									stSubStateMachine.intState := cBCD_SUB_GetData;
								END_IF
							END_IF
					END_CASE
				END_IF
			
			cBCD_SUB_GetData:
				// Wait until executed -&gt; flag set back to false by method handle RxData
				IF (bolExecuteRead=FALSE)THEN
					
					CASE SIf.stCfg.iSensorType OF
						E_BCD_Type.SICK:
							// No barcode recognized after the end of the time window ("duration" setting of sensor object trigger), NoRead !
							IF (((TC2_STANDARD.FIND(strReceivedMessage,'OI=') &lt;&gt; 0) OR NOT SIf.stCfg.bolResponseIncludingDiagnostics) 
								AND (TC2_STANDARD.FIND(strReceivedMessage,'*NoRead*') &lt;&gt; 0)) THEN			
								SIf.stData.strBarCode:='NoRead';
								stSubStateMachine.intState := cBCD_SUB_Done;
							END_IF
							
							// Barcode detected within the time window
							IF (((TC2_STANDARD.FIND(strReceivedMessage,'OI=') &lt;&gt; 0) OR NOT SIf.stCfg.bolResponseIncludingDiagnostics) 
								AND NOT (TC2_STANDARD.FIND(strReceivedMessage,'*NoRead*') &lt;&gt; 0)) THEN			
								// Prepare bar code data from received message
								THIS^.PrepareBarCodeData();
								stSubStateMachine.intState := cBCD_SUB_Done;
							END_IF
						
						E_BCD_Type.KEYENCE:
							// No barcode recognized after the end of the time window ("duration" setting of sensor object trigger), NoRead !
							IF (TC2_STANDARD.FIND(strReceivedMessage,'ERROR') &lt;&gt; 0) THEN			
								SIf.stData.strBarCode:='NoRead';
								stSubStateMachine.intState := cBCD_SUB_Done;
							END_IF
							
							// Barcode detected within the time window
							IF NOT (TC2_STANDARD.FIND(strReceivedMessage,'ERROR') &lt;&gt; 0) THEN			
								// Prepare bar code data from received message
								iStringLength := Tc2_Standard.LEN(strReceivedMessage);
								SIf.stData.strBarCode := Tc2_Standard.LEFT(strReceivedMessage,iStringLength-1);
								SIf.stData.uliBarCode:= STRING_TO_ULINT(SIf.stData.strBarCode);
								stSubStateMachine.intState := cBCD_SUB_Done;
							END_IF
					END_CASE
				END_IF
			
			cBCD_SUB_Done:
				; // job executed
			
		END_CASE
		
		 // job executed
		IF (stSubStateMachine.intState = cBCD_SUB_Done) THEN
			stStateMachine.intStateNext := cBCD_STA_WaitForJob;	
		END_IF
			
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		SIf.intCmd := cBCD_CMD_DONE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="PrepareSendMsg" ObjectId="e67cfade-0958-4a28-abdc-00b43b64367e">
                    <interface>
                      <inputVars>
                        <variable name="strMsg">
                          <type>
                            <string />
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="intI">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="strCharacter">
                          <type>
                            <string length="1" />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Private="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="PrepareSendMsg" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Clear send buffer
ClearTxBuffer();

// STX - start of telegramm
rTxData.aTxData[0]:= cSTX;

// Loop over message string and convert to ASCII
FOR intI:= 1 TO INT_TO_UINT(LEN(strMsg)) DO
	// Get char
	strCharacter:= MID(strMsg,1,UINT_TO_INT(intI));
	// Convert to ASCII
	rTxData.aTxData[intI]:= F_ToASC(strCharacter);
END_FOR

// ETX - end of telegramm
rTxData.aTxData[intI]:= cETX;

rTxData.intMessageSize := intI + 1;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_WaitForJob" ObjectId="e79427c7-26eb-403f-9f44-c99aabec868f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_WaitForJob" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		// State Change Condition
		IF (SIf.intCmd=cBCD_CMD_CONNECT_SOCKET) THEN						// Connect TCP socket
			stStateMachine.intStateNext := cBCD_STA_ConnectSocketBusy;
		ELSIF (SIf.intCmd=cBCD_CMD_CLOSE_SOCKET) THEN						// Close TCP socket
			stStateMachine.intStateNext := cBCD_STA_CloseSocketBusy;
		ELSIF (SIf.intCmd=cBCD_CMD_COM_TEST) THEN							// Communication test 
			stStateMachine.intStateNext := cBCD_STA_ComTestBusy;	
		ELSIF (SIf.intCmd=cBCD_CMD_READ_BARCODE) THEN						// Read bar code
			stStateMachine.intStateNext := cBCD_STA_ReadCodeBusy;				
		END_IF

				
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="fab64fc1-06ea-49cf-b0b0-ae06254ffffc">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// one time first cyclic call
// The socket is closed
stStateMachine.intStateNext := cBCD_STA_SocketClosed;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9b52d7b0-8644-4655-8f02-ec7e053d1595</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FC_StrComp" pouType="function">
              <interface>
                <returnType>
                  <DINT />
                </returnType>
                <inputVars>
                  <variable name="strArg1">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                  <variable name="strArg2">
                    <type>
                      <string length="255" />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="stArg1">
                    <type>
                      <derived name="TC2_UTILITIES.T_Arg" />
                    </type>
                  </variable>
                  <variable name="stArg2">
                    <type>
                      <derived name="TC2_UTILITIES.T_Arg" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
// String compare function use F_ARGCMP from beckhoff lib. TC2_UTILITIES

// set parameter for arg1
stArg1.cbLen:= INT_TO_UDINT(TC2_STANDARD.LEN(strArg1));
stArg1.pData:= ADR(strArg1);
stArg1.eType:= ARGTYPE_STRING;

// set parameter for arg2
stArg2.cbLen:= INT_TO_UDINT(TC2_STANDARD.LEN(strArg2));
stArg2.pData:= ADR(strArg2);
stArg2.eType:= ARGTYPE_STRING;

// call F_ARGCMP
FC_StrComp:= TC2_UTILITIES.F_ARGCMP(TRUE,stArg1,stArg2);</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>e9ea96d9-99cd-4eb0-8d4f-4332fb1d73d3</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_PRS" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_bolPresent">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="Out_bolPresent">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_PRS" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Vacuum Pump implementation. 


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		09.07.2013		PC			Start history
___________________________________________________________________________________________________*)


IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
END_IF;
</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ABSENT" ObjectId="017309f2-ae52-4b50-9af0-9e8dd18cf9c2">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ABSENT" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		THIS^.Out_bolPresent := FALSE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF CIf.SwCfg.bolSimulation THEN
			IF SIf.Par.bolSimHangerAvailable THEN
				me.StateMachine.intStateNext := PRS_CmdState.cSTA_PRESENTBusy;
			END_IF
		ELSE
			IF SIf.In.bolPresent.intern  THEN
				me.StateMachine.intStateNext := PRS_CmdState.cSTA_PRESENTBusy;
			END_IF;		
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="17810348-9e67-41c6-ac6b-9041a301c450">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	; // always error supervision
	
END_IF

// ----------------------------------------------------------------------------------
// Conditions Always
IF (((me.Alarm.eActivAlmClass=E_AlmClass.EOFF) OR (me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF))
		 AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) AND
		(me.StateMachine.intState&lt;&gt;cSTA_OFF) AND (me.StateMachine.intState&lt;&gt;cSTA_OFFBusy)) THEN
	// alarm evt EOFF, OFF or cmd off
	me.StateMachine.intStateNext := cSTA_OFFBusy;
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PRESENT" ObjectId="3c26f44e-fe8b-4506-b5c2-e2a421c8563c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PRESENT" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		THIS^.Out_bolPresent := TRUE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF CIf.SwCfg.bolSimulation THEN
			IF NOT SIf.Par.bolSimHangerAvailable THEN
				me.StateMachine.intStateNext := PRS_CmdState.cSTA_ABSENTBusy;
			END_IF
		ELSE
			IF NOT SIf.In.bolPresent.intern  THEN
				me.StateMachine.intStateNext := PRS_CmdState.cSTA_ABSENTBusy;
			END_IF;		
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="3ca6b299-6b6f-4ce8-a3cf-18fa887f9f7e">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_PRS" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="73f31e8d-fb51-45d6-9df0-947166317f1a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="iLength">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx &lt; iLength) AND (CIf.Job.aCmdList[iIdx].intCmd &lt;&gt; cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx &lt; iLength) THEN
// Add configuration of own comands	
	;
ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_PRS';
CIf.Info.strFullName := 'Present Sensor';

// set alarm class

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation :=  FALSE;

// parameter
SIf.Par.bolSimHangerAvailable := FALSE;
SIf.Par.udiDebounceAbsentTime_ms := 100;
SIf.Par.udiDebouncePresentTime_ms := 1500;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="7ea5bf5c-0957-4a4d-8441-e4216229bc14">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
SIf.In.bolPresent.map := THIS^.In_bolPresent;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolPresent));
ELSE
	//simulation of global IO
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="8d243f25-75ac-4b29-9f70-2be1bd8e186a">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		;
	ELSE
		// States's
		CASE intCmdState OF
			PRS_CmdState.cSTA_ABSENT: 
				getCmdState := 'cSTA_ABSENT';
			PRS_CmdState.cSTA_ABSENTBusy: 
				getCmdState := 'cSTA_ABSENTBusy';
			PRS_CmdState.cSTA_PRESENT: 
				getCmdState := 'cSTA_PRESENT';
			PRS_CmdState.cSTA_PRESENTBusy: 
				getCmdState := 'cSTA_PRESENTBusy';
		END_CASE;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PRESENTBusy" ObjectId="967597d0-8097-47f0-8cfd-120413b47678">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PRESENTBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF CIf.SwCfg.bolSimulation THEN
			IF NOT SIf.Par.bolSimHangerAvailable THEN
				me.StateMachine.intStateNext := PRS_CmdState.cSTA_ABSENT;
			END_IF
		ELSE
			IF NOT SIf.In.bolPresent.intern  THEN
				me.StateMachine.intStateNext := PRS_CmdState.cSTA_ABSENT;
			END_IF;		
			
			IF SIf.In.bolPresent.intern AND (me.StateMachine.udiTimeInState_ms &gt; SIf.Par.udiDebouncePresentTime_ms) THEN
				me.StateMachine.intStateNext :=  PRS_CmdState.cSTA_PRESENT;
			END_IF
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="b1832c3a-93a7-49ad-a53a-a1db5ddc9f45">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateNext := PRS_CmdState.cSTA_ABSENTBusy;
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="d64e6797-444e-4a5f-b98c-25172482e23d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    PRS_CmdState.cSTA_ABSENT: 
        THIS^.sta_ABSENT();
    PRS_CmdState.cSTA_ABSENTBusy: 
        THIS^.sta_ABSENTBusy();
    PRS_CmdState.cSTA_PRESENT: 
        THIS^.sta_PRESENT();
    PRS_CmdState.cSTA_PRESENTBusy: 
        THIS^.sta_PRESENTBusy();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="eb341fd2-5bb2-48e6-b4a1-987adb4bfd58">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bolSwitchValvesOff">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
//	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolClose));
	;
//	THIS^.Out_bolClose := SIf.Out.bolClose.map;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ABSENTBusy" ObjectId="efb3a22a-30f0-40c7-9c56-eae1962f8220">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ABSENTBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF CIf.SwCfg.bolSimulation THEN
			IF SIf.Par.bolSimHangerAvailable THEN
				me.StateMachine.intStateNext := PRS_CmdState.cSTA_PRESENT;
			END_IF
		ELSE
			IF SIf.In.bolPresent.intern  THEN
				me.StateMachine.intStateNext := PRS_CmdState.cSTA_PRESENT;
			END_IF;		
			
			IF NOT SIf.In.bolPresent.intern AND (me.StateMachine.udiTimeInState_ms &gt; SIf.Par.udiDebounceAbsentTime_ms) THEN
				me.StateMachine.intStateNext :=  PRS_CmdState.cSTA_ABSENT;
			END_IF
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="bad87dab-0290-4991-8b8f-499f9f9969ab">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_CTRL_SIf_PRS" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>aeafdf67-0807-49ec-867e-efc4e7f4565f</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_Com_3964R" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_pRxData">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="255" />
                            <baseType>
                              <BYTE />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pointer to Received Data Array</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_pTxData">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="255" />
                            <baseType>
                              <BYTE />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pointer to Sending Data Array</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_udiTxCount">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Amounth of sending data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_bolErrorAck">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error Acknowledge </xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <inOutVars>
                  <variable name="InOut_bolSend">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Command to send Data 1=command; 0=Done</xhtml>
                    </documentation>
                  </variable>
                  <variable name="InOut_bolRec">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Command Data received 1=received; 0=Done=Ready for next Data</xhtml>
                    </documentation>
                  </variable>
                </inOutVars>
                <outputVars>
                  <variable name="Out_udiRxCount">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Amounth of received data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_bolComError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Serial interface communication error</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_bolProtocolErr">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error in protocoll procedure</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_udiErrorCode">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error information to master</xhtml>
                    </documentation>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="In_stEL6inData" address="%I*">
                    <type>
                      <derived name="TC2_SERIALCOM.EL6inData22B" />
                    </type>
                  </variable>
                  <variable name="Out_stEL6outData" address="%Q*">
                    <type>
                      <derived name="TC2_SERIALCOM.EL6outData22B" />
                    </type>
                  </variable>
                  <variable name="udiI">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Internal Variables</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiK">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Local variable for loops</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolIntReset">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Internal Error Reset</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinCountCall">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Count call trials</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinCountRetry">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Count call Retrys</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytCheckValue">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temporary value for cecking the sum</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSLGInitialized">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Antenna is initializied, until it is not initializied, it send 16#02 in all possible baudrates</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolTimeout">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Check Timeout</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolWait">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Check Timeout</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSendNAK">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Send NAK needed</xhtml>
                    </documentation>
                  </variable>
                  <variable name="timWaitReceive">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#5ms" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Receive Wait signs</xhtml>
                    </documentation>
                  </variable>
                  <variable name="timWaitAck">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#400ms" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Receive Wait signs</xhtml>
                    </documentation>
                  </variable>
                  <variable name="timZVZ">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#45ms" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sign delay time</xhtml>
                    </documentation>
                  </variable>
                  <variable name="timQVZ">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#145ms" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Time ACK delay</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolInitRequest">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Initialisation of the HW card</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSendContinious">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Setting of the HW Card</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolPriority">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Priority at RFID</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolDLEDouble">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Send DLE doubletimes</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolComDataReceived">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> New data received</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolComRecBusy">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> receiving busy</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiComSizeReceiveData">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Received Data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolComSendBusy">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sending busy</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolErrSerialLineControl">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error at serial line control</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stErrSerialLineControl">
                    <type>
                      <derived name="ComError_t" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error at serial line control</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolErrReceive">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error at serial line  receiving data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stErrReceive">
                    <type>
                      <derived name="ComError_t" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error at serial line  receiving data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolErrSend">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error at serial line sending data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stErrSend">
                    <type>
                      <derived name="ComError_t" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error at serial line sending data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aRxData">
                    <type>
                      <array>
                        <dimension lower="0" upper="255" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Define Buffer for preparations</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aTxData">
                    <type>
                      <array>
                        <dimension lower="0" upper="255" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="stRxBuffer">
                    <type>
                      <derived name="TC2_SERIALCOM.ComBuffer" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Define Buffer for Funciton</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stTxBuffer">
                    <type>
                      <derived name="TC2_SERIALCOM.ComBuffer" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Transmit data buffer; used with all receive function blocks </xhtml>
                    </documentation>
                  </variable>
                  <variable name="intState">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sub Statemachine</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStateOld">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                  <variable name="udiStateLoop">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="a_intStateHist">
                    <type>
                      <array>
                        <dimension lower="0" upper="9" />
                        <baseType>
                          <INT />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="udiStateDebug">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiStateDebugMax">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="fbSerialLineControl">
                    <type>
                      <derived name="TC2_SERIALCOM.SerialLineControl" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Function for serial communication</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbSerialReceiveData">
                    <type>
                      <derived name="TC2_SERIALCOM.ReceiveData" />
                    </type>
                  </variable>
                  <variable name="fbSerialSendData">
                    <type>
                      <derived name="TC2_SERIALCOM.SendData" />
                    </type>
                  </variable>
                  <variable name="fbSerialClearComBuffer">
                    <type>
                      <derived name="TC2_SERIALCOM.ClearComBuffer" />
                    </type>
                  </variable>
                  <variable name="fbTon">
                    <type>
                      <derived name="TC2_STANDARD.TON" />
                    </type>
                  </variable>
                  <variable name="fbWait">
                    <type>
                      <derived name="TC2_STANDARD.TON" />
                    </type>
                  </variable>
                  <variable name="fbZVZ">
                    <type>
                      <derived name="TC2_STANDARD.TON" />
                    </type>
                  </variable>
                  <variable name="fbQVZ">
                    <type>
                      <derived name="TC2_STANDARD.TON" />
                    </type>
                  </variable>
                  <variable name="fbPriority">
                    <type>
                      <derived name="TC2_STANDARD.TON" />
                    </type>
                  </variable>
                </localVars>
                <localVars constant="true">
                  <variable name="cSTX">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="16#2" />
                    </initialValue>
                  </variable>
                  <variable name="cDLE">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="16#10" />
                    </initialValue>
                  </variable>
                  <variable name="cETX">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="16#3" />
                    </initialValue>
                  </variable>
                  <variable name="cNAK">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="16#15" />
                    </initialValue>
                  </variable>
                  <variable name="cRFD_3964_Start">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2500" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Startup</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cRFD_3964_Init">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2501" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Startup</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cRFD_3964_Wait">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2502" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wait for Job</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cRFD_3964_RxRead">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2504" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Read recived sign</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cRFD_3964_RxReadRdy">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2506" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Ackn. receiving ready</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cRFD_3964_RxData">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2508" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Recive Data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cRFD_3964_RxCheckData">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2510" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Achn. received Data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cRFD_3964_RxAck">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2512" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Send Ack to Slave</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cRFD_3964_RxAck2">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2514" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Send Ack to Slave</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cRFD_3964_TxRequest">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2550" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Send Request to Slave</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cRFD_3964_TxWait">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2552" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Send Wait answer</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cRFD_3964_TxSend">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2554" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Send Data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cRFD_3964_TxAck">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2556" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Send Wait for Ack</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cRFD_3964_Error">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2580" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error</xhtml>
                    </documentation>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Driver for communication protocoll 3964R
Description in Siemens manual from CP341, A5E02191070-03


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		23.07.2013		AVME/PRE	Start history
___________________________________________________________________________________________________*)

// Always
fbSerialLineControl(
	Mode:= TC2_SERIALCOM.ComSerialLineMode_t.SERIALLINEMODE_EL6_22B, 
	pComIn:= ADR(In_stEL6inData), 
	pComOut:= ADR(Out_stEL6outData), 
	SizeComIn:= SIZEOF(In_stEL6inData), 
	Error=&gt; bolErrSerialLineControl, 
	ErrorID=&gt; stErrSerialLineControl, 
	TxBuffer:= stTxBuffer, 
	RxBuffer:= stRxBuffer);
	
// Check timers
IF intState &gt;= cRFD_3964_Wait THEN
	fbZVZ(PT:= timZVZ);
	fbQVZ(PT:= timQVZ);
	fbWait(PT:= timWaitAck);

	// Check priority
	fbPriority(IN:= bolPriority, PT:=timWaitAck);
	IF (fbPriority.Q = TRUE) THEN
		bolPriority := FALSE;
	END_IF

END_IF
		
// Startup set correct Step
IF intState &lt; cRFD_3964_Start THEN
	intState := cRFD_3964_Start;
END_IF

// State Machine
CASE intState OF
	cRFD_3964_Start:
		// Clear Buffer
		FOR udiI := 0 TO SIZEOF(aRxData)-1 DO
			aRxData[udiI] := 0;
			aTxData[udiI] := 0;
		END_FOR
		bolSLGInitialized := FALSE;
		
		// Clear counters
		uinCountCall := 0;
		uinCountRetry := 0;
		
		bolInitRequest := FALSE;
		bolSendContinious := FALSE;
		
		
		// Next State
		IF (bolErrSerialLineControl = FALSE) AND (bolTimeout=TRUE) THEN
			intState := cRFD_3964_Init;
		ELSIF (bolErrSerialLineControl = TRUE) THEN
			intState := cRFD_3964_Error;
		END_IF

	// Wait for a job or received Data //	
	cRFD_3964_Init:	
		bolInitRequest := TRUE;
		
		IF (bolErrSerialLineControl = FALSE) AND ((In_stEL6inData.Status.2 = TRUE) OR (bolTimeout=TRUE)) THEN	// Initialisation Done  OR (bolTimeout=TRUE)
			intState := cRFD_3964_Wait;
		ELSIF (bolErrSerialLineControl = TRUE) THEN
			intState := cRFD_3964_Error;
		END_IF
	
	// Wait for a job or received Data //	
	cRFD_3964_Wait:	
		bolInitRequest := FALSE;
		bolSendNAK := FALSE;
		fbZVZ.IN := FALSE;
		fbQVZ.IN := FALSE;
		fbWait.IN := FALSE;
		
		fbSerialReceiveData(
		//	pPrefix:= , // Not used because no prefix in telegram
			LenPrefix:= 0, 
		//	pSuffix:= , // Not used because no suffix in telegram
			LenSuffix:= 0, 
			pReceiveData:= ADR(aRxData), 
			SizeReceiveData:= 255, 
			Timeout:= timWaitReceive, 
		//	Reset:= , 
			DataReceived=&gt; bolComDataReceived, 
			busy=&gt; bolComRecBusy, 
			Error=&gt; stErrReceive, 
			RxTimeout=&gt; bolErrReceive, 
			LenReceiveData=&gt; udiComSizeReceiveData, 
			RXbuffer:= stRxBuffer);
		
		//Check if Data is received
		IF bolComDataReceived = TRUE THEN
			intState := cRFD_3964_RxRead;
		ELSIF (InOut_bolSend = TRUE) AND (bolPriority = FALSE) THEN
			intState := cRFD_3964_TxRequest;
		END_IF
			
	// Read first signs if new data sending needed //	
	cRFD_3964_RxRead: 
		// Check reached Sign
		// Send ready for reach Data if STX is send and Buffer is ready to use
		fbWait.IN := TRUE;
		IF (((aRxData[0] = cSTX) OR (bolSLGInitialized = FALSE))  AND (InOut_bolRec = FALSE)) THEN 
			aTxData[0] := cDLE;
		ELSE
			aTxData[0] := cNAK;
		END_IF
		
		IF ((fbWait.Q = FALSE) OR (InOut_bolRec = TRUE)) THEN
			intState := cRFD_3964_RxReadRdy; 
			fbWait.IN := FALSE; 
		END_IF
		
	// Send Feedback //		
	cRFD_3964_RxReadRdy:
		fbZVZ.IN := TRUE; 

		IF fbZVZ.Q = TRUE THEN
			fbSerialSendData(
				pSendData:= ADR(aTxData), 
				Length:= 1, 
				Busy=&gt; bolComSendBusy, 
				Error=&gt; stErrSend, 
				TXbuffer:= stTxBuffer);
				bolSendContinious := TRUE;
		END_IF
			
		// Check transition
		IF (bolComSendBusy = FALSE) AND (bolSLGInitialized = TRUE) AND (fbZVZ.Q = TRUE) THEN		// AND (stErrSend = 0)
			IF (aTxData[0] = cDLE) THEN
				intState := cRFD_3964_RxData;
			ELSE
				intState := cRFD_3964_Wait;
			END_IF
		ELSIF ((bolComSendBusy = TRUE) OR (bolTimeout = TRUE)) AND (uinCountCall &lt; 10) AND (fbZVZ.Q = TRUE) THEN
			uinCountCall := uinCountCall + 1;
			intState := cRFD_3964_Wait;
		ELSIF ((bolComSendBusy = TRUE) OR (bolTimeout = TRUE)) AND (fbZVZ.Q = TRUE) THEN
			bolSendNAK := TRUE;
			intState := cRFD_3964_Error;
		END_IF
		
	// Read Data //	
	cRFD_3964_RxData:
		fbZVZ.IN := FALSE; 
		fbSerialReceiveData(
		//	pPrefix:= , // Not used because no prefix in telegram
			LenPrefix:= 0, 
		//	pSuffix:= , // Not used because no suffix in telegram
			LenSuffix:= 0, 
			pReceiveData:= ADR(aRxData), 
			SizeReceiveData:= 255, 
			Timeout:= timWaitReceive, 
		//	Reset:= , 
			DataReceived=&gt; bolComDataReceived, 
			busy=&gt; bolComRecBusy, 
			Error=&gt; stErrReceive, 
			RxTimeout=&gt; bolErrReceive, 
			LenReceiveData=&gt; udiComSizeReceiveData, 
			RXbuffer:= stRxBuffer);
				
		IF (bolComDataReceived = TRUE) AND (bolComRecBusy = FALSE) AND (udiComSizeReceiveData &lt;= 255)  THEN
			intState := cRFD_3964_RxCheckData;
		ELSIF ((bolTimeout = TRUE) OR (udiComSizeReceiveData &gt; 255)) THEN	 // OR (stErrReceive &lt;&gt; 0)
			bolSendNAK := TRUE;
			IF (uinCountCall &lt; 10) THEN
				uinCountCall := uinCountCall + 1;
				intState := cRFD_3964_RxAck;
			ELSE
				intState := cRFD_3964_Error;
			END_IF
		END_IF
	
	// Check Received Data //	
	cRFD_3964_RxCheckData:
		//minimal 1 Byte, ETX and BCC   	ETX is last sign for BCC					DLE is last sign for ETX
		IF (udiComSizeReceiveData &gt;= 4) THEN
			IF ((aRxData[udiComSizeReceiveData-2] = cETX) AND (aRxData[udiComSizeReceiveData-3] = cDLE)) THEN
				// Check BCC
				bytCheckValue := aRxData[0] XOR aRxData[1];
				FOR udiI := 2 TO  (udiComSizeReceiveData-2) DO
					bytCheckValue := bytCheckValue XOR aRxData[udiI];
				END_FOR
				
				IF (bytCheckValue = aRxData[udiComSizeReceiveData-1]) THEN //BCC OK
					// Copy Data
					FOR udiI := 0 TO (SIZEOF(aRxData)-1) DO
						In_pRxData^[udiI] := 0;
					END_FOR
					udiK := 0;
					FOR udiI := 0 TO udiComSizeReceiveData-4 DO
						In_pRxData^[udiK] := aRxData[udiI];
						IF (aRxData[udiI] = cDLE) AND (aRxData[udiI+1] = cDLE) THEN		// DLE Doubling, only take on DLE
							udiI := udiI+1;
						END_IF
						udiK := udiK + 1;
					END_FOR
					InOut_bolRec := TRUE;
					intState := cRFD_3964_RxAck;
				ELSE
					bolSendNAK := TRUE;				
					IF (uinCountCall &lt; 10) THEN
						uinCountCall := uinCountCall + 1;
						intState := cRFD_3964_RxAck;
					ELSE
						intState := cRFD_3964_Error;
					END_IF
				END_IF
			ELSE
				bolSendNAK := TRUE;				
				IF (uinCountCall &lt; 10) THEN
					uinCountCall := uinCountCall + 1;
					intState := cRFD_3964_RxAck;
				ELSE
					intState := cRFD_3964_Error;
				END_IF
			END_IF
		ELSIF aRxData[0] = cSTX THEN
			aTxData[0] := cDLE;
			intState := cRFD_3964_RxReadRdy;
		ELSE
			bolSendNAK := TRUE;				
			IF (uinCountCall &lt; 10) THEN
				uinCountCall := uinCountCall + 1;
				intState := cRFD_3964_RxAck;
			ELSE
				intState := cRFD_3964_Error;
			END_IF
		END_IF
	// SEND Acknowledge of received Data //
	cRFD_3964_RxAck:
		IF bolSendNAK = TRUE THEN
			aTxData[0] := cNAK;
		ELSE
			aTxData[0] := cDLE;
		END_IF
		
		fbZVZ.IN := TRUE; // Prepare for send step
		fbSerialSendData(
			pSendData:= ADR(aTxData), 
			Length:= 1, 
			Busy=&gt; bolComSendBusy, 
			Error=&gt; stErrSend, 
			TXbuffer:= stTxBuffer);
				
					
		// Check transition
		IF (bolComSendBusy = FALSE) AND (stErrSend = 0) AND (bolSendNAK = FALSE) THEN	//  AND (fbZVZ.Q = TRUE)
			uinCountCall := 0;
			bolSLGInitialized := TRUE;
			intState := cRFD_3964_Wait;
		ELSIF (bolComSendBusy = FALSE) AND (stErrSend = 0) AND (bolSendNAK = TRUE) THEN	//  AND (fbZVZ.Q = TRUE)
			intState := cRFD_3964_Wait;
		END_IF

	// SEND Acknowledge of received Data //
	cRFD_3964_RxAck2:
		IF bolSendNAK = TRUE THEN
			aTxData[0] := cNAK;
		ELSE
			aTxData[0] := cDLE;
		END_IF
		
		fbSerialSendData(
			pSendData:= ADR(aTxData), 
			Length:= 1, 
			Busy=&gt; bolComSendBusy, 
			Error=&gt; stErrSend, 
			TXbuffer:= stTxBuffer);
				
		// Check transition
		IF (bolComSendBusy = FALSE) AND (stErrSend = 0) AND (bolSendNAK = FALSE) AND (bolWait = TRUE) THEN
			uinCountCall := 0;
			bolSLGInitialized := TRUE;
			intState := cRFD_3964_Wait;
		ELSIF (bolComSendBusy = FALSE) AND (stErrSend = 0) AND (bolSendNAK = TRUE) AND (bolWait = TRUE) THEN
			intState := cRFD_3964_Wait;
		ELSIF ((bolComSendBusy = TRUE) OR (bolTimeout = TRUE)) THEN
			intState := cRFD_3964_Error;
		END_IF

/////////////////////////////////////////////////////////////////////
// Sending Data
	// Request a sending job at Slave //
	cRFD_3964_TxRequest:
		aTxData[0] := cSTX;
		fbSerialSendData(
			pSendData:= ADR(aTxData), 
			Length:= 1, 
			Busy=&gt; bolComSendBusy, 
			Error=&gt; stErrSend, 
			TXbuffer:= stTxBuffer);
		bolSendContinious := TRUE;
			
		// Check transition
		IF (bolComSendBusy = FALSE) AND (stErrSend = 0) THEN
			intState := cRFD_3964_TxWait;
		ELSIF ((bolComSendBusy = TRUE) OR (bolTimeout = TRUE)) THEN
			intState := cRFD_3964_Error;
		END_IF
		
	// Wait for answer ready //	
	cRFD_3964_TxWait:	
		fbSerialReceiveData(
		//	pPrefix:= , // Not used because no prefix in telegram
			LenPrefix:= 0, 
		//	pSuffix:= , // Not used because no suffix in telegram
			LenSuffix:= 0, 
			pReceiveData:= ADR(aRxData), 
			SizeReceiveData:= 1, 
			Timeout:= timWaitReceive, 
		//	Reset:= , 
			DataReceived=&gt; bolComDataReceived, 
			busy=&gt; bolComRecBusy, 
			Error=&gt; stErrReceive, 
			RxTimeout=&gt; bolErrReceive, 
			LenReceiveData=&gt; udiComSizeReceiveData, 
			RXbuffer:= stRxBuffer);
				
		IF (bolComDataReceived = TRUE) AND (bolComRecBusy = FALSE) AND (udiComSizeReceiveData &lt;= 255)  THEN
			IF aRxData[0] = cDLE THEN
				intState := cRFD_3964_TxSend;
			ELSIF aRxData[0] = cSTX THEN	// At Start of Text 
				intState := cRFD_3964_RxRead;
				bolPriority := TRUE;
			ELSE
				IF uinCountRetry &gt; 10 THEN
					intState := cRFD_3964_Error;
				ELSE 
					uinCountRetry := uinCountRetry + 1;
					intState := cRFD_3964_Wait;
				END_IF
			END_IF			
		ELSIF ((bolTimeout = TRUE) OR (udiComSizeReceiveData &gt; 255)) THEN
			IF uinCountCall &gt; 10 THEN
				intState := cRFD_3964_Error;
			ELSE
				IF bolSLGInitialized = TRUE THEN
					uinCountCall := uinCountCall + 1;
					intState := cRFD_3964_Wait;
				END_IF
			END_IF				
		END_IF
	
	// sending data //	
	cRFD_3964_TxSend:
		//only prepare data if not sending //
		IF (bolComSendBusy = FALSE) THEN
			bolDLEDouble := FALSE;
			udiI := 11;
			FOR udiI := 0 TO (SIZEOF(aTxData)-1) DO
				aTxData[udiI] := 0;
			END_FOR
			udiI := 0;
			udiK := 0;
			FOR udiK := 0 TO In_udiTxCount-1 DO
				aTxData[udiI] := In_pTxData^[udiK];
				IF aTxData[udiI] = cDLE THEN
					udiI := udiI + 1;
					aTxData[udiI] := cDLE;
					bolDLEDouble := TRUE;
				END_IF
				udiI := udiI + 1;				
			END_FOR
			aTxData[udiI] := cDLE;
			udiI := udiI + 1;
			//IF bolDLEDouble = TRUE THEN		// DLE Doubling at the end of the data if once uced as data
			//	aTxData[udiI] := cDLE;
			//	udiI := udiI + 1;				
			//END_IF
			aTxData[udiI] := cETX;
			
			bytCheckValue := aTxData[0] XOR aTxData[1];
			FOR udiK := 2 TO  udiI DO
				bytCheckValue := bytCheckValue XOR aTxData[udiK];
			END_FOR
			udiI := udiI + 1;
			aTxData[udiI] := bytCheckValue;
			udiI := udiI + 1;
		END_IF

		fbSerialSendData(
			pSendData:= ADR(aTxData), 
			Length:= udiI, 
			Busy=&gt; bolComSendBusy, 
			Error=&gt; stErrSend, 
			TXbuffer:= stTxBuffer);
			
		// Check transition
		IF (bolComSendBusy = FALSE) AND (stErrSend = 0) THEN
			intState := cRFD_3964_TxAck;
		ELSIF ((bolComSendBusy = TRUE) OR (bolTimeout = TRUE)) THEN
			IF uinCountRetry &gt; 10 THEN
				intState := cRFD_3964_Error;
			ELSE 
				uinCountRetry := uinCountRetry + 1;
				intState := cRFD_3964_Wait;
			END_IF
		END_IF
		
	// Wait for answer ready //	
	cRFD_3964_TxAck:
		fbSerialReceiveData(
		//	pPrefix:= , // Not used because no prefix in telegram
			LenPrefix:= 0, 
		//	pSuffix:= , // Not used because no suffix in telegram
			LenSuffix:= 0, 
			pReceiveData:= ADR(aRxData), 
			SizeReceiveData:= 255, 
			Timeout:= timWaitReceive, 
		//	Reset:= , 
			DataReceived=&gt; bolComDataReceived, 
			busy=&gt; bolComRecBusy, 
			Error=&gt; stErrReceive, 
			RxTimeout=&gt; bolErrReceive, 
			LenReceiveData=&gt; udiComSizeReceiveData, 
			RXbuffer:= stRxBuffer);
				
		IF (bolComDataReceived = TRUE) AND (bolComRecBusy = FALSE) AND (udiComSizeReceiveData &lt;= 255)  THEN
			IF aRxData[0] = cDLE THEN
				intState := cRFD_3964_Wait;
				InOut_bolSend := FALSE;
				bolSLGInitialized := TRUE;
			ELSE
				IF uinCountRetry &gt; 10 THEN
					intState := cRFD_3964_Error;
				ELSE 
					uinCountRetry := uinCountRetry + 1;
					intState := cRFD_3964_Wait;
				END_IF
			END_IF			
		ELSIF ((bolTimeout = TRUE) OR (udiComSizeReceiveData &gt; 255)) THEN	 // OR (stErrReceive &lt;&gt; 0)
			IF uinCountRetry &gt; 10 THEN
				intState := cRFD_3964_Error;
			ELSE
				uinCountRetry := uinCountRetry + 1;
				intState := cRFD_3964_Wait;
			END_IF				
		END_IF
	

////////////////////////////////////////////////////////////		
		// Error State //
		cRFD_3964_Error:
			// Send correct information
			IF bolErrSerialLineControl = TRUE THEN
				Out_udiErrorCode := INT_TO_UDINT(stErrSerialLineControl);
				Out_bolComError := TRUE;
			ELSIF bolErrSend = TRUE THEN
				Out_udiErrorCode := INT_TO_UDINT(stErrSend);				
				Out_bolComError := TRUE;
			ELSIF bolTimeout = TRUE THEN
				Out_bolProtocolErr := TRUE;
			ELSIF (Out_bolComError = FALSE) AND (Out_bolProtocolErr = FALSE) THEN
				Out_bolComError := TRUE;
			END_IF
			
			// Send NAK to RFID Reader
			IF bolSendNAK = TRUE THEN
				aTxData[0] := cNAK;
				fbSerialSendData(
					pSendData:= ADR(aTxData), 
					Length:= 1, 
					Busy=&gt; bolComSendBusy, 
					Error=&gt; stErrSend, 
					TXbuffer:= stTxBuffer);
					
				IF bolComSendBusy = FALSE THEN
					bolSendNAK := FALSE;
				END_IF
			END_IF
			
			// Acknowledge reset Error bit and informations
			IF (In_bolErrorAck = TRUE) OR (bolIntReset=TRUE) THEN
				intState := cRFD_3964_Wait;
				bolSendNAK := FALSE;
				bolErrSerialLineControl := FALSE; 
				bolErrReceive := FALSE;
				bolErrSend := FALSE;
				bolTimeout := FALSE;
				Out_udiErrorCode := 0;
				Out_bolComError := FALSE;
				Out_bolProtocolErr := FALSE;
				uinCountCall := 0;
				uinCountRetry := 0;
				bolIntReset := FALSE;
				In_bolErrorAck := FALSE;
				bolInitRequest := FALSE;
				InOut_bolRec := FALSE;
				InOut_bolSend := FALSE;
				bolSLGInitialized := FALSE;
			END_IF
		
END_CASE

// Write parallel Outputs to commando word
//Out_stEL6outData.Ctrl.2 := bolInitRequest;
Out_stEL6outData.Ctrl.3 := bolSendContinious;

// make History of States
IF intStateOld &lt;&gt; intState THEN
	udiStateLoop := 9;
	WHILE udiStateLoop &gt; 0 DO
		a_intStateHist[udiStateLoop] := a_intStateHist[udiStateLoop-1];
		udiStateLoop := udiStateLoop-1;
	END_WHILE
	a_intStateHist[0] := intState;
	intStateOld := intState;
	// Time Out control
	// Check timeout
	fbTon(IN:= FALSE, PT:= timQVZ, Q=&gt;bolTimeout );
ELSE
	IF intState &lt;&gt; cRFD_3964_Error THEN
		fbTon(IN:= TRUE, PT:= timQVZ, Q=&gt;bolTimeout );
	END_IF
END_IF</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9bceef52-2457-40a4-b7ac-c12c1c6d63b4</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_ExCom" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_pRxData">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="255" />
                            <baseType>
                              <BYTE />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pointer to Received Data Array</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_pTxData">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="255" />
                            <baseType>
                              <BYTE />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pointer to Sending Data Array</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_udiTxCount">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Amounth of sending data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_bolErrorAck">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error Acknowledge </xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <inOutVars>
                  <variable name="InOut_bolSend">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Command to send Data 1=command; 0=Done</xhtml>
                    </documentation>
                  </variable>
                  <variable name="InOut_bolRec">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Command Data received 1=received; 0=Done=Ready for next Data</xhtml>
                    </documentation>
                  </variable>
                </inOutVars>
                <outputVars>
                  <variable name="Out_udiRxCount">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Amounth of received data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_bolComError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Serial interface communication error</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_bolProtocolErr">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error in protocoll procedure</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_udiErrorCode">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error information to master</xhtml>
                    </documentation>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="In_stEL6inData" address="%I*">
                    <type>
                      <derived name="TC2_SERIALCOM.EL6inData22B" />
                    </type>
                  </variable>
                  <variable name="Out_stEL6outData" address="%Q*">
                    <type>
                      <derived name="TC2_SERIALCOM.EL6outData22B" />
                    </type>
                  </variable>
                  <variable name="udiI">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Internal Variables</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiK">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Local variable for loops</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolIntReset">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Internal Error Reset</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinCountCall">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Count call trials</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinCountRetry">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Count call Retrys</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytCheckValue">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temporary value for cecking the sum</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSLGInitialized">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Antenna is initializied, until it is not initializied, it send 16#02 in all possible baudrates</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolTimeout">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Check Timeout</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolWait">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Check Timeout</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSendNAK">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Send NAK needed</xhtml>
                    </documentation>
                  </variable>
                  <variable name="timWaitReceive">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#5ms" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Receive Wait signs</xhtml>
                    </documentation>
                  </variable>
                  <variable name="timWaitAck">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#400ms" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Receive Wait signs</xhtml>
                    </documentation>
                  </variable>
                  <variable name="timZVZ">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#45ms" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sign delay time</xhtml>
                    </documentation>
                  </variable>
                  <variable name="timQVZ">
                    <type>
                      <TIME />
                    </type>
                    <initialValue>
                      <simpleValue value="TIME#145ms" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Time ACK delay</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolInitRequest">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Initialisation of the HW card</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSendContinious">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Setting of the HW Card</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolPriority">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Priority at RFID</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolDLEDouble">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Send DLE doubletimes</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolComDataReceived">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> New data received</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolComRecBusy">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> receiving busy</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiComSizeReceiveData">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Received Data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolComSendBusy">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sending busy</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolErrSerialLineControl">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error at serial line control</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stErrSerialLineControl">
                    <type>
                      <derived name="ComError_t" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error at serial line control</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolErrReceive">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error at serial line  receiving data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stErrReceive">
                    <type>
                      <derived name="ComError_t" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error at serial line  receiving data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolErrSend">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error at serial line sending data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stErrSend">
                    <type>
                      <derived name="ComError_t" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error at serial line sending data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aRxData">
                    <type>
                      <array>
                        <dimension lower="0" upper="255" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Define Buffer for preparations</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aTxData">
                    <type>
                      <array>
                        <dimension lower="0" upper="255" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="stRxBuffer">
                    <type>
                      <derived name="TC2_SERIALCOM.ComBuffer" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Define Buffer for Funciton</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stTxBuffer">
                    <type>
                      <derived name="TC2_SERIALCOM.ComBuffer" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Transmit data buffer; used with all receive function blocks </xhtml>
                    </documentation>
                  </variable>
                  <variable name="intState">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sub Statemachine</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intStateOld">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                  <variable name="udiStateLoop">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="a_intStateHist">
                    <type>
                      <array>
                        <dimension lower="0" upper="9" />
                        <baseType>
                          <INT />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="udiStateDebug">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiStateDebugMax">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="fbSerialLineControl">
                    <type>
                      <derived name="TC2_SERIALCOM.SerialLineControl" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Function for serial communication</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbSerialReceiveData">
                    <type>
                      <derived name="TC2_SERIALCOM.ReceiveData" />
                    </type>
                  </variable>
                  <variable name="fbSerialSendData">
                    <type>
                      <derived name="TC2_SERIALCOM.SendData" />
                    </type>
                  </variable>
                  <variable name="fbTon">
                    <type>
                      <derived name="TC2_STANDARD.TON" />
                    </type>
                  </variable>
                  <variable name="fbWait">
                    <type>
                      <derived name="TC2_STANDARD.TON" />
                    </type>
                  </variable>
                </localVars>
                <localVars constant="true">
                  <variable name="cExCom_Start">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2500" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Startup</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cExCom_Init">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2501" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Startup</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cExCom_Wait">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2502" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Wait for Job</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cExCom_RxRead">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2504" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Read recived sign</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cExCom_TxPrepare">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2550" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Send Data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cExCom_TxSend">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2552" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Send Data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cExCom_Error">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="2580" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error</xhtml>
                    </documentation>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Driver for communication protocoll 3964R
Description in Siemens manual from CP341, A5E02191070-03


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		23.07.2013		AVME/PRE	Start history
___________________________________________________________________________________________________*)

// Always
fbSerialLineControl(
	Mode:= TC2_SERIALCOM.ComSerialLineMode_t.SERIALLINEMODE_EL6_22B, 
	pComIn:= ADR(In_stEL6inData), 
	pComOut:= ADR(Out_stEL6outData), 
	SizeComIn:= SIZEOF(In_stEL6inData), 
	Error=&gt; bolErrSerialLineControl, 
	ErrorID=&gt; stErrSerialLineControl, 
	TxBuffer:= stTxBuffer, 
	RxBuffer:= stRxBuffer);
	
// Check timers
IF intState &gt;= cExCom_Wait THEN
	fbWait(PT:= timWaitAck);
END_IF
		
// Startup set correct Step
IF intState &lt; cExCom_Start THEN
	intState := cExCom_Start;
END_IF

// State Machine
CASE intState OF
	cExCom_Start:
		// Clear Buffer
		FOR udiI := 0 TO 255 DO
			aRxData[udiI] := 0;
			aTxData[udiI] := 0;
		END_FOR
		bolSLGInitialized := FALSE;
		
		// Clear counters
		uinCountCall := 0;
		uinCountRetry := 0;
		
		bolInitRequest := FALSE;
		bolSendContinious := FALSE;
		
		
		// Next State
		IF (bolErrSerialLineControl = FALSE) AND (bolTimeout=TRUE) THEN
			intState := cExCom_Init;
		ELSIF (bolErrSerialLineControl = TRUE) THEN
			intState := cExCom_Error;
		END_IF

	// Wait for a job or received Data //	
	cExCom_Init:	
		bolInitRequest := TRUE;
		
		IF (bolErrSerialLineControl = FALSE) AND (bolTimeout=TRUE) THEN	// Initialisation Done
			intState := cExCom_Wait;
		ELSIF (bolErrSerialLineControl = TRUE) THEN
			intState := cExCom_Error;
		END_IF
	
	// Wait for a job or received Data //	
	cExCom_Wait:	
		bolInitRequest := FALSE;
		bolSendNAK := FALSE;
		fbWait.IN := FALSE;
		
		fbSerialReceiveData(
		//	pPrefix:= , // Not used because no prefix in telegram
			LenPrefix:= 0, 
		//	pSuffix:= , // Not used because no suffix in telegram
			LenSuffix:= 0, 
			pReceiveData:= ADR(aRxData), 
			SizeReceiveData:= 255, 
			Timeout:= timWaitReceive, 
		//	Reset:= , 
			DataReceived=&gt; bolComDataReceived, 
			busy=&gt; bolComRecBusy, 
			Error=&gt; stErrReceive, 
			RxTimeout=&gt; bolErrReceive, 
			LenReceiveData=&gt; udiComSizeReceiveData, 
			RXbuffer:= stRxBuffer);
		
		//Check if Data is received
		IF bolComDataReceived = TRUE THEN
			intState := cExCom_RxRead;
		ELSIF (InOut_bolSend = TRUE) AND (bolPriority = FALSE) THEN
			intState := cExCom_TxPrepare;
		END_IF
			
	// Read first signs if new data sending needed //	
	cExCom_RxRead: 
		// Read Signs
		IF (udiComSizeReceiveData &gt;0) THEN
			// Copy Data
			FOR udiI := 0 TO (SIZEOF(aRxData)-1) DO
				In_pRxData^[udiI] := 0;
			END_FOR
			FOR udiI := 0 TO udiComSizeReceiveData-1 DO
				In_pRxData^[udiI] := aRxData[udiI];
			END_FOR
			InOut_bolRec := TRUE;
			Out_udiRxCount := udiComSizeReceiveData;
		END_IF
		
		intState := cExCom_Wait;

		
	// Send Data //		
	cExCom_TxPrepare:
		FOR udiI := 0 TO (SIZEOF(aTxData)-1) DO
			aTxData[udiI] := 0;
		END_FOR
		FOR udiI := 0 TO In_udiTxCount-1 DO
			aTxData[udiI] := In_pTxData^[udiI];
		END_FOR
		intState := cExCom_TxSend;

	cExCom_TxSend:	
		fbSerialSendData(
			pSendData:= ADR(aTxData), 
			Length:= In_udiTxCount, 
			Busy=&gt; bolComSendBusy, 
			Error=&gt; stErrSend, 
			TXbuffer:= stTxBuffer);
			bolSendContinious := TRUE;

			
		// Check transition
		IF (bolComSendBusy = FALSE) AND (stErrSend = 0) THEN
			intState := cExCom_Wait;
			InOut_bolSend := FALSE;
		ELSIF ((bolComSendBusy = TRUE) AND (bolTimeout = TRUE)) OR (stErrSend &lt;&gt; 0) THEN
			bolErrSend := TRUE;
			intState := cExCom_Error;
		END_IF
		

////////////////////////////////////////////////////////////		
		// Error State //
		cExCom_Error:
			IF bolErrSerialLineControl = TRUE THEN
				Out_udiErrorCode := INT_TO_UDINT(stErrSerialLineControl);
				Out_bolComError := TRUE;
			ELSIF bolErrSend = TRUE THEN
				Out_udiErrorCode := INT_TO_UDINT(stErrSend);				
				Out_bolComError := TRUE;
			ELSIF bolTimeout = TRUE THEN
				Out_bolProtocolErr := TRUE;
			ELSIF (Out_bolComError = FALSE) AND (Out_bolProtocolErr = FALSE) THEN
				Out_bolComError := TRUE;
			END_IF
		
			
			IF (In_bolErrorAck = TRUE) OR (bolIntReset=TRUE) THEN
				intState := cExCom_Wait;
				bolErrSerialLineControl := FALSE; 
				bolErrReceive := FALSE;
				bolErrSend := FALSE;
				bolTimeout := FALSE;
				Out_udiErrorCode := 0;
				Out_bolComError := FALSE;
				Out_bolProtocolErr := FALSE;
				uinCountCall := 0;
				uinCountRetry := 0;
				In_bolErrorAck := FALSE;
				bolInitRequest := FALSE;
			END_IF
		
END_CASE

// Write parallel Outputs to commando word
//Out_stEL6outData.Ctrl.2 := bolInitRequest;
//Out_stEL6outData.Ctrl.3 := bolSendContinious;

// make History of States
IF intStateOld &lt;&gt; intState THEN
	udiStateLoop := 9;
	WHILE udiStateLoop &gt; 0 DO
		a_intStateHist[udiStateLoop] := a_intStateHist[udiStateLoop-1];
		udiStateLoop := udiStateLoop-1;
	END_WHILE
	a_intStateHist[0] := intState;
	intStateOld := intState;
	// Time Out control
	// Check timeout
	fbTon(IN:= FALSE, PT:= timQVZ, Q=&gt;bolTimeout );
ELSE
	IF intState &lt;&gt; cExCom_Error THEN
		fbTon(IN:= TRUE, PT:= timQVZ, Q=&gt;bolTimeout );
	END_IF
END_IF</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>0692bf64-22ff-43f8-b9f3-9b97a0565cc5</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_HEXSTRING_TO_ULINT" pouType="function">
              <interface>
                <returnType>
                  <ULINT />
                </returnType>
                <inputVars>
                  <variable name="in_strSTRING">
                    <type>
                      <string />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="uinLenght">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="intI">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="uliFact">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="usiSign">
                    <type>
                      <USINT />
                    </type>
                  </variable>
                  <variable name="uliReturn">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="ausiTemp">
                    <type>
                      <array>
                        <dimension lower="0" upper="15" />
                        <baseType>
                          <USINT />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">uinLenght := INT_TO_UINT(TC2_STANDARD.LEN(in_strSTRING));
uliReturn := 0;

IF (uinLenght &gt; 16) THEN
	FB_HEXSTRING_TO_ULINT := 0;
	
ELSE
	MEMCPY(destAddr:=ADR(ausiTemp), srcAddr:=ADR(in_strSTRING), n:=uinLenght);		// COPY to buffer
	intI := UINT_TO_INT(uinLenght)-1;
	uliFact := 1;
	WHILE intI &gt;= 0 DO
		IF (ausiTemp[intI] &gt;= 16#30) AND (ausiTemp[intI] &lt;= 16#39) THEN		// 0=16#30 ...9=16#39
			usiSign := ausiTemp[intI] - 16#30;
		ELSIF (ausiTemp[intI] &gt;= 16#41) AND (ausiTemp[intI] &lt;= 16#46) THEN		// A=16#41 ...F=16#46
			usiSign := ausiTemp[intI] - 55;
		ELSIF (ausiTemp[intI] &gt;= 16#61) AND (ausiTemp[intI] &lt;= 16#66) THEN		// a=16#61 ...f=16#66
			usiSign := ausiTemp[intI] - 87;
		ELSE
			FB_HEXSTRING_TO_ULINT := 0;
			RETURN;
		END_IF
		
		uliReturn := uliReturn + usiSign * uliFact;
		intI := intI - 1;
		uliFact := uliFact * 16;
	END_WHILE
		
END_IF

	FB_HEXSTRING_TO_ULINT := uliReturn;
</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>a360a7e4-3c1e-46a3-b61b-31cb88488a8b</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_RFD" pouType="functionBlock">
              <interface>
                <localVars>
                  <variable name="bolActivate">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="bolInitDone">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bolInitComDone">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bolFB_ComError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> communication FB has a error</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolComSend">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Communication sending is busy to the serial Card</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiComSizeSendData">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Size of Sendingdata</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolComDataReceived">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Communication Data Received</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiComSizeReceiveData">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Size of received Data from serial interface</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSdoBusy">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Sdo Setting is busy to the serial Card</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSdoExecute">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Sdo Setting executing</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolAntennaJobDone">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Antenna Job done</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolReadDone">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Job Reading is done</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolWriteDone">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Job Writing is done</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolResetJobDone">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Job Reset SLG is done</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolResetJobError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Job Reset SLG has Error</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSLGJobDone">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Job Read SLG State is done</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolMDSJobDone">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Job Read SLG State is done</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSdoErrorNbr">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Information to SDO Error</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udi3964R_Error_Nbr">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Information to Communication over 3964 protocol Error</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiResetCount">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Count Reset cycles</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiJobCount">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Count Job Tryals</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTimeInState_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Time in State ms</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytRFIDState">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> State information from RF ID Tag</xhtml>
                    </documentation>
                  </variable>
                  <variable name="SIf">
                    <type>
                      <derived name="T_RFD" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> driver specific interface</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aRxData">
                    <type>
                      <array>
                        <dimension lower="0" upper="255" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> get direct Buffer from Interface
 access over mapping!! {attribute 'TcLinkTo':='TIID^Device 1 (EtherCAT)^Box 1 (SGDV-E1 CoE Drive)^2nd Transmit PDO mapping^Status word'}</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aTxData">
                    <type>
                      <array>
                        <dimension lower="0" upper="255" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="fbEcCoeSdoWrite">
                    <type>
                      <derived name="TC2_ETHERCAT.FB_EcCoESdoWrite" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Function for serial communication</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbCom_3964R">
                    <type>
                      <derived name="FB_Com_3964R" />
                    </type>
                  </variable>
                  <variable name="stStateMachine">
                    <type>
                      <derived name="T_RFD_StateMachine" />
                    </type>
                  </variable>
                  <variable name="stSubStateMachine">
                    <type>
                      <derived name="T_RFD_StateMachine" />
                    </type>
                  </variable>
                  <variable name="usiCase">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">case variable</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiCaseScmd">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">case variable for service cmd's</xhtml>
                    </documentation>
                  </variable>
                  <variable name="sinValue">
                    <type>
                      <SINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> help values for parameter handling</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intValue">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="dinValue">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="usiValue">
                    <type>
                      <USINT />
                    </type>
                  </variable>
                  <variable name="uinValue">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="udiValue">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiI">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiLoopBuffer">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiLoopData">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiLoopSend">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="fbTimeoutState">
                    <type>
                      <derived name="TON" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Driver for Simatic RFID Reader and Writer RF310R 6GT2801-1AB10


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		09.07.2013		AVME/PRE	Start history
0.00.2		24.09.2013		AVME/KVO	Parameter init from element controller to driver
___________________________________________________________________________________________________*)


IF (bolActivate) THEN // cyclic call enabled
	
	IF (bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
		
		StateMachine_Service(); // handles asynchron service commands
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
	
END_IF;</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OffBusy" ObjectId="03703202-28a8-4d2a-a1b0-5332d30b71cd">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OffBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
			IF SIf.stStatus.bolOn = TRUE THEN
				stSubStateMachine.intState := cRFD_SUB_Prepare;		// First Time set Baudrate and communication Settings
				stSubStateMachine.intStateNext := cRFD_SUB_Prepare;		// First Time set Baudrate and communication Settings
			ELSE
				stSubStateMachine.intState := cRFD_SUB_SubStatesEnd;
				stSubStateMachine.intStateNext := cRFD_SUB_SubStatesEnd;
			END_IF
			bolAntennaJobDone := FALSE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
		
		// main statemachine of base controller
		CASE stSubStateMachine.intState OF
			cRFD_SUB_Prepare: 
				FOR udiI := 0 TO SIZEOF(aTxData) DO
					aTxData[udiI] := 0;
				END_FOR
				
				/// Send Command to set antenna OFF
				// Byte 0 =&gt; Lenght of telegram
				aTxData[0] := 3;
				// Byte 1 =&gt; Command Antenna job
				aTxData[1] := 16#A;
				// Byte 2 =&gt; Spare
				aTxData[2] := 0;
				// Byte 3 =&gt; Mode 1=On; 2=Off
				aTxData[3] := 2;
				
				udiComSizeSendData := 4;
				bolComSend := TRUE;
				stSubStateMachine.intStateNext := cRFD_SUB_SendBusy;
		
		cRFD_SUB_SendBusy:		
				IF ((SIf.stErr.bolComError = FALSE) AND (bolComSend = FALSE)) THEN
					stSubStateMachine.intStateNext := cRFD_SUB_WaitAnswer;
				END_IF

			cRFD_SUB_WaitAnswer:
				IF (bolAntennaJobDone = TRUE) THEN
					SIf.stStatus.bolOn := FALSE;
					stSubStateMachine.intStateNext := cRFD_SUB_SubStatesEnd;
				END_IF
				
			cRFD_SUB_SubStatesEnd:
				;
		END_CASE
		
		stSubStateMachine.intStateLastCycle := stSubStateMachine.intState;
		IF (stSubStateMachine.intState&lt;&gt;stSubStateMachine.intStateNext) THEN
			stSubStateMachine.intState := stSubStateMachine.intStateNext;  // set next state for next cycle
		END_IF
		

		// State Change Condition
		IF (stSubStateMachine.intStateNext = cRFD_SUB_SubStatesEnd) THEN
			stStateMachine.intStateNext := cRFD_STA_Off;
		END_IF
		
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		SIf.intCmd := cRFD_CMD_DONE;
		SIf.stStatus.bolOn := FALSE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="3a4f3afc-c211-4c62-93a6-011c55a0a61c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="udiTaskCnt">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                        <variable name="ii">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf.intCmd := cRFD_CMD_DONE;
SIf.intServiceCmd := cRFD_CMD_DONE; // not used at the moment
stStateMachine.intStateLastCycle  := cRFD_CMD_DONE; //EntryStop of power BASE_PLC.OFF enable

// Vaild Values into the Configuration
SIf.stCfg.usiFtimSetting := E_Typ_Ftim.RF300;

// Communication Settings
SIf.stCfg.eTyp := E_Typ_RFW.RF310R;
SIf.stCfg.uinBaudrate := INT_TO_USINT(E_Typ_Baudrate.baud_57600);
SIf.stCfg.stNetId := '192.168.70.26.3.1';
SIf.stCfg.uinSlaveAddr := 1002;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_MDSBusy" ObjectId="3ede119d-38cd-4cb9-b505-5d1e5aedf1bb">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_MDSBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
			stSubStateMachine.intState := cRFD_SUB_Write1;
			stSubStateMachine.intStateNext := cRFD_SUB_Write1;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
		CASE stSubStateMachine.intState OF
			cRFD_SUB_Write1:
				// Byte 0 =&gt; Lenght
				aTxData[0] := 5;
				// Byte 1 =&gt; Command read 4=single; 14=continious
				aTxData[1] := 16#B;
				// Byte 2 =&gt; Spare
				aTxData[2] := 0;
				// Byte 3 =&gt; Mode
				aTxData[3] := 3;
				// Byte 4 =&gt; Spare
				aTxData[4] := 0;
				// Byte 5 =&gt; Spare
				aTxData[5] := 0; 

						
				udiComSizeSendData := 6;
				bolComSend := TRUE;	
				stSubStateMachine.intState := cRFD_SUB_Wait1;
		
			cRFD_SUB_Wait1:
				IF bolMDSJobDone = TRUE THEN
					stSubStateMachine.intState := cRFD_SUB_SubStatesEnd;
					bolMDSJobDone := FALSE;
				END_IF
		cRFD_SUB_SubStatesEnd:
				;
				
		END_CASE
		
		// State Change Condition
		IF (SIf.stErr.bolComError = TRUE) OR ((SIf.stErr.bolRFIDError = TRUE) AND (udiJobCount &gt; SIf.stCfg.udiRetry)) THEN
			stStateMachine.intStateNext := cRFD_STA_Error;
		ELSIF (SIf.stErr.bolRFIDError = TRUE) THEN
			udiJobCount := udiJobCount + 1;
			stStateMachine.intStateLastCycle := 0; // Startcycle again
		ELSIF (stSubStateMachine.intState = cRFD_SUB_SubStatesEnd) THEN
			udiJobCount := 0;
			stStateMachine.intStateNext := cRFD_STA_WaitForJob;
		END_IF
		
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		SIf.intCmd := cRFD_CMD_DONE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_WaitForJob" ObjectId="4d0b986f-c899-4646-821a-7771a4512614">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_WaitForJob" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		
		// State Change Condition
		IF (FALSE) THEN
			stStateMachine.intStateNext := cRFD_STA_Error;
		ELSIF (SIf.intCmd=cRFD_CMD_Read) THEN
			stStateMachine.intStateNext := cRFD_STA_ReadBusy;
		ELSIF (SIf.intCmd=cRFD_CMD_CTRL_ON) THEN
			stStateMachine.intStateNext := cRFD_STA_PowerOnBusy;
		ELSIF (SIf.intCmd=cRFD_CMD_Write) THEN
			stStateMachine.intStateNext := cRFD_STA_WriteBusy;
		ELSIF (SIf.intCmd=cRFD_CMD_MDS) THEN
			stStateMachine.intStateNext := cRFD_STA_MDSBusy;
		ELSIF (SIf.intCmd=cRFD_CMD_SLG) THEN
			stStateMachine.intStateNext := cRFD_STA_SLGBusy;
		ELSIF (SIf.intCmd=cRFD_CMD_CTRL_OFF) THEN
			stStateMachine.intStateNext := cRFD_STA_OFFBusy;
		ELSIF (SIf.intCmd=cRFD_STA_CheckBusy) THEN
			stStateMachine.intStateNext := cRFD_STA_CheckBusy;
		END_IF
		
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CycleEndDuty" ObjectId="59e56c20-bece-436c-8448-36d6f279dc82">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CycleEndDuty" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf.strState := THIS^.getCmdState(intCmdState:=stStateMachine.intState,bolState:=TRUE);

IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
	stStateMachine.intState := stStateMachine.intStateNext;  // set next state for next cycle
END_IF

(***************************************************************
        Function Block Calls
***************************************************************)
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="5c4f1ecf-65dd-4c86-b3ac-a58e77e6cbb7">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// get string cmd/state string information in runtime
IF (bolState=FALSE) THEN
	// cmd's
	CASE intCmdState OF
		cRFD_CMD_DONE: 
			getCmdState := 'cRFD_CMD_DONE';
		cRFD_CMD_CTRL_ON: 
			getCmdState := 'cRFD_CMD_CTRL_ON';
		cRFD_CMD_CTRL_OFF: 
			getCmdState := 'cRFD_CMD_CTRL_OFF';
		cRFD_CMD_Write: 
			getCmdState := 'cRFD_CMD_Write';
		cRFD_CMD_Read: 
			getCmdState := 'cRFD_CMD_Read';
		cRFD_CMD_MDS: 
			getCmdState := 'cRFD_CMD_MDS';
		cRFD_CMD_SLG: 
			getCmdState := 'cRFD_CMD_SLG';
	END_CASE;
ELSE

// States
	CASE intCmdState OF
		cRFD_STA_Error: 
			getCmdState := 'cRFD_STA_Error';
		cRFD_STA_WaitForJob: 
			getCmdState := 'cRFD_STA_WaitForJob';
		cRFD_STA_PowerOnBusy: 
			getCmdState := 'cRFD_STA_PowerOnBusy';
		cRFD_STA_OffBusy: 
			getCmdState := 'cRFD_STA_OffBusy';
		cRFD_STA_Off: 
			getCmdState := 'cRFD_STA_Off';
		cRFD_STA_WriteBusy: 
			getCmdState := 'cRFD_STA_WriteBusy';
		cRFD_STA_ReadBusy: 
			getCmdState := 'cRFD_STA_ReadBusy';
		cRFD_STA_TagInitBusy: 
			getCmdState := 'cRFD_STA_TagInitBusy';
		cRFD_STA_CheckBusy: 
			getCmdState := 'cRFD_STA_CheckBusy';
		cRFD_STA_MDSBusy: 
			getCmdState := 'cRFD_STA_MDSBusy';
		cRFD_STA_SLGBusy: 
			getCmdState := 'cRFD_STA_SLGBusy';

	END_CASE;
END_IF

</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_Off" ObjectId="5e1fa1e9-9cfb-43ec-bc63-2d4261fdd039">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_Off" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		
		// State Change Condition
		IF (FALSE) THEN
			stStateMachine.intStateNext := cRFD_STA_Error;
		ELSIF (SIf.intCmd&lt;&gt;RFD_Cmd.cRFD_CMD_DONE) THEN
			stStateMachine.intStateNext := cRFD_STA_PowerOnBusy;
		END_IF
		
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_SLGBusy" ObjectId="63d0ab9e-464f-46dc-af42-14ae4e8edd3d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_SLGBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
			stSubStateMachine.intState := cRFD_SUB_Write1;
			stSubStateMachine.intStateNext := cRFD_SUB_Write1;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
		CASE stSubStateMachine.intState OF
			cRFD_SUB_Write1:
				// Byte 0 =&gt; Lenght
				aTxData[0] := 6;
				// Byte 1 =&gt; Command read 4=single; 14=continious
				aTxData[1] := 4;
				// Byte 2 =&gt; Spare
				aTxData[2] := 0;
				// Byte 3 =&gt; Mode
				aTxData[3] := 1;
				// Byte 4 =&gt; Spare
				aTxData[4] := 0;
				// Byte 5 =&gt; Spare
				aTxData[5] := 0; 
				// Byte 6 =&gt; Spare
				aTxData[6] := 0; 
						
				udiComSizeSendData := 7;
				bolComSend := TRUE;	
				stSubStateMachine.intState := cRFD_SUB_Wait1;
		
			cRFD_SUB_Wait1:
				IF bolSLGJobDone = TRUE THEN
					stSubStateMachine.intState := cRFD_SUB_Write6;
					bolSLGJobDone := FALSE;
				END_IF
			cRFD_SUB_Write6:
				// Byte 0 =&gt; Lenght
				aTxData[0] := 6;
				// Byte 1 =&gt; Command read 4=single; 14=continious
				aTxData[1] := 4;
				// Byte 2 =&gt; Spare
				aTxData[2] := 0;
				// Byte 3 =&gt; Mode
				aTxData[3] := 6;
				// Byte 4 =&gt; Spare
				aTxData[4] := 0;
				// Byte 5 =&gt; Spare
				aTxData[5] := 0; 
				// Byte 6 =&gt; Spare
				aTxData[6] := 0; 
						
				udiComSizeSendData := 7;
				bolComSend := TRUE;	
				stSubStateMachine.intState := cRFD_SUB_Wait6;
		
			cRFD_SUB_Wait6:
				IF bolSLGJobDone = TRUE THEN
					stSubStateMachine.intState := cRFD_SUB_SubStatesEnd;
					bolSLGJobDone := FALSE;
				END_IF
			
			cRFD_SUB_SubStatesEnd:
				;
				
		END_CASE
		
		// State Change Condition
		IF (SIf.stErr.bolComError = TRUE) OR ((SIf.stErr.bolRFIDError = TRUE) AND (udiJobCount &gt; SIf.stCfg.udiRetry)) THEN
			stStateMachine.intStateNext := cRFD_STA_Error;
		ELSIF (SIf.stErr.bolRFIDError = TRUE) THEN
			udiJobCount := udiJobCount + 1;
			stStateMachine.intStateLastCycle := 0; // Startcycle again
		ELSIF (stSubStateMachine.intState = cRFD_SUB_SubStatesEnd) THEN
			udiJobCount := 0;
			stStateMachine.intStateNext := cRFD_STA_WaitForJob;
		END_IF
		
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		SIf.intCmd := cRFD_CMD_DONE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="8a227cbf-355b-4819-ba87-ac46a9b85d5d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// one time first cyclic call
;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CycleStartDuty" ObjectId="9170cccc-2464-4937-8f3b-792a481b31e2">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CycleStartDuty" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
fbCom_3964R(
	In_pRxData:= ADR(aRxData), 
	In_pTxData:= ADR(aTxData), 
	In_udiTxCount:= udiComSizeSendData, 
	In_bolErrorAck:= SIf.stErr.bolErrAck, 
	InOut_bolSend:= bolComSend, 
	InOut_bolRec:= bolComDataReceived, 
	Out_udiRxCount=&gt; udiComSizeReceiveData, 
	Out_bolComError=&gt; bolFB_ComError, 
	Out_bolProtocolErr=&gt; SIf.stErr.bolProtcolError, 
	Out_udiErrorCode=&gt; udi3964R_Error_Nbr);

	IF bolFB_ComError = TRUE THEN
		SIf.stErr.bolComError := TRUE;
		SIf.stErr.udiErrorID := udi3964R_Error_Nbr;
	END_IF
(* program code at the beginning of each PLC cycle *)
IF bolInitComDone=TRUE THEN
	// Received Data checking and interpreting
	IF bolComDataReceived = TRUE THEN
		CASE aRxData[1] OF
			0:		//16#00 Startup Telegram OR Reset
				IF aRxData[0]= 16#02 THEN 	// Startup Telegram
					IF aRxData[1]= 16#0F THEN
						SIf.stStatus.bolStartupOk := TRUE;				
					END_IF
				ELSE		// Reset Acknowledge
					SIf.stStatus.stSLG_State.worFWVersion := aRxData[3];
					bytRFIDState := aRxData[2];	// Stetebyte copy 1:1
					IF aRxData[2]= 16#00 THEN
						bolResetJobDone := TRUE;
					ELSE
						bolResetJobError := TRUE;
					END_IF
				END_IF
			15:		//16#0F RFID Tag present state
				bytRFIDState := aRxData[2];	// Stetebyte copy 1:1
				IF bytRFIDState=0 THEN
					IF aRxData[4]&gt;0 THEN
						SIf.stStatus.bolPresent := TRUE;
					ELSE
						SIf.stStatus.bolPresent := FALSE;
					END_IF
				END_IF
			1, 65:		//16#01 16#61 Write Acknowledge
				bytRFIDState := aRxData[2];	// Stetebyte copy 1:1
				IF bytRFIDState=0 THEN
					bolWriteDone := TRUE;
				ELSE
					SIf.stErr.bolRFIDError := TRUE;
				END_IF
			2, 66:		//16#02 16#42 Read Acknowledge
				bytRFIDState := aRxData[2];	// Stetebyte copy 1:1
				IF (bytRFIDState=0) AND (SIf.stCur.uinAdressData+SIf.stCur.usiCount &lt;= 255) AND (SIf.stCur.usiCount+6 &lt;= 255) THEN		// AND (SIf.stCur.usiCount = (aRxData[0]-5))
					FOR udiLoopBuffer := 0 TO (SIf.stCur.usiCount) DO
						SIf.stCur.pData^[SIf.stCur.uinAdressData+udiLoopBuffer] := aRxData[udiLoopBuffer+6];
					END_FOR	
					bolReadDone := TRUE;
				ELSE
					SIf.stErr.bolRFIDError := TRUE;
				END_IF
			4, 68:		//16#04 16#44 SLG State
				bytRFIDState := aRxData[2];	// Statebyte copy 1:1
				IF bytRFIDState&lt;&gt;0 THEN
					SIf.stErr.bolRFIDError := TRUE;
				ELSE
					IF aRxData[3]=16#01 THEN		// SLG State mode 1
						// HW Type
						SIf.stStatus.stSLG_State.bytHWType := aRxData[4];
						// HW Version
						SIf.stStatus.stSLG_State.worHWVersion := 0;
						SIf.stStatus.stSLG_State.worHWVersion := aRxData[5];
						SIf.stStatus.stSLG_State.worHWVersion := SHL(SIf.stStatus.stSLG_State.worHWVersion,8);
						SIf.stStatus.stSLG_State.worHWVersion := SIf.stStatus.stSLG_State.worHWVersion OR aRxData[6];
						// URL Version
						SIf.stStatus.stSLG_State.worURLVersion := 0;
						SIf.stStatus.stSLG_State.worURLVersion := aRxData[7];
						SIf.stStatus.stSLG_State.worURLVersion := SHL(SIf.stStatus.stSLG_State.worURLVersion,8);
						SIf.stStatus.stSLG_State.worURLVersion := SIf.stStatus.stSLG_State.worURLVersion OR aRxData[8];
						// FW Type
						SIf.stStatus.stSLG_State.bytFWType := aRxData[9];
						// FW Version
						SIf.stStatus.stSLG_State.worFWVersion := 0;
						SIf.stStatus.stSLG_State.worFWVersion := aRxData[10];
						SIf.stStatus.stSLG_State.worFWVersion := SHL(SIf.stStatus.stSLG_State.worFWVersion,8);
						SIf.stStatus.stSLG_State.worFWVersion := SIf.stStatus.stSLG_State.worFWVersion OR aRxData[11];
						// TR Type
						SIf.stStatus.stSLG_State.bytDriverType := aRxData[12];
						// TR Version
						SIf.stStatus.stSLG_State.worDriverVersion := 0;
						SIf.stStatus.stSLG_State.worDriverVersion := aRxData[13];
						SIf.stStatus.stSLG_State.worDriverVersion := SHL(SIf.stStatus.stSLG_State.worDriverVersion,8);
						SIf.stStatus.stSLG_State.worDriverVersion := SIf.stStatus.stSLG_State.worDriverVersion OR aRxData[14];
						// Serial Interface
						SIf.stStatus.stSLG_State.bytComm := aRxData[15];
						// Serial Interface Baud Rate
						SIf.stStatus.stSLG_State.bytBaud := aRxData[16];
						// sending power (only RF380R)
						SIf.stStatus.stSLG_State.bytPower := aRxData[20];
						// Number of maximal tags in the field
						SIf.stStatus.stSLG_State.bytMtag := aRxData[21];
						// air interface 0=RF300; 1=ISO generall; 3=ISO infineon Chip; 4=ISO Fujitsu; 5=ISO NXP; 6=ISO TI; 7=ISO ST
						SIf.stStatus.stSLG_State.bytFtim := aRxData[23];
						// State antenna 1=ON; 2=OFF
						SIf.stStatus.stSLG_State.bytAntenna := aRxData[25];
						// Tag presence 0=No presence; 1=prexence
						SIf.stStatus.stSLG_State.bytPresence := aRxData[27];
					ELSE		// SLG Diagnose Mode 6
						// Errorcounter inactive mode
						SIf.stStatus.stSLG_Diag.usiFZP := aRxData[4];
						// Counter abort
						SIf.stStatus.stSLG_Diag.usiABZ := aRxData[5];
						// Errorcounter code errors
						SIf.stStatus.stSLG_Diag.usiCFZ := aRxData[6];
						// Errorcounter signature errors
						SIf.stStatus.stSLG_Diag.usiSFZ := aRxData[7];
						// Errorcounter CRC
						SIf.stStatus.stSLG_Diag.usiCRCFZ := aRxData[8];
						// Actual command state
						SIf.stStatus.stSLG_Diag.usiBSTAT := aRxData[9];
						// Counter interface errors to host (Parity, BCC, Frame)
						SIf.stStatus.stSLG_Diag.usiASMFZ := aRxData[10];
					END_IF
				END_IF
				bolSLGJobDone := TRUE;

			11, 75:		//16#0B 16#4B MDS State
				bytRFIDState := aRxData[2];	// Statebyte copy 1:1
				IF bytRFIDState&lt;&gt;0 THEN
					SIf.stErr.bolRFIDError := TRUE;
				ELSE
					// UID
					SIf.stStatus.abyteUID[7] := aRxData[4];
					SIf.stStatus.abyteUID[6] := aRxData[5];
					SIf.stStatus.abyteUID[5] := aRxData[6];
					SIf.stStatus.abyteUID[4] := aRxData[7];
					SIf.stStatus.abyteUID[3] := aRxData[8];
					SIf.stStatus.abyteUID[2] := aRxData[9];
					SIf.stStatus.abyteUID[1] := aRxData[10];
					SIf.stStatus.abyteUID[0] := aRxData[11];
						
					IF aRxData[3]=16#01 THEN		// MDS State mode 1 RF300
						SIf.stStatus.stMDS_State.bytMDSType := aRxData[12];
						SIf.stStatus.stMDS_State.bytLockState := aRxData[13];
						SIf.stStatus.stMDS_State.worMemSize := 0;		// No information at this type			
						SIf.stStatus.stMDS_State.bytLockState := 0;		// No information at this type
						SIf.stStatus.stMDS_State.bytBlockSize := 0;		// No information at this type
						SIf.stStatus.stMDS_State.bytBlockNo := 0;		// No information at this type
					ELSIF aRxData[3]=16#02 THEN		// MDS Diagnose mode 2 RF300
						SIf.stStatus.stMDS_Diag.usiLFD := aRxData[12];
						SIf.stStatus.stMDS_Diag.usiFZP := aRxData[13];
						SIf.stStatus.stMDS_Diag.usiFZA := aRxData[14];
						SIf.stStatus.stMDS_Diag.usiANWZ := aRxData[15];
					ELSIF aRxData[3]=16#03 THEN		// MDS State mode 3 ISO
						SIf.stStatus.stMDS_State.bytMDSType := aRxData[12];
						SIf.stStatus.stMDS_State.bytVersion := aRxData[13];
						SIf.stStatus.stMDS_State.worMemSize := aRxData[14]*256 + aRxData[15];				
						SIf.stStatus.stMDS_State.bytLockState := aRxData[16];
						SIf.stStatus.stMDS_State.bytBlockSize := aRxData[17];
						SIf.stStatus.stMDS_State.bytBlockNo := aRxData[18];
					END_IF
				END_IF
				bolMDSJobDone := TRUE;
		
					
			10, 42:		//16#2A SET Antenna
				bytRFIDState := aRxData[2];	// Stetebyte copy 1:1
				IF bytRFIDState=0 THEN
					bolAntennaJobDone := TRUE;
				ELSE
					SIf.stErr.bolRFIDError := TRUE;
					SIf.stErr.udiErrorID := 1000 + bytRFIDState;
			END_IF
			16#FF:		//Communication Check to SLG
				SIf.stStatus.bolL_UEB := TRUE;		
		
		END_CASE
	// Data processed, reset bol to ACK
	bolComDataReceived := FALSE;
	END_IF
END_IF

// always go to Error 
(*KVO no auto start because config write from RFW-slow programm
IF (stStateMachine.intState&lt;cRFD_STA_PowerOnBusy) AND (stStateMachine.intState&lt;&gt;cRFD_STA_Error) THEN
	stStateMachine.intStateNext := cRFD_STA_PowerOnBusy;
ELS*)
IF SIf.stCfg.bolSimulation = TRUE THEN
	SIf.intCmd := cSTA_DONE;
ELSIF (SIf.stErr.bolErrorActive) AND 
	(stStateMachine.intState&lt;&gt;cRFD_STA_Error)  THEN
	stStateMachine.intStateNext := cRFD_STA_Error;
// always go to PowerOff 
ELSIF ((SIf.intCmd=cRFD_CMD_CTRL_OFF)) AND 
	(stStateMachine.intState&lt;&gt;cRFD_STA_Off) AND 
	(stStateMachine.intState&lt;&gt;cRFD_STA_Error) THEN
	stStateMachine.intStateNext := cRFD_STA_Off;
ELSIF ((SIf.intCmd=RFD_Cmd.cRFD_CMD_CTRL_ON) AND (stStateMachine.intState&lt;&gt;cRFD_STA_PowerOnBusy)) THEN
	stStateMachine.intStateNext := cRFD_STA_PowerOnBusy;
END_IF

SIf.strCmd := THIS^.getCmdState(intCmdState:=SIf.intCmd,bolState:=FALSE);

</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PowerOnBusy" ObjectId="9b4c54c8-447c-40a1-a67d-a6f8268dd36e">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PowerOnBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;

			// original set parameter to RFID
			IF bolInitComDone=FALSE THEN
				//stSubStateMachine.intState := cRFD_SUB_SetBaudrate;		// First Time set Baudrate and communication Settings
				//stSubStateMachine.intStateNext := cRFD_SUB_SetBaudrate;		// First Time set Baudrate and communication Settings
				// pre 2013-10-11 Not setting Baudrate because this is done in HW Configuration
				stSubStateMachine.intState := cRFD_SUB_ClearBuffer;
				stSubStateMachine.intStateNext := cRFD_SUB_ClearBuffer;
			ELSE
				stSubStateMachine.intState := cRFD_SUB_ClearBuffer;
				stSubStateMachine.intStateNext := cRFD_SUB_ClearBuffer;
			END_IF

			bolSdoExecute := FALSE;
			bolResetJobDone := FALSE;
			fbTimeoutState.IN := FALSE;
			fbTimeoutState.PT := T#5S;
			fbTimeoutState();
			fbTimeoutState.IN := TRUE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
		
		// main statemachine of base controller
		CASE stSubStateMachine.intState OF
			cRFD_SUB_SetBaudrate:
				IF stSubStateMachine.intStateLastCycle &lt;&gt; stSubStateMachine.intState THEN
					stSubStateMachine.intStateLastCycle := stSubStateMachine.intState;
				END_IF
				fbEcCoeSdoWrite(
					sNetId:= SIf.stCfg.stNetId, 
					nSlaveAddr:= SIf.stCfg.uinSlaveAddr, 
					nIndex:= SIf.stCfg.uinCoeIndexComSettings, 
					nSubIndex:= SIf.stCfg.usiCoeSubindexComBaudrate, 
					pSrcBuf:= ADR(SIf.stCfg.uinBaudrate), 
					cbBufLen:= SIZEOF(SIf.stCfg.uinBaudrate), 
					bExecute:= bolSdoExecute, 
					tTimeout:= DEFAULT_ADS_TIMEOUT, 
					bBusy=&gt; bolSdoBusy, 
					bError=&gt; SIf.stErr.bolSDOError, 
					nErrId=&gt; udiSdoErrorNbr);
					
					
				IF 	(bolSdoExecute = TRUE) THEN
					IF ((SIf.stErr.bolSDOError = FALSE) AND (bolSdoBusy = FALSE)) THEN
						bolSdoExecute := FALSE;
						stSubStateMachine.intStateNext := cRFD_SUB_ClearBuffer;
					END_IF
				ELSE
					bolSdoExecute := TRUE;
				END_IF
				
			
			cRFD_SUB_SetComSettings:
				IF stSubStateMachine.intStateLastCycle &lt;&gt; stSubStateMachine.intState THEN
					stSubStateMachine.intStateLastCycle := stSubStateMachine.intState;
				END_IF
				fbEcCoeSdoWrite(
					sNetId:= SIf.stCfg.stNetId, 
					nSlaveAddr:= SIf.stCfg.uinSlaveAddr, 
					nSubIndex:= SIf.stCfg.usiCoeSubindexComDataframe, 
					nIndex:= SIf.stCfg.uinCoeIndexComSettings, 
					pSrcBuf:= ADR(SIf.stCfg.uinComSettings), 
					cbBufLen:= SIZEOF(SIf.stCfg.uinComSettings), 
					bExecute:= bolSdoExecute, 
					tTimeout:= T#2S, 
					bBusy=&gt; bolSdoBusy, 
					bError=&gt; SIf.stErr.bolSDOError, 
					nErrId=&gt; udiSdoErrorNbr);
					
				IF 	(bolSdoExecute = TRUE) THEN
					IF ((SIf.stErr.bolSDOError = FALSE) AND (bolSdoBusy = FALSE)) THEN
						bolSdoExecute := FALSE;
						stSubStateMachine.intStateNext := cRFD_SUB_ClearBuffer;
					END_IF
				ELSE
					bolSdoExecute := TRUE;
				END_IF

	
			cRFD_SUB_ClearBuffer: 	 
				IF stSubStateMachine.intStateLastCycle &lt;&gt; stSubStateMachine.intState THEN
					stSubStateMachine.intStateLastCycle := stSubStateMachine.intState;
				END_IF
				bolInitComDone := TRUE;
				IF (SIf.stErr.bolComError = FALSE) THEN
					stSubStateMachine.intStateNext := cRFD_SUB_InitString;
				END_IF

				
			cRFD_SUB_InitString: 
				IF stSubStateMachine.intStateLastCycle &lt;&gt; stSubStateMachine.intState THEN
					stSubStateMachine.intStateLastCycle := stSubStateMachine.intState;
					aTxData[0] := 10;
					// Byte 1 =&gt; Spare
					aTxData[1] := 0;
					// Byte 2 =&gt; Spare
					aTxData[2] := 0;
					// Byte 3 =&gt; Spare
					aTxData[3] := 0;
					// Byte 4 =&gt; Reset Parameter
					aTxData[4] := 16#25; // SIf.stCfg.usiResetParameter;
					// Byte 5 =&gt; Reset option
					aTxData[5] := 16#2; //SIf.stCfg.usiResetOption1;
					// Byte 6 =&gt; dili = Setting of sendepower antenna (only RF380R)
					aTxData[6] := 0; //0;
					// Byte 7 =&gt; Spare
					aTxData[7] := 0;
					// Byte 8 =&gt; mtag = Maximal value of tags in field
					aTxData[8] := 1;
					// Byte 9 =&gt; Spare
					aTxData[9] := 0;
					// Byte 10 =&gt; ftim = Setting for the Air interface
					aTxData[10] := 1;
					
					udiComSizeSendData := 11;
					bolComSend := TRUE;
				END_IF
			
				IF ((SIf.stErr.bolComError = 0) AND (bolComSend = FALSE)) THEN	 //AND (bolComSendBusy_old = TRUE)
					stSubStateMachine.intStateNext := cRFD_SUB_CheckPon;
				END_IF

			cRFD_SUB_CheckPon:
				IF (bolResetJobDone = TRUE) THEN
					stSubStateMachine.intStateNext := cRFD_SUB_SubStatesEnd;
				ELSIF (bolResetJobError =TRUE) AND (udiResetCount &lt; SIf.stCfg.udiRetry) THEN
					bolResetJobError := FALSE;
					udiResetCount := udiResetCount + 1;
					stSubStateMachine.intStateNext := cRFD_SUB_InitString;
				END_IF
				
			cRFD_SUB_SubStatesEnd:
				;
		END_CASE
		
		stSubStateMachine.intStateLastCycle := stSubStateMachine.intState;
		fbTimeoutState();
		// Check Timeout of communication
		IF fbTimeoutState.Q = TRUE THEN
			SIf.stErr.bolComError := TRUE;
			SIf.stErr.udiErrorID := TIME_TO_UDINT(fbTimeoutState.ET);
		END_IF
		
		IF udiResetCount &gt;= SIf.stCfg.udiRetry THEN
			SIf.stErr.bolComError := TRUE;
			SIf.stErr.udiErrorID := udiResetCount;
		END_IF

		IF (stSubStateMachine.intState&lt;&gt;stSubStateMachine.intStateNext) THEN
			stSubStateMachine.intState := stSubStateMachine.intStateNext;  // set next state for next cycle
			//stSubStateMachine.udiTimeInState_ms := 0; // reset timer
			// log state change -&gt; open point
		//ELSE
			// increment time in state	
			//stSubStateMachine.intStateLastCycle := stSubStateMachine.udiTimeInState_ms + me.FUBInfo.udiSample_ms;
		END_IF
		

		// State Change Condition
		IF (SIf.stErr.bolComError = TRUE) OR (SIf.stErr.bolSDOError = TRUE) THEN
			stStateMachine.intStateNext := cRFD_STA_Error;
		ELSIF (stSubStateMachine.intStateNext = cRFD_SUB_SubStatesEnd) THEN
			stStateMachine.intStateNext := cRFD_STA_WaitForJob;
		END_IF
		
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		SIf.intCmd := cRFD_CMD_DONE;
		SIf.stStatus.bolStartupOk := TRUE;
		SIf.stStatus.bolInitOk := TRUE;
		SIf.stStatus.bolOn := TRUE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="a4b08c0d-52bf-42cf-a099-426a19fd2b72">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">
// main statemachine of base controller
CASE stStateMachine.intState OF
	cRFD_STA_OffBusy: 
        THIS^.sta_OffBusy();
	cRFD_STA_Off: 
        THIS^.sta_Off();
    cRFD_STA_PowerOnBusy: 
        THIS^.sta_PowerOnBusy();
	cRFD_STA_WaitForJob: 
        THIS^.sta_WaitForJob();
	cRFD_STA_WriteBusy: 
        THIS^.sta_WriteBusy();
    cRFD_STA_ReadBusy: 
        THIS^.sta_ReadBusy();
	cRFD_STA_TagInitBusy: 
        THIS^.sta_TagInitBusy();
	cRFD_STA_CheckBusy: 
        THIS^.sta_CheckBusy();
	cRFD_STA_MDSBusy: 
        THIS^.sta_MDSBusy();
	cRFD_STA_SLGBusy: 
        THIS^.sta_SLGBusy();
    cRFD_STA_Error: 
        THIS^.sta_Error();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getSIf" ObjectId="b01bdf44-93a1-4aba-b776-3b5e0d3596c7">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_RFD" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine_Service" ObjectId="c3684090-4fb6-4ef6-a4ac-d510ac32a760">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine_Service" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">

// main statemachine of base controller
CASE SIf.intServiceCmd OF
//	cRFD_CMD_MDS: 
//		THIS^.sJobWriteParameter();
//	cYAD_SCMD_READ_PARA: 
//		THIS^.sJobReadParameter();
//	cYAD_SCMD_RESET_ABSENCODER: 
//		THIS^.sJobAbsEncReset();
ELSE
	usiCaseScmd := 0;
	

	
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_Error" ObjectId="c9726f97-2ec3-491f-ad20-1387022bcb8d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_Error" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateHistory := stStateMachine.intStateLastCycle;
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
		SIf.stErr.bolErrorActive := TRUE;
		IF (SIf.stErr.bolComError = TRUE) OR (SIf.stErr.bolProtcolError = TRUE) THEN
			; //Written in different settings
		ELSIF SIf.stErr.bolSDOError = TRUE THEN
			SIf.stErr.udiErrorID := udiSdoErrorNbr;
		ELSIF SIf.stErr.bolRFIDError = TRUE THEN	
			SIf.stErr.udiErrorID := 1000 * aRxData[1] + bytRFIDState;
		ELSIF (udiResetCount &gt;=SIf.stCfg.udiRetry) OR (udiJobCount &gt;= SIf.stCfg.udiRetry) THEN
			SIf.stErr.udiErrorID := SIf.stCfg.udiRetry;
		ELSE
			SIf.stErr.udiErrorID := 0;
		END_IF


	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
		
		// State Change Condition
		IF (SIf.stErr.bolErrAck = TRUE) THEN
			// Reset all active errors
			SIf.stErr.bolErrorActive := FALSE;
			SIf.stErr.bolRFIDError := FALSE;
			SIf.stErr.bolComError := FALSE;
			SIf.stErr.bolProtcolError := FALSE;
			SIf.stErr.bolSDOError := FALSE;
			SIf.stErr.udiErrorID := 0;
			bolComSend := FALSE;
			SIf.stStatus.bolInitOk := FALSE;
			SIf.stStatus.bolOn := FALSE;
			SIf.stStatus.bolStartupOk := FALSE;
			SIf.stStatus.bolPresent := FALSE;
			SIf.stErr.bolErrAck := FALSE;
			
//			IF stStateMachine.intStateHistory &lt; cRFD_STA_WaitForJob THEN
				stStateMachine.intStateNext := cRFD_STA_Off;
			//ELSE
			//	stStateMachine.intStateNext := cRFD_STA_WaitForJob;		
//			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ReadBusy" ObjectId="d268e993-aeaf-42c1-99c6-e7738254e331">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ReadBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
			// Byte 0 =&gt; Lenght
			aTxData[0] := 5;
			// Byte 1 =&gt; Command read 2=single; 12=continious
			aTxData[1] := 2;
			// Byte 2 =&gt; Spare
			aTxData[2] := 0;
			// Byte 3 =&gt; Adress MSB
			uinValue := SIf.stCur.uinAdressTag;
			uinValue := ROL(uinValue,8);
			aTxData[3] := UINT_TO_USINT(uinValue);
			// Byte 4 =&gt; Adress LSB
			aTxData[4] := UINT_TO_USINT(SIf.stCur.uinAdressTag);
			// Byte 5 =&gt;Lenght
			aTxData[5] := SIf.stCur.usiCount; 
					
			udiComSizeSendData := 6;
			bolComSend := TRUE;	
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN


		
		// State Change Condition
		IF (SIf.stErr.bolComError = TRUE) OR ((SIf.stErr.bolRFIDError = TRUE) AND (udiJobCount &gt; SIf.stCfg.udiRetry)) THEN
			stStateMachine.intStateNext := cRFD_STA_Error;
		ELSIF (SIf.stErr.bolRFIDError = TRUE) THEN
			udiJobCount := udiJobCount + 1;
			stStateMachine.intStateLastCycle := 0; // Startcycle again
		ELSIF ((SIf.stErr.bolComError = 0) AND (bolReadDone = TRUE)) THEN
			bolReadDone := FALSE;
			udiJobCount := 0;
			stStateMachine.intStateNext := cRFD_STA_WaitForJob;
		END_IF
		
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		SIf.intCmd := cRFD_CMD_DONE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_TagInitBusy" ObjectId="d9a9e724-5447-4119-a4ae-f432c03d3ae5">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_TagInitBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		
		// State Change Condition
		IF (FALSE) THEN
			stStateMachine.intStateNext := cRFD_STA_Error;
		ELSIF (TRUE) THEN
			stStateMachine.intStateNext := cRFD_STA_WaitForJob;
		END_IF
		
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		IF SIf.intCmd = stStateMachine.intState THEN
			SIf.intCmd := cRFD_CMD_DONE;
		END_IF
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_WriteBusy" ObjectId="dba4f76a-fbf7-4b6b-9d1a-59baba331ecc">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_WriteBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
			stStateMachine.intStateLastCycle := stStateMachine.intState;
			// Byte 0 =&gt; Lenght
			aTxData[0] := 5 + SIf.stCur.usiCount;
			// Byte 1 =&gt; Command write 1=single; 11=continious
			aTxData[1] := 1;
			// Byte 2 =&gt; Spare
			aTxData[2] := 0;
			// Byte 3 =&gt; Adress MSB
			uinValue := SIf.stCur.uinAdressTag;
			uinValue := ROL(uinValue,8);
			aTxData[3] := UINT_TO_USINT(uinValue);
			// Byte 4 =&gt; Adress LSB
			aTxData[4] := UINT_TO_USINT(SIf.stCur.uinAdressTag);
			// Byte 5 =&gt;Lenght
			aTxData[5] := SIf.stCur.usiCount;
 
			IF ((SIf.stCur.uinAdressData+SIf.stCur.usiCount &lt;= 255) AND (SIf.stCur.usiCount+6 &lt;= 255)) THEN
				FOR udiLoopBuffer := 0 TO (SIf.stCur.usiCount) DO
					aTxData[udiLoopBuffer+6] := SIf.stCur.pData^[SIf.stCur.uinAdressData+udiLoopBuffer];
				END_FOR	
				udiComSizeSendData := SIf.stCur.usiCount+6;
				bolComSend := TRUE;		
			ELSE
				SIf.stErr.bolComError := TRUE;
			END_IF
							
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
		
		// State Change Condition
		IF (SIf.stErr.bolComError = TRUE) OR ((SIf.stErr.bolRFIDError = TRUE) AND (udiJobCount &gt; SIf.stCfg.udiRetry)) THEN
			stStateMachine.intStateNext := cRFD_STA_Error;
		ELSIF (SIf.stErr.bolRFIDError = TRUE) THEN
			udiJobCount := udiJobCount + 1;
			stStateMachine.intStateLastCycle := 0; // Startcycle again
		ELSIF ((SIf.stErr.bolComError = 0) AND (bolWriteDone = TRUE)) THEN
			bolWriteDone := FALSE;
			udiJobCount := 0;
			stStateMachine.intStateNext := cRFD_STA_WaitForJob;
		END_IF
	
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		SIf.intCmd := cRFD_CMD_DONE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_CheckBusy" ObjectId="f6386934-9b5e-4e99-874f-72a7f6c4ad05">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_CheckBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
			// Byte 0 =&gt; Lenght
			aTxData[0] := 2;
			// Byte 1 =&gt; Command read 4=single; 14=continious
			aTxData[1] := 16#FF;
			// Byte 2 =&gt; Spare
			aTxData[2] := 0;
						
			udiComSizeSendData := 3;
			bolComSend := TRUE;	
			SIf.stStatus.bolL_UEB := FALSE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		
		// State Change Condition
		IF (SIf.stErr.bolErrorActive = TRUE) THEN
			stStateMachine.intStateNext := cRFD_STA_Error;
		ELSIF (SIf.stStatus.bolL_UEB = TRUE) THEN
			stStateMachine.intStateNext := cRFD_STA_WaitForJob;
		END_IF
		
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		SIf.intCmd := cRFD_CMD_DONE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>b594bd4c-d2d6-4c09-8c7a-e195807dfb70</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_RFR" pouType="functionBlock">
              <interface>
                <localVars>
                  <variable name="bolActivate">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="bolInitDone">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bolInitComDone">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="bolComSend">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Communication sending is busy to the serial Card</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiComSizeSendData">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Size of Sendingdata</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolComDataReceived">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Communication Data Received</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiComSizeReceiveData">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Size of received Data from serial interface</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSdoBusy">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Sdo Setting is busy to the serial Card</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolSdoExecute">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Sdo Setting executing</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolReadDone">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Job Reading is done</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolWriteDone">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Job Writing is done</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolResetJobDone">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Job Reset SLG is done</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolResetJobError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Job Reset SLG has Error</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiSdoErrorNbr">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Information to SDO Error</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiComErrorNbr">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Information to Error</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiResetCount">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Count Reset cycles</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiJobCount">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Count Job Tryals</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytRFIDState">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> State information from RF ID Tag</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bytCheckValue">
                    <type>
                      <BYTE />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> BCC Calculation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="SIf">
                    <type>
                      <derived name="T_RFD" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> driver specific interface</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aRxData">
                    <type>
                      <array>
                        <dimension lower="0" upper="255" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> get direct Buffer from Interface
 access over mapping!! {attribute 'TcLinkTo':='TIID^Device 1 (EtherCAT)^Box 1 (SGDV-E1 CoE Drive)^2nd Transmit PDO mapping^Status word'}</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aTxData">
                    <type>
                      <array>
                        <dimension lower="0" upper="255" />
                        <baseType>
                          <BYTE />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="fbEcCoeSdoWrite">
                    <type>
                      <derived name="TC2_ETHERCAT.FB_EcCoESdoWrite" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Function for serial communication</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbExCom">
                    <type>
                      <derived name="FB_ExCom" />
                    </type>
                  </variable>
                  <variable name="stStateMachine">
                    <type>
                      <derived name="T_RFD_StateMachine" />
                    </type>
                  </variable>
                  <variable name="stSubStateMachine">
                    <type>
                      <derived name="T_RFD_StateMachine" />
                    </type>
                  </variable>
                  <variable name="usiCase">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">case variable</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiCaseScmd">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">case variable for service cmd's</xhtml>
                    </documentation>
                  </variable>
                  <variable name="sinValue">
                    <type>
                      <SINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> help values for parameter handling</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intValue">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="dinValue">
                    <type>
                      <DINT />
                    </type>
                  </variable>
                  <variable name="usiValue">
                    <type>
                      <USINT />
                    </type>
                  </variable>
                  <variable name="uinValue">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="udiValue">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="uliValue">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="pTemp">
                    <type>
                      <pointer>
                        <baseType>
                          <array>
                            <dimension lower="0" upper="7" />
                            <baseType>
                              <BYTE />
                            </baseType>
                          </array>
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                  <variable name="strTemp">
                    <type>
                      <string length="18" />
                    </type>
                  </variable>
                  <variable name="udiI">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiLoopBuffer">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiLoopData">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiLoopSend">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Driver for Simatic RFID Reader RF382R 6GT2801-3AB20-0AX0 (only read function)


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		09.07.2013		AVME/PRE	Start history
0.00.2		18.09.2013		AVME/KVO	no initial write of parameter to RFID reader at PowerOnBusy
0.00.3		25.09.2013		AVME/KVO	always set sample error and go to error state!
___________________________________________________________________________________________________*)


IF (bolActivate) THEN // cyclic call enabled
	
	IF (bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
		
		StateMachine_Service(); // handles asynchron service commands
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
	
END_IF;</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="2ff0d4f2-c15d-423e-a1f2-30c9bb0490fe">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="udiTaskCnt">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                        <variable name="ii">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf.intCmd := cRFD_CMD_DONE;
SIf.intServiceCmd := cRFD_CMD_DONE; // not used at the moment
stStateMachine.intStateLastCycle  := cRFD_CMD_DONE; //EntryStop of power BASE_PLC.OFF enable

// Communication Settings
SIf.stCfg.eTyp := E_Typ_RFW.RF382R;
SIf.stCfg.uinBaudrate := INT_TO_USINT(E_Typ_Baudrate.baud_38400);
SIf.stCfg.stNetId := '192.168.70.26.3.1';
SIf.stCfg.uinSlaveAddr := 1002;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PowerOnBusy" ObjectId="3933674c-825e-4d93-a7fe-b5f6cf3d379a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PowerOnBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
			//IF bolInitComDone=FALSE THEN
				// direct write parameter doesn't work!! KVO 17.09.2013 with new Kannegiesser RFID
				// Feedback rx[0..2] 255 4 251 -&gt; Baudrate/task time not 2ms
				// no Feedback -&gt; parameter set? estimated  rx[0..2] 1 0 1
				// decision with Rolf Engelputzeder 18.09.2013 
				// don't use write parameter at the moment:
				stSubStateMachine.intState := cRFD_SUB_SubStatesEnd;// cRFD_SUB_ClearBuffer;		// First Time set Baudrate and communication Settings
				stSubStateMachine.intStateNext := cRFD_SUB_SubStatesEnd;// cRFD_SUB_ClearBuffer;		// First Time set Baudrate and communication Settings
				bolInitComDone := TRUE; // old without this condition
				
				(*
				// original set parameter to RFID
				stSubStateMachine.intState := cRFD_SUB_ClearBuffer;		// First Time set Baudrate and communication Settings
				stSubStateMachine.intStateNext := cRFD_SUB_ClearBuffer;
				*)
			//END_IF
			bolSdoExecute := FALSE;
			bolResetJobDone := FALSE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
		
		// main statemachine of base controller
		CASE stSubStateMachine.intState OF
			cRFD_SUB_SetBaudrate:
				IF stSubStateMachine.intStateLastCycle &lt;&gt; stSubStateMachine.intState THEN
					stSubStateMachine.intStateLastCycle := stSubStateMachine.intState;
				END_IF
				fbEcCoeSdoWrite(
					sNetId:= SIf.stCfg.stNetId, 
					nSlaveAddr:= SIf.stCfg.uinSlaveAddr, 
					nIndex:= SIf.stCfg.uinCoeIndexComSettings, 
					nSubIndex:= SIf.stCfg.usiCoeSubindexComBaudrate, 
					pSrcBuf:= ADR(SIf.stCfg.uinBaudrate), 
					cbBufLen:= SIZEOF(SIf.stCfg.uinBaudrate), 
					bExecute:= bolSdoExecute, 
					tTimeout:= DEFAULT_ADS_TIMEOUT, 
					bBusy=&gt; bolSdoBusy, 
					bError=&gt; SIf.stErr.bolSDOError, 
					nErrId=&gt; udiSdoErrorNbr);
					
					
				IF 	(bolSdoExecute = TRUE) THEN
					IF ((SIf.stErr.bolSDOError = FALSE) AND (bolSdoBusy = FALSE)) THEN
						bolSdoExecute := FALSE;
						stSubStateMachine.intStateNext := cRFD_SUB_ClearBuffer;
					END_IF
				ELSE
					bolSdoExecute := TRUE;
				END_IF
				
			
			cRFD_SUB_SetComSettings:
				IF stSubStateMachine.intStateLastCycle &lt;&gt; stSubStateMachine.intState THEN
					stSubStateMachine.intStateLastCycle := stSubStateMachine.intState;
				END_IF
				fbEcCoeSdoWrite(
					sNetId:= SIf.stCfg.stNetId, 
					nSlaveAddr:= SIf.stCfg.uinSlaveAddr, 
					nSubIndex:= SIf.stCfg.usiCoeSubindexComDataframe, 
					nIndex:= SIf.stCfg.uinCoeIndexComSettings, 
					pSrcBuf:= ADR(SIf.stCfg.uinComSettings), 
					cbBufLen:= SIZEOF(SIf.stCfg.uinComSettings), 
					bExecute:= bolSdoExecute, 
					tTimeout:= T#2S, 
					bBusy=&gt; bolSdoBusy, 
					bError=&gt; SIf.stErr.bolSDOError, 
					nErrId=&gt; udiSdoErrorNbr);
					
				IF 	(bolSdoExecute = TRUE) THEN
					IF ((SIf.stErr.bolSDOError = FALSE) AND (bolSdoBusy = FALSE)) THEN
						bolSdoExecute := FALSE;
						stSubStateMachine.intStateNext := cRFD_SUB_ClearBuffer;
					END_IF
				ELSE
					bolSdoExecute := TRUE;
				END_IF

	
			cRFD_SUB_ClearBuffer: 	 
				IF stSubStateMachine.intStateLastCycle &lt;&gt; stSubStateMachine.intState THEN
					stSubStateMachine.intStateLastCycle := stSubStateMachine.intState;
				END_IF
				bolInitComDone := TRUE;
				IF (SIf.stErr.bolComError = FALSE) THEN
					stSubStateMachine.intStateNext := cRFD_SUB_InitString;
				END_IF

				
			cRFD_SUB_InitString: 
				IF stSubStateMachine.intStateLastCycle &lt;&gt; stSubStateMachine.intState THEN
					stSubStateMachine.intStateLastCycle := stSubStateMachine.intState;
					// Byte 0 =&gt; Para = 16#01
					aTxData[0] := 1;
					// Byte 1 =&gt; Memory
					aTxData[1] := SIf.stCfg.usiMemory;
					// Byte 2 =&gt; Spare
					aTxData[2] := 0;
					// Byte 3 =&gt; Spare
					aTxData[3] := 0;
					// Byte 4 =&gt; Spare
					aTxData[4] := 0;
					// Byte 5 =&gt; Spare
					aTxData[5] := 0;
					// Byte 6 =&gt; Spare
					aTxData[6] := 0;
					// Byte 7 =&gt; Scan Mode
					aTxData[7] := SIf.stCfg.usiScanMode;
					// Byte 8 =&gt; Lock Time High Byte
					aTxData[8] := UINT_TO_BYTE(SIf.stCfg.uinLockTime_ms/100);
					// Byte 9 =&gt; Lock Time Low Byte
					aTxData[9] := UINT_TO_BYTE(SHR((SIf.stCfg.uinLockTime_ms/100),8));
					// Byte 10 =&gt; Spare
					aTxData[10] := 0;
					// Byte 11 =&gt; Spare
					aTxData[11] := 0;
					// Byte 12 =&gt; Spare
					aTxData[12] := 0;
					// Byte 13 =&gt; Spare
					aTxData[13] := 0;
					// Byte 14 =&gt; Spare
					aTxData[14] := 0;
					// Byte 15 =&gt; Spare
					aTxData[15] := 0;
					// Byte 16 =&gt; Spare
					aTxData[16] := 0;
					// Byte 17 =&gt; Spare
					aTxData[17] := 0;
					// Byte 18 =&gt; Spare
					aTxData[18] := 0;
					// Byte 19 =&gt; Spare
					aTxData[19] := 0;
					// Byte 20 =&gt; Spare
					aTxData[20] := 0;
					// Byte 21 =&gt; Spare
					aTxData[21] := 0;
					// Byte 22 =&gt; Spare
					aTxData[22] := 0;

					bytCheckValue := aTxData[0] XOR aTxData[1];
					FOR udiI := 2 TO  22 DO
						bytCheckValue := bytCheckValue XOR aTxData[udiI];
					END_FOR
					
					// Byte 23 =&gt; BCC
					aTxData[23] := bytCheckValue;
					
					udiComSizeSendData := 24;
					bolComSend := TRUE;
				END_IF
			
				IF ((SIf.stErr.bolComError = 0) AND (bolComSend = FALSE)) THEN	
					stSubStateMachine.intStateNext := cRFD_SUB_CheckPon;
				END_IF

			cRFD_SUB_CheckPon:
				IF (bolResetJobDone = TRUE) THEN
					stSubStateMachine.intStateNext := cRFD_SUB_SubStatesEnd;
				ELSIF (bolResetJobError =TRUE) AND (udiResetCount &lt; SIf.stCfg.udiRetry) THEN
					bolResetJobError := FALSE;
					udiResetCount := udiResetCount + 1;
					stSubStateMachine.intStateNext := cRFD_SUB_InitString;
				END_IF
				
			cRFD_SUB_SubStatesEnd:
				;
		END_CASE
		
		stSubStateMachine.intStateLastCycle := stSubStateMachine.intState;
		IF (stSubStateMachine.intState&lt;&gt;stSubStateMachine.intStateNext) THEN
			stSubStateMachine.intState := stSubStateMachine.intStateNext;  // set next state for next cycle
		END_IF
		

		// State Change Condition
		IF (SIf.stErr.bolComError = TRUE) OR (SIf.stErr.bolSDOError = TRUE) OR (udiResetCount &gt;= SIf.stCfg.udiRetry) THEN
			stStateMachine.intStateNext := cRFD_STA_Error;
		ELSIF (stSubStateMachine.intStateNext = cRFD_SUB_SubStatesEnd) THEN
			stStateMachine.intStateNext := cRFD_STA_WaitForJob;
		END_IF
		
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		SIf.intCmd := cRFD_CMD_DONE;
		SIf.stStatus.bolStartupOk := TRUE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine_Service" ObjectId="59ddef4e-f223-4272-b889-0d868cd05e96">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine_Service" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">

// main statemachine of base controller
CASE SIf.intServiceCmd OF

ELSE
	usiCaseScmd := 0;
	

	
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getSIf" ObjectId="8bd33bbd-8461-486f-9159-8524bd5c4cce">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_RFD" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="ba5794de-74db-4872-accf-e9651e58efa7">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// one time first cyclic call
;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_WaitForJob" ObjectId="c4ecd18d-f6db-4db6-81ed-37b5cb85b880">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_WaitForJob" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN

		
		// State Change Condition
		IF (SIf.intCmd=cRFD_CMD_CTRL_ON) THEN
			stStateMachine.intStateNext := cRFD_STA_PowerOnBusy;
		END_IF
		
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CycleEndDuty" ObjectId="e81a08bb-fb67-46cc-955e-627ff1b5d3d0">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CycleEndDuty" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf.strState := THIS^.getCmdState(intCmdState:=stStateMachine.intState,bolState:=TRUE);

IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
	stStateMachine.intState := stStateMachine.intStateNext;  // set next state for next cycle
END_IF

(***************************************************************
        Function Block Calls
***************************************************************)
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="e8e88495-2ab2-40a0-bd0c-b7d59846ce77">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">
// main statemachine of base controller
CASE stStateMachine.intState OF
    cRFD_STA_PowerOnBusy: 
        THIS^.sta_PowerOnBusy();
	cRFD_STA_WaitForJob: 
        THIS^.sta_WaitForJob();
   cRFD_STA_Error: 
        THIS^.sta_Error();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CycleStartDuty" ObjectId="f06444c6-e306-4499-a578-f1aa3770d87e">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CycleStartDuty" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
fbExCom(
	In_pRxData:= ADR(aRxData), 
	In_pTxData:= ADR(aTxData), 
	In_udiTxCount:= udiComSizeSendData, 
	In_bolErrorAck:= SIf.stErr.bolErrAck, 
	InOut_bolSend:= bolComSend, 
	InOut_bolRec:= bolComDataReceived, 
	Out_udiRxCount=&gt; udiComSizeReceiveData, 
	Out_bolComError=&gt; SIf.stErr.bolComError, 
	Out_bolProtocolErr=&gt; SIf.stErr.bolProtcolError, 
	Out_udiErrorCode=&gt; udiComErrorNbr);

(* program code at the beginning of each PLC cycle *)
IF bolInitComDone=TRUE THEN
	// Received Data checking and interpreting
	IF bolComDataReceived = TRUE THEN
		IF (aRxData[0] = 1) AND (udiComSizeReceiveData = 3) THEN		// Ack Reset
			IF aRxData[1] = 0 THEN
				bolResetJobDone := TRUE;
			ELSE
				 SIf.stErr.bolProtcolError := TRUE;
			END_IF
		ELSE
			// UID
			MEMCPY(destAddr:=ADR(strTemp), srcAddr:=ADR(aRxData[0]), n:=16);

			uliValue := FB_HEXSTRING_TO_ULINT(in_strSTRING:= strTemp);
			pTemp := ADR(SIf.stStatus.abyteUID[0]);
			MEMCPY(destAddr:=ADR(SIf.stStatus.abyteUID[0]), srcAddr:=ADR(uliValue), n:=8);		// COPY to ID 
			
		END_IF
		bolComDataReceived := FALSE;
	END_IF
END_IF

// always go to Error 
IF ((SIf.stErr.bolProtcolError) OR  (SIf.stErr.bolRFIDError) OR (SIf.stErr.bolSDOError)) THEN
	SIf.stErr.bolErrorActive := TRUE; // set sample Error -&gt; got to Error state
END_IF

IF (SIf.stErr.bolErrorActive) AND (stStateMachine.intState&lt;&gt;cRFD_STA_Error)  THEN
	stStateMachine.intStateNext := cRFD_STA_Error;
ELSIF (stStateMachine.intState&lt;cRFD_STA_PowerOnBusy) AND (stStateMachine.intState&lt;&gt;cRFD_STA_Error) THEN
	stStateMachine.intStateNext := cRFD_STA_PowerOnBusy;
END_IF

SIf.strCmd := THIS^.getCmdState(intCmdState:=SIf.intCmd,bolState:=FALSE);

</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="f5b31fb8-fa67-489d-8fcd-ae719e2c3bb0">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// get string cmd/state string information in runtime
IF (bolState=FALSE) THEN
	// cmd's
	CASE intCmdState OF
		cRFD_CMD_DONE: 
			getCmdState := 'cRFD_CMD_DONE';
		cRFD_CMD_CTRL_ON: 
			getCmdState := 'cRFD_CMD_CTRL_ON';

	END_CASE;
ELSE

// States
	CASE intCmdState OF
		cRFD_STA_Error: 
			getCmdState := 'cRFD_STA_Error';
		cRFD_STA_WaitForJob: 
			getCmdState := 'cRFD_STA_WaitForJob';
		cRFD_STA_PowerOnBusy: 
			getCmdState := 'cRFD_STA_PowerOnBusy';

	END_CASE;
END_IF

</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_Error" ObjectId="fbf94375-7228-417a-92ad-359afcf56818">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_Error" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateLastCycle) THEN
		stStateMachine.intStateHistory := stStateMachine.intStateLastCycle;
		stStateMachine.intStateLastCycle := stStateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (stStateMachine.intState=stStateMachine.intStateLastCycle) THEN
		SIf.stErr.bolErrorActive := TRUE;
		IF (SIf.stErr.bolComError = TRUE) OR (SIf.stErr.bolProtcolError = TRUE) THEN
			SIf.stErr.udiErrorID := udiComErrorNbr;
		ELSIF SIf.stErr.bolSDOError = TRUE THEN
			SIf.stErr.udiErrorID := udiSdoErrorNbr;
		ELSIF (udiResetCount &gt;=SIf.stCfg.udiRetry) OR (udiJobCount &gt;= SIf.stCfg.udiRetry) THEN
			SIf.stErr.udiErrorID := SIf.stCfg.udiRetry;
		ELSE
			SIf.stErr.udiErrorID := 0;
		END_IF

		
		// State Change Condition
		IF (SIf.stErr.bolErrAck = TRUE) THEN
			// Reset all active errors
			SIf.stErr.bolErrorActive := FALSE;
			SIf.stErr.bolComError := FALSE;
			SIf.stErr.bolProtcolError := FALSE;
			SIf.stErr.bolSDOError := FALSE;
			SIf.stErr.udiErrorID := 0;
			stStateMachine.intStateNext := cRFD_STA_PowerOnBusy;		
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (stStateMachine.intState&lt;&gt;stStateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>69c60fe8-63b9-4ceb-aa9e-89eb04e1522c</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_STD" pouType="functionBlock">
              <interface>
                <outputVars>
                  <variable name="Out_bolRed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_bolYellow">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_bolGreen">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_bolBlue">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_bolHorn">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </outputVars>
                <localVars constant="true">
                  <variable name="c_BLINKFAST">
                    <type>
                      <UINT />
                    </type>
                    <initialValue>
                      <simpleValue value="1000" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Fast Toggle Blink with X ms periode</xhtml>
                    </documentation>
                  </variable>
                  <variable name="c_BLINKSLOW">
                    <type>
                      <UINT />
                    </type>
                    <initialValue>
                      <simpleValue value="2000" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Slow Toggle Blink with X ms periode</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <localVars>
                  <variable name="m_bolInitDone">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                  <variable name="m_udiSample_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual sample time</xhtml>
                    </documentation>
                  </variable>
                  <variable name="m_bolHornEnable">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Actual time in ms</xhtml>
                    </documentation>
                  </variable>
                  <variable name="m_aColor">
                    <type>
                      <array>
                        <dimension lower="0" upper="(E_StackLightColor.Max_SackLightColor - 1)" />
                        <baseType>
                          <derived name="T_LighInformation" />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="m_eAlarmClass">
                    <type>
                      <derived name="E_AlmClass" />
                    </type>
                  </variable>
                  <variable name="m_iActualState">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">
IF NOT m_bolInitDone THEN
	Initialize();
END_IF

ProcessInput();
AssignTowerLights();
ProcessOutput();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="ProcessOutput" ObjectId="0f73e241-afa4-4b34-97b7-2289ab143f81">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="ProcessOutput" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">FOR iIdx := 0 TO E_StackLightColor.Max_SackLightColor-1 DO
	GetOutputProcessed(ADR(m_aColor[iIdx]));	
END_FOR

Out_bolHorn := CheckAlmClass() AND m_bolHornEnable;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="ProcessInput" ObjectId="28cad425-68ba-46d1-b920-af193dfe7578">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="ProcessInput" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">FOR iIdx := 0 TO E_StackLightColor.Max_SackLightColor-1 DO
	m_aColor[iIdx].udiTime_ms := m_aColor[iIdx].udiTime_ms + m_udiSample_ms;
END_FOR
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="GetOutputProcessed" ObjectId="55800798-a2ee-47d2-bc81-7113637f1c06">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="pColor">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_LighInformation" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="GetOutputProcessed" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE pColor^.eState OF
	E_LIGHTSTATE.Off:
		pColor^.bolOutput := FALSE;
		pColor^.udiTime_ms := 0;
	E_LIGHTSTATE.On:
		pColor^.bolOutput := TRUE;
		pColor^.udiTime_ms := 0;
	E_LIGHTSTATE.BlinkSlow:
		IF pColor^.udiTime_ms &gt;= c_BLINKSLOW THEN
			pColor^.bolOutput := NOT pColor^.bolOutput;
			pColor^.udiTime_ms := 0;
		END_IF		
	E_LIGHTSTATE.BlinkFast:
		IF pColor^.udiTime_ms &gt;= c_BLINKFAST THEN
			pColor^.bolOutput := NOT pColor^.bolOutput;
			pColor^.udiTime_ms := 0;
		END_IF		
ELSE
	pColor^.udiTime_ms := 0;
	pColor^.bolOutput := FALSE;
END_CASE
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="AssignTowerLights" ObjectId="59cc2aef-072b-4764-9cde-e82f43060080">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="eRed">
                          <type>
                            <derived name="E_LIGHTSTATE" />
                          </type>
                        </variable>
                        <variable name="eYellow">
                          <type>
                            <derived name="E_LIGHTSTATE" />
                          </type>
                        </variable>
                        <variable name="eGreen">
                          <type>
                            <derived name="E_LIGHTSTATE" />
                          </type>
                        </variable>
                        <variable name="eBlue">
                          <type>
                            <derived name="E_LIGHTSTATE" />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="AssignTowerLights" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// This method can be overwriten to get another functionality for another system.
CASE m_iActualState OF
	// RED is steady on
	// -------------------------------------------
	cSTA_DONE, 
	cSTA_INITIALIZED,
	cSTA_PONBusy,	
	cSTA_PON,		
	cSTA_EOFFBusy,	
	cSTA_EOFF,		
	cSTA_OFF:
		eRed	:= E_LIGHTSTATE.On;
		eYellow	:= E_LIGHTSTATE.Off;
		eGreen	:= E_LIGHTSTATE.Off;
		eBlue	:= E_LIGHTSTATE.Off;		

	// Red Blink Fast	
	// -------------------------------------------
	cSTA_TSTOPBusy,	
	cSTA_TSTOP,		
	cSTA_ERROR,		
	cSTA_ERRORQuit:	
		eRed	:= E_LIGHTSTATE.BlinkFast;
		eYellow	:= E_LIGHTSTATE.Off;
		eGreen	:= E_LIGHTSTATE.Off;
		eBlue	:= E_LIGHTSTATE.Off;		

	// Red Blink Slow	
	// -------------------------------------------
	cSTA_OFFBusy:	
		eRed	    := E_LIGHTSTATE.BlinkSlow;
		eYellow		:= E_LIGHTSTATE.Off;
		eGreen	 	:= E_LIGHTSTATE.Off;
		eBlue	  	:= E_LIGHTSTATE.Off;		

	// Yellow Blink Slow	
	// -------------------------------------------
	cSTA_STOPBusy,	
	cSTA_INITBusy:	
		IF CheckAlmClass() THEN
			eRed 		:= E_LIGHTSTATE.BlinkFast;
		ELSE
			eRed 		:= E_LIGHTSTATE.Off;
		END_IF
			   
		eYellow	:= E_LIGHTSTATE.BlinkSlow;
		eGreen	:= E_LIGHTSTATE.Off;
		eBlue	:= E_LIGHTSTATE.Off;		

	// Yellow ON	
	// -------------------------------------------
	cSTA_INIT,		
	cSTA_STOP:		
		IF CheckAlmClass() THEN
			eRed 		:= E_LIGHTSTATE.BlinkFast;
		ELSE
			eRed 		:= E_LIGHTSTATE.Off;
		END_IF

		eYellow	:= E_LIGHTSTATE.On;
		eGreen	:= E_LIGHTSTATE.Off;
		eBlue	:= E_LIGHTSTATE.Off;		
	
	// Green Blink Slow	
	// -------------------------------------------
	cSTA_RUNBusy:	
		IF CheckAlmClass() THEN
			eRed 		:= E_LIGHTSTATE.BlinkFast;
		ELSE
			eRed 		:= E_LIGHTSTATE.Off;
		END_IF

		eYellow		:= E_LIGHTSTATE.Off;
		eGreen	 	:= E_LIGHTSTATE.BlinkSlow;
		eBlue	  	:= E_LIGHTSTATE.Off;		

	// Green ON	
	// -------------------------------------------
	cSTA_RUN:		
		IF CheckAlmClass() THEN
			eRed 		:= E_LIGHTSTATE.BlinkFast;
		ELSE
			eRed 		:= E_LIGHTSTATE.Off;
		END_IF

		eYellow		:= E_LIGHTSTATE.Off;
		eGreen	 	:= E_LIGHTSTATE.On;
		eBlue	  	:= E_LIGHTSTATE.Off;
ELSE
	eRed	   	:= E_LIGHTSTATE.On;
	eYellow		:= E_LIGHTSTATE.Off;
	eGreen	 	:= E_LIGHTSTATE.Off;
	eBlue	  	:= E_LIGHTSTATE.Off;		
END_CASE

m_aColor[E_StackLightColor.Red].eState		:= eRed;
m_aColor[E_StackLightColor.Yellow].eState	:= eYellow;
m_aColor[E_StackLightColor.Green].eState	:= eGreen;
m_aColor[E_StackLightColor.Blue].eState		:= eBlue;		
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CheckAlmClass" ObjectId="c36e547f-dad2-4a37-8b7a-1e713797d340">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CheckAlmClass" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">CASE m_eAlarmClass OF
	E_AlmClass.OFF,
	E_AlmClass.EOFF,
	E_AlmClass.STOP,
	E_AlmClass.TSTOP:
		CheckAlmClass := TRUE;
ELSE
	CheckAlmClass := FALSE;
END_CASE
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Initialize" ObjectId="daed0ed1-9a01-45ab-b36c-7172d3879506">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="udiTaskCnt">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                        <variable name="fbGETCURTASKINDEX">
                          <type>
                            <derived name="Tc2_System.GETCURTASKINDEX" />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Initialize" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Assign the References
m_aColor[E_StackLightColor.Red].bolOutput REF= Out_bolRed;
m_aColor[E_StackLightColor.Yellow].bolOutput REF= Out_bolYellow;
m_aColor[E_StackLightColor.Green].bolOutput REF= Out_bolGreen;
m_aColor[E_StackLightColor.Blue].bolOutput REF= Out_bolBlue;

//automatic read out infos about FUB
udiTaskCnt := TwinCAT_SystemInfoVarList._AppInfo.TaskCnt;
fbGETCURTASKINDEX();
udiTaskCnt := fbGETCURTASKINDEX.index;
m_udiSample_ms := TwinCAT_SystemInfoVarList._TaskInfo[UDINT_TO_DINT(udiTaskCnt)].CycleTime/10000; //[ms] X[100ns]/10000 -&gt; [ms]
m_bolInitDone := TRUE;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="State" ObjectId="476a00ed-ef74-4658-837e-0a56fd52db6b">
                    <interface>
                      <returnType>
                        <INT />
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">m_iActualState := State;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="AlarmClass" ObjectId="dcbfea31-89ab-46bc-9280-e6c60e70f7ff">
                    <interface>
                      <returnType>
                        <derived name="E_AlmClass" />
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">m_eAlarmClass := AlarmClass;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="HornEnable" ObjectId="ea7e9a15-73bb-4840-9fda-58e950f8a4af">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">m_bolHornEnable := HornEnable;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">HornEnable := m_bolHornEnable;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>1bb648d9-9320-48ee-aa00-1104f532eccc</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_BCC" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_bolSensorTrigScan">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="pBCD_SIf_In">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_BCD" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_BCC" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uliBarCodeOld">
                    <type>
                      <ULINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> old barcode to know that a new barcode is present from sensor</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uliSimBarCode">
                    <type>
                      <ULINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> simulated barcode</xhtml>
                    </documentation>
                  </variable>
                  <variable name="pBCD_SIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_BCD" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Variables for driver simulation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stBCD_Sim">
                    <type>
                      <derived name="T_BCD" />
                    </type>
                  </variable>
                  <variable name="bolSensorTrigScanOld">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Edge detection of trigger sensor </xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolExecuteScan">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Exceute scan flag</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiScanDelayTimer_ms">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Barcode reader controller.
Controls the communication to the barcode reader.

History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		06.01.2014		AVME/DSC	Start history
0.00.2		07.01.2014		AVME/DSC	Basic functionalities implemented and tested. 	
0.00.3		27.01.2014		AVME/DSC	- Added info "bolNoRead" in cur interface
					 					- Revision in error recovery
0.00.4		15.07.2014		AVME/DSC   RP-208 - Implement sensor signal input for triggering a barcode scan
									   The controller is already implemented with a common interface waiting for command READ to execute a new barcode scan.
									   Controller is now equipped with a further option to execute a scan by checking a sensor signal input.
0.00.5		24.10.2014		HLV/MAH		driver can be used for Sick or Keyence scanner configured by SIf.Cfg.iSensorType := E_BCD_Type.xxxx
										the port of Keyence scanner must be always 9004
										if Keyence scanner is used, FB_SocketCloseAll must be called in main PRG (see MiddlePRG in BaseElementsSample)

___________________________________________________________________________________________________*)

SUPER^();

(*
IF (me.bolActivate) AND (pBCD_SIf_In&lt;&gt;0) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	
	END_IF
END_IF;
*)</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="027cd8e8-4c30-47c3-9cbc-4ccde024662d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="udiTaskCnt">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                        <variable name="ii">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR ii:= 0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[ii].intCmd=cCMD_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR
CIf.Job.aCmdList[ii].intCmd := cBCC_CMD_READ;
CIf.Job.aCmdList[ii].strName := 'Read'; 
CIf.Job.aCmdList[ii].bolAvailable := TRUE;

// set name of class/typ
CIf.Info.strType := 'FB_BCC';
CIf.Info.strFullName := 'Barcode Controller';

// set alarm class
SIf.Alm[1].eAlmClass := E_AlmClass.INFO;
SIf.Alm[1].strText := 'Barcode reader driver error'; 
SIf.Alm[2].eAlmClass := E_AlmClass.OFF;
SIf.Alm[2].strText := 'Initialisation error from barcode reader. No answer from device.';
SIf.Alm[3].eAlmClass := E_AlmClass.INFO;
SIf.Alm[3].strText := 'Barcode could not be read. Answer *NoRead* from device';
SIf.Alm[4].eAlmClass := E_AlmClass.INFO;
SIf.Alm[4].strText := 'Timeout wait on data';
SIf.Alm[5].eAlmClass := E_AlmClass.INFO;
SIf.Alm[5].strText := 'Error response from sensor';
SIf.Alm[6].eAlmClass := E_AlmClass.WARNING;
SIf.Alm[6].strText := 'New scan was triggered during a scan was already in progress!';
SIf.Alm[7].eAlmClass := E_AlmClass.OFF;
SIf.Alm[7].strText := 'Connection is closed';

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// parameter
SIf.Par.udiTORead_ms := 4000;  		// Has to be correspond with the "duration" setting of sensor object trigger
SIf.Par.udiTOPowerOn_ms := 3000;
SIf.Par.udiExecuteScanDelayTime_ms:= 0;

// configuration
SIf.Cfg.strSensorIPAdr := '192.168.1.103';
SIf.Cfg.udiSensorPort := 9004;
SIf.Cfg.iSensorType := E_BCD_Type.KEYENCE;

// simulation
uliSimBarCode:= 1250000000000;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="1a0334c1-a3fb-42e6-951a-2cdf78e7dc68">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states
IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		// cmd's
		CASE intCmdState OF
			cBCC_CMD_READ: 
				getCmdState := 'READ';
		END_CASE;
	ELSE
	
	// cmd's
		CASE intCmdState OF
			cBCC_STA_READBusy: 
				getCmdState := 'READBusy';
			cBCC_STA_READ: 
				getCmdState := 'READ';
		END_CASE;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_READBusy" ObjectId="2777d30e-8db7-406a-9ebe-672a8d796e56">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_READBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Simulation timer	
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiTORead_ms / 2);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
		
		// Init
		SIf.Cur.bolNewCodeReaded:= FALSE;
		SIf.Cur.bolNoRead:= FALSE;
		SIf.Cur.stData.uliBarCode:= 0;
		SIf.Cur.stData.strBarCode:= '';
		
		me.SubStateMachine.intState := BCC_CmdState.cSUB_READDELAYBusy;
		me.SubStateMachine.intStateNext := BCC_CmdState.cSUB_READDELAYBusy;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				SIf.Cur.bolNewCodeReaded:= TRUE;
				uliSimBarCode:= uliSimBarCode + 1;
				pBCD_SIf^.stData.uliBarCode:= uliSimBarCode;
				pBCD_SIf^.stData.strBarCode:= ULINT_TO_STRING(pBCD_SIf^.stData.uliBarCode);
				pBCD_SIf^.intCmd := cBCD_CMD_DONE;		
			END_IF
		END_IF	
		
		CASE me.SubStateMachine.intState OF 
			BCC_CmdState.cSUB_READDELAYBusy:
				IF me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiExecuteScanDelayTime_ms THEN
					me.SubStateMachine.intStateNext := BCC_CmdState.cSUB_SENDREADCOMMAND;
				END_IF

			BCC_CmdState.cSUB_SENDREADCOMMAND:
				// Read barcode
				pBCD_SIf^.intCmd := cBCD_CMD_READ_BARCODE;
				me.SubStateMachine.intStateNext := BCC_CmdState.cSUB_READBusy;
				
			BCC_CmdState.cSUB_READBusy:
				// Check for new barcode
				IF (pBCD_SIf^.stData.uliBarCode &lt;&gt; uliBarCodeOld) AND (pBCD_SIf^.stData.uliBarCode&lt;&gt;0) THEN
					uliBarCodeOld:= pBCD_SIf^.stData.uliBarCode;
					SIf.Cur.bolNewCodeReaded:= TRUE;
				END_IF
				
				// Get data from driver
				SIf.Cur.stData.uliBarCode:= pBCD_SIf^.stData.uliBarCode;
				SIf.Cur.stData.strBarCode:= pBCD_SIf^.stData.strBarCode;			

				IF (me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiTORead_ms) THEN
					// SIf.Alm[4].strText := 'Timeout wait on data';
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,4,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					me.StateMachine.intStateNext :=  cSTA_ERROR;
				END_IF

				IF (pBCD_SIf^.intCmd = cBCD_CMD_DONE) THEN
					IF (SIf.Cur.stData.uliBarCode=0) THEN
						SIf.Cur.bolNoRead:= TRUE;
						uliBarCodeOld:= 0;
						// SIf.Alm[3].strText := 'Barcode could not be read. Answer *NoRead* from device';
						pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,3,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);	
					END_IF		
					me.StateMachine.intStateNext := cBCC_STA_READ;
				END_IF
		END_CASE

		
		// State Change Condition
		IF (pBCD_SIf^.stErr.bolErrorActive = TRUE) OR NOT pBCD_SIf^.stStatus.bolSocketConnected THEN  
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		CIf.Job.intACmd:= cCMD_DONE;
		CIf.Job.intMCmd:= cCMD_DONE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PONBusy" ObjectId="334101e3-ccae-4f85-84ed-31195e895af4">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PONBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	
	// Simulation timer	
	fbSimulationTimer.IN := FALSE;
	fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiTORead_ms / 2);
	fbSimulationTimer(); // set time/reset timer
	fbSimulationTimer.IN := TRUE; // start timer
	
	me.SubStateMachine.intState 		:= cSUB_CLOSESOCKETstart;
	me.SubStateMachine.intStateNext 	:= cSUB_CLOSESOCKETstart;
END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
	// Simulation
	IF (CIf.SwCfg.bolSimulation) THEN
		fbSimulationTimer(); // simulation time
		IF (fbSimulationTimer.Q) THEN
			// Set driver status
			pBCD_SIf^.stStatus.bolSocketConnected := TRUE;
			pBCD_SIf^.stStatus.bolComChecked := TRUE;		
			me.StateMachine.intStateNext := cSTA_PON;
		END_IF
	ELSE
		CASE me.SubStateMachine.intState OF
			cSUB_CLOSESOCKETstart		:
				IF pBCD_SIf^.intCmd = cBCD_CMD_DONE THEN
					pBCD_SIf^.intCmd := cBCD_CMD_CLOSE_SOCKET; 
					me.SubStateMachine.intStateNext := cSUB_CLOSESOCKETbusy;
				END_IF
				
			cSUB_CLOSESOCKETbusy		:
				IF (pBCD_SIf^.stStatus.bolSocketConnected = FALSE) THEN
					me.SubStateMachine.intStateNext := cSUB_CONNECTSOCKETstart;
				END_IF		
	
			cSUB_CONNECTSOCKETstart		:
				IF pBCD_SIf^.intCmd = cBCD_CMD_DONE THEN
					pBCD_SIf^.intCmd := cBCD_CMD_CONNECT_SOCKET; 
					me.SubStateMachine.intStateNext := cSUB_CONNECTSOCKETbusy;
				END_IF
				
			cSUB_CONNECTSOCKETbusy		:
				IF (pBCD_SIf^.stStatus.bolSocketConnected = TRUE) THEN
					me.SubStateMachine.intStateNext := cSUB_TESTSOCKETstart;
				END_IF		
	
			cSUB_TESTSOCKETstart		:
				IF pBCD_SIf^.intCmd = cBCD_CMD_DONE THEN
					pBCD_SIf^.intCmd :=	cBCD_CMD_COM_TEST; // Execute a communication test to see if the device answer		
					me.SubStateMachine.intStateNext := cSUB_TESTSOCKETbusy;
				END_IF;
				
			cSUB_TESTSOCKETbusy			:
				IF (pBCD_SIf^.stStatus.bolComChecked = TRUE) THEN
					me.SubStateMachine.intStateNext := cSUB_DONE;
				END_IF		
	
			cSUB_DONE					:
				me.StateMachine.intStateNext := cSTA_PON;
		END_CASE;		
		
		// State Change Condition
		IF ((pBCD_SIf^.stErr.bolErrorActive = TRUE) OR (me.StateMachine.udiTimeInState_ms &gt;= SIf.Par.udiTOPowerOn_ms)) THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,2,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := cSTA_ERROR;				
		END_IF
	END_IF
END_IF

//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="40bacbd8-90e5-4cfd-89be-61d294ed6bc1">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	// check interlocks to prevent damages
	IF (CIf.Job.bolIlkOverwrite=FALSE) THEN
		;
		// no physical outputs
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="47069f04-7c98-400e-8ad0-a46832cd2757">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	
END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	
	;
	// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
	IF (CIf.Job.bolAlmReset = TRUE) THEN
		CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
		CIf.Job.bolAlmReset := FALSE;
	END_IF
	
	// State Change Condition
	IF (CIf.Job.bolAlmReset = FALSE) THEN
		me.StateMachine.intStateNext := cSTA_PONBusy;
	END_IF
END_IF


//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="543c60ab-0e88-44dc-8407-2023e5ed3710">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_BCC" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="6f1529fe-fc92-48e6-97a4-1ace6185aa97">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    cBCC_STA_READBusy: 
        THIS^.sta_READBusy();
    cBCC_STA_READ: 
        THIS^.sta_READ();	
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="8731517c-5969-45d3-8e4e-e3b35e0e21f1">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Simulation timer	
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiTORead_ms / 2);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
		
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				pBCD_SIf^.intCmd := cBCD_CMD_DONE;
			END_IF
		END_IF
			
		// State Change Condition
		IF (pBCD_SIf^.stErr.bolErrorActive = TRUE) THEN
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF NOT pBCD_SIf^.stStatus.bolSocketConnected THEN
			me.StateMachine.intStateNext :=  Base_PLC.cSTA_PONBusy;
		ELSIF(pBCD_SIf^.intCmd = cBCD_CMD_DONE) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_READ" ObjectId="9437c12b-f1f7-40ae-9361-55220ca1a983">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_READ" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;

END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

	// Simulation
	IF (CIf.SwCfg.bolSimulation) THEN
		;
	END_IF
	
	// State Change Condition
	IF(me.intCmd=cBCC_CMD_READ) THEN
		me.StateMachine.intStateNext := cBCC_STA_READBusy;
	END_IF
	// State Change Condition
	IF (pBCD_SIf^.stErr.bolErrorActive = TRUE) OR NOT pBCD_SIf^.stStatus.bolSocketConnected THEN  
		me.StateMachine.intStateNext :=  cSTA_ERROR;
	END_IF
END_IF

//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="a5e376a5-463e-48a4-95ef-4283ae225167">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		IF NOT pBCD_SIf^.stStatus.bolSocketConnected THEN  
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,7,UDINT_TO_DINT(pBCD_SIf^.stErr.udiErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		END_IF

		// Driver error activ
		IF (pBCD_SIf^.stErr.bolErrorActive = TRUE) THEN
			// SIf.Alm[1].strText := 'Barcode reader driver error'; 
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,1,UDINT_TO_DINT(pBCD_SIf^.stErr.udiErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			// Error response from sensor
			IF (pBCD_SIf^.stErr.bolSensorError = TRUE) THEN
				// SIf.Alm[5].strText := 'Error response from sensor with sopas error number';
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,5,UDINT_TO_DINT(pBCD_SIf^.stErr.udiErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);		
			END_IF
		ELSE
			// Close TCP socket		
			pBCD_SIf^.intCmd := cBCD_CMD_CLOSE_SOCKET;  	
		END_IF
		
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			// Error ack driver 
			pBCD_SIf^.stErr.bolErrAck:= TRUE;
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="c0840189-3aaf-4b0c-bbe0-97624726de38">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
SIf.In.bolSensorTrigScan.map := THIS^.In_bolSensorTrigScan;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolSensorTrigScan));
ELSE
	//simulation of global IO
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="cfd62a73-2bd8-4fed-af32-c5d24dd1f263">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;		
		// State Change Condition
		IF (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.EOFF) AND (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.OFF) THEN	
			IF(me.intCmd=cBCC_CMD_READ) THEN
				me.StateMachine.intStateNext := cBCC_STA_READBusy;
			END_IF
		END_IF

		// State Change Condition
		IF (pBCD_SIf^.stErr.bolErrorActive = TRUE) OR NOT pBCD_SIf^.stStatus.bolSocketConnected THEN  
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="e2d98657-d8c8-409c-bf44-4972b4418587">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

// Simulation
IF (CIf.SwCfg.bolSimulation) THEN
	// Access to driver empty structure
	pBCD_SIf := ADR(stBCD_Sim);
ELSE
	// Access to real driver interface
	pBCD_SIf := pBCD_SIf_In;
END_IF

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	// Handle sensor trigger input
	// --------------------------------------------
	// Check pos. edge of the sensor 
	IF (SIf.In.bolSensorTrigScan.intern) AND NOT (bolSensorTrigScanOld) THEN	
		// Kick-off a new scan
		bolExecuteScan:= TRUE;
	END_IF

	// Execute scan?
	IF (bolExecuteScan) AND (me.StateMachine.intState&lt;&gt;BCC_CmdState.cBCC_STA_READBusy) THEN
		// Wait X-time (time delay) before executing a barcode scan 
		bolExecuteScan:= FALSE;
		me.StateMachine.intStateNext := BCC_CmdState.cBCC_STA_READBusy;

		// Timer handling
		udiScanDelayTimer_ms:= udiScanDelayTimer_ms + me.FUBInfo.udiSample_ms;
	ELSE
		// Reset timer
		udiScanDelayTimer_ms:= 0;
	END_IF
	
	// Check trigger error conditions
	// --------------------------------------------
	// In case if a new scan will be triggered by the sensor trigger input but a scan is already in progress -&gt; set warning!
	// Check if Scan in progress
	IF (me.StateMachine.intState=BCC_CmdState.cBCC_STA_READBusy) THEN
		// New pos. trigger signal detected during scan
		IF (SIf.In.bolSensorTrigScan.intern) AND (bolSensorTrigScanOld &lt;&gt; SIf.In.bolSensorTrigScan.intern) THEN
			// SIf.Alm[6].strText := 'New scan was triggered during a scan was already in progress. Check line speed and barcode reader settings!';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,6,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);	
		END_IF
	END_IF
	
	// Save sensor signal. Used for edge detection
	bolSensorTrigScanOld:= SIf.In.bolSensorTrigScan.intern;
		
	// Status info from driver
	// --------------------------------------------
	SIf.Cur.bolComChecked:= pBCD_SIf^.stStatus.bolComChecked;
	SIf.Cur.bolConnected:= pBCD_SIf^.stStatus.bolSocketConnected;
	
END_IF

// config driver
pBCD_SIf^.stCfg.bolSimulation := CIf.SwCfg.bolSimulation;
pBCD_SIf^.stCfg.strSensorIPAdr := SIf.Cfg.strSensorIPAdr;
pBCD_SIf^.stCfg.udiSensorPort := SIf.Cfg.udiSensorPort;
pBCD_SIf^.stCfg.iSensorType := SIf.Cfg.iSensorType;

// ----------------------------------------------------------------------------------
// Always change actions in Base Library
// ----------------------------------------------------------------------------------
// overrule error always from base -&gt; no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState=cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF

// Conditions Always
IF (((me.Alarm.eActivAlmClass=E_AlmClass.EOFF) OR (me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF))
		 AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) AND
		(me.StateMachine.intState&lt;&gt;cSTA_OFF) AND (me.StateMachine.intState&lt;&gt;cSTA_OFFBusy)) THEN
	// alarm evt EOFF, OFF or cmd off
	me.StateMachine.intStateNext := cSTA_PONBusy;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="ee4f9e12-45a7-4973-8c42-060121364187">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	
END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateNext := cSTA_OFFBusy;
END_IF


//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="1b4c2612-f0db-4df4-b217-85825bea7f19">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_BCC" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>45279440-f702-4acc-823a-1e37aa5791b1</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_CYL" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_bolRetracted">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolExtended">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="Out_bolRetract">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_bolExtend">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_CYL" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Cylinder implementation. 


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		25.04.2013		AVME/KVO	Start history
0.00.2		03.07.2013		AVME/KVO	Always call Super.always, no change to off when switch to automatic
										alarm evt EOFF, OFF or cmd off detection in Always
0.00.3		05.11.2013		AVME/KVO	integrate in BaseElements library, 
										FB alarm pointer used, alarm definition over ENUM
0.00.4		17.02.2014		AVME/KVO	Bug fix transission	PON to OFFBusy added	
___________________________________________________________________________________________________*)


SUPER^();

(*
IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
END_IF;
*)</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="08f577dd-643a-4786-913b-0d67868e1d72">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="ii">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR ii:= 0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[ii].intCmd=cCMD_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR

CIf.Job.aCmdList[ii].intCmd := cCMD_STOP;
CIf.Job.aCmdList[ii].strName := 'Stop'; 
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := cCMD_RETRACT;
CIf.Job.aCmdList[ii].strName := 'Retract';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := cCMD_EXTEND; // for test simulation single answer
CIf.Job.aCmdList[ii].strName := 'Extend';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;

// set name of class/typ
CIf.Info.strType := 'FB_CYL';
CIf.Info.strFullName := 'Cylinder';

// set alarm class
SIf.Alm[E_ALM_CYL.SensorRetractAlwaysOn].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_CYL.SensorRetractAlwaysOn].strText := 'sensor retract always on'; 
SIf.Alm[E_ALM_CYL.SensorExtendNotReached].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_CYL.SensorExtendNotReached].strText := 'timeout extend - sensor extend not reached';
SIf.Alm[E_ALM_CYL.SensorExtendAlwaysOn].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_CYL.SensorExtendAlwaysOn].strText := 'sensor extend always on';
SIf.Alm[E_ALM_CYL.SensorRetractNotReached].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_CYL.SensorRetractNotReached].strText := 'timeout retract - sensor retract not reached';
SIf.Alm[E_ALM_CYL.InterlockExtend].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_CYL.InterlockExtend].strText := 'interlock extend - movement stopped';
SIf.Alm[E_ALM_CYL.InterlockRetract].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_CYL.InterlockRetract].strText := 'interlock retract - movement stopped';

//*******************************************************************************
// initial values
//*******************************************************************************

// Configuration defaults of class
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// Parameter defaults of class
SIf.Par.udiExtendTime_ms := 10000;
SIf.Par.udiRetractTime_ms := 8000;
SIf.Par.udiSimExtendTime_ms := SIf.Par.udiExtendTime_ms/2;	
SIf.Par.udiSimRetractTime_ms := SIf.Par.udiRetractTime_ms/2;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="0c1b41fc-39bc-44e0-8541-bfbf69edbb2f">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states
IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		// cmd's
		CASE intCmdState OF
			CYL_CmdState.cCMD_RETRACT: 
				getCmdState := 'cCMD_RETRACT';
			CYL_CmdState.cCMD_EXTEND: 
				getCmdState := 'cCMD_EXTEND';
		ELSE
			getCmdState := 'Cmd not defined';
		END_CASE;
	ELSE
	
	// cmd's
		CASE intCmdState OF
			CYL_CmdState.cSTA_RETRACTBusy: 
				getCmdState := 'cSTA_RETRACTBusy';
			CYL_CmdState.cSTA_RETRACT: 
				getCmdState := 'cSTA_RETRACT';
			CYL_CmdState.cSTA_EXTENDBusy: 
				getCmdState := 'cSTA_EXTENDBusy';
			CYL_CmdState.cSTA_EXTEND: 
				getCmdState := 'cSTA_EXTEND';
		ELSE
			getCmdState := 'State not defined';
		END_CASE;
	END_IF
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="0fe57ff8-68c2-44b8-80d5-2201b38e9fe0">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bolSwitchValvesOff">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolExtend));
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolRetract));
	
	// check interlocks to prevent damages
	IF (CIf.Job.bolIlkOverwrite=FALSE) THEN
		bolSwitchValvesOff := FALSE;
		
		IF (SIf.Ilk.bolExtend=TRUE) THEN
			// switch off?
			IF (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor0) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor2) 
				OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorExtended) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorRetracted) THEN
				// monostabil valve -&gt; do nothing
			ELSE
				// bistable valve -&gt;  switch both off
				bolSwitchValvesOff := TRUE;
				IF (SIf.Out.bolExtend.map=1) THEN
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_CYL.InterlockExtend,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				END_IF
			END_IF
		END_IF
		
		IF (SIf.Ilk.bolRetract=TRUE) THEN
			// switch off?
			IF (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor0) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor2) 
				OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorExtended) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorRetracted) THEN
				// monostabil valve -&gt; do nothing
				;
			ELSE
				// bistable valve -&gt; switch both off
				bolSwitchValvesOff := TRUE;
				IF (SIf.Out.bolRetract.map=1) THEN
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_CYL.InterlockRetract,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				END_IF;
			END_IF
		END_IF
		
		// bistable valve -&gt; switch both off
		IF (bolSwitchValvesOff) THEN
			SIf.Out.bolExtend.map := FALSE;
			SIf.Out.bolRetract.map := FALSE;
		END_IF
		
	END_IF

	THIS^.Out_bolExtend := SIf.Out.bolExtend.map;
	THIS^.Out_bolRetract := SIf.Out.bolRetract.map;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RETRACT" ObjectId="3b66e273-f213-4b00-bf2e-8c1680623ba4">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RETRACT" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// State Change Condition
		IF (SIf.In.bolExtended.intern) THEN
			// sensor retract always on
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_CYL.SensorExtendAlwaysOn,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF ((SIf.In.bolRetracted.intern = FALSE) AND ((SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorRetracted) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve2_SensorRetracted))) THEN // wait time until error?
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_RETRACTBusy;
		ELSIF(me.intCmd=cCMD_STOP) THEN
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		ELSIF(me.intCmd=CYL_CmdState.cCMD_EXTEND) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_EXTENDBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_EXTEND" ObjectId="5a362c29-6944-468e-b95e-d5dde28f575c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_EXTEND" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// State Change Condition
		IF (SIf.In.bolRetracted.intern) THEN
			// sensor retract always on
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_CYL.SensorRetractAlwaysOn,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF ((SIf.In.bolExtended.intern = FALSE) AND ((SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorExtended) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve2_SensorExtended))) THEN // wait time until error?
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_EXTENDBusy;
		ELSIF(me.intCmd=cCMD_STOP) THEN
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		ELSIF(me.intCmd=CYL_CmdState.cCMD_RETRACT) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_RETRACTBusy;
		END_IF
	END_IF



//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="6beecc92-4557-4446-bfc1-fef0ee13b32b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    CYL_CmdState.cSTA_RETRACTBusy: 
        THIS^.sta_RETRACTBusy();
    CYL_CmdState.cSTA_RETRACT: 
        THIS^.sta_RETRACT();
    CYL_CmdState.cSTA_EXTENDBusy: 
        THIS^.sta_EXTENDBusy();
    CYL_CmdState.cSTA_EXTEND: 
        THIS^.sta_EXTEND();
	cSTA_STOPBusy: 
        THIS^.sta_STOPBusy();
    cSTA_STOP: 
        THIS^.sta_STOP();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="79de6dff-9e6d-49d9-8a00-64865bdf452f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		// State Change Condition
		IF (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.EOFF) AND (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.OFF) THEN
			IF (me.intCmd=cCMD_STOP) THEN
				// sensor retract always on cylinder
				me.StateMachine.intStateNext :=  cSTA_STOPBusy;
			ELSIF (me.intCmd=CYL_CmdState.cCMD_EXTEND) THEN 
				me.StateMachine.intStateNext := cSTA_EXTENDBusy;
			ELSIF(me.intCmd=CYL_CmdState.cCMD_RETRACT) THEN
				me.StateMachine.intStateNext := cSTA_RETRACTBusy;
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RETRACTBusy" ObjectId="79ecf8c4-ba56-4375-a874-2fd846671ab0">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RETRACTBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		SIf.Out.bolExtend.intern := FALSE;
		SIf.Out.bolRetract.intern := TRUE;
		
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiSimRetractTime_ms);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				SIf.In.bolRetracted.intern := TRUE;
				SIf.In.bolExtended.intern := FALSE;
			END_IF
		END_IF
		
		// State Change Condition
		IF (me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiRetractTime_ms) THEN
			IF (SIf.In.bolExtended.intern) THEN
				// sensor extend always on 
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_CYL.SensorExtendAlwaysOn,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			ELSE
				// timeout retract cylinder
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_CYL.SensorRetractNotReached,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF (SIf.In.bolRetracted.intern) AND(SIf.In.bolExtended.intern=FALSE) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_RETRACT;
		ELSIF ((SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorExtended) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve2_SensorExtended))
				 AND (SIf.In.bolExtended.intern=FALSE) AND (me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiSimRetractTime_ms) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_RETRACT;
		ELSIF ((SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor0) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve2_Sensor0))
				AND (me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiSimRetractTime_ms) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_RETRACT;		
		ELSIF(me.intCmd=cCMD_STOP) THEN
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		ELSIF(me.intCmd=CYL_CmdState.cCMD_EXTEND) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_EXTENDBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		SIf.Cur.udiMoveTimeRetract := me.StateMachine.udiTimeInState_ms;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="7ab4f3dd-a34b-49db-afe3-eec69807f97a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// switch off?
		IF (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor0) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor2) 
			OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorExtended) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorRetracted) THEN
			// monostabil valve -&gt; do nothing
			;
		ELSE
			// bistable valve -&gt; switch both off
			SIf.Out.bolExtend.intern := FALSE;
			SIf.Out.bolRetract.intern := FALSE;
		END_IF
		
		
		
		// State Change Condition
		IF (TRUE) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="8e0de5e1-c43c-44e2-87ea-15040cc4e104">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_CYL" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="972603f3-444b-4d87-89a1-65f1c89228fd">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">IF (me.bolChangeBackToAUTO=TRUE) THEN // switch mode to automatic switch off controller
	//me.StateMachine.intStateNext := cSTA_OFFBusy;
	me.bolChangeBackToAUTO := FALSE; // for cylinder no change to off when switch to automatic!!
END_IF

SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	; // always error supervision
	// ----------------------------------------------------------------------------------
	// overrule error always from base -&gt; no EOFF State!! in EOFF go to OFF
	IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
		IF (me.StateMachine.intState=cSTA_OFF) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		ELSE // stay in OFF
			me.StateMachine.intStateNext := cSTA_OFFBusy;
		END_IF
	END_IF
END_IF


</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="a691720d-4358-4f13-bfd1-2bb1ce56f204">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = FALSE) THEN
			IF (me.StateMachine.intStateHistory&lt;=cSTA_PON) THEN
				me.StateMachine.intStateNext := cSTA_PONBusy;
			ELSIF(me.intCmd=cCMD_OFF) THEN
				me.StateMachine.intStateNext := cSTA_OFFBusy;
			ELSIF(me.intCmd=cCMD_STOP) THEN
				me.StateMachine.intStateNext := cSTA_STOPBusy;
			ELSIF(me.intCmd=cCMD_RETRACT) THEN
				me.StateMachine.intStateNext := cSTA_RETRACTBusy;
			ELSIF(me.intCmd=cCMD_EXTEND) THEN
				me.StateMachine.intStateNext := cSTA_EXTENDBusy;
			END_IF
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="ba8a711f-df56-4e52-b8cb-58a04a32635e">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="d0cf526a-f035-4ce6-b0c9-596784ec5c80">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
SIf.In.bolExtended.map := THIS^.In_bolExtended;
SIf.In.bolRetracted.map := THIS^.In_bolRetracted;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolExtended));
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolRetracted));
ELSE
	//simulation of global IO
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STOP" ObjectId="e805ac21-f085-4f33-972a-d6f3bf40c977">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STOP" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (me.intCmd=CYL_CmdState.cCMD_EXTEND) THEN 
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_EXTENDBusy;
		ELSIF(me.intCmd=CYL_CmdState.cCMD_RETRACT) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_RETRACTBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STOPBusy" ObjectId="eae5ff1d-7a66-492a-ab6f-e39a877b1c75">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STOPBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// switch off?
		IF (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor0) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor2) 
			OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorExtended) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorRetracted) THEN
			// monostabil valve -&gt; do nothing
			;
		ELSE
			// bistable valve -&gt; switch both on -&gt; block at position
			SIf.Out.bolExtend.intern := TRUE;
			SIf.Out.bolRetract.intern := TRUE;
		END_IF
		
		
		
		// State Change Condition
		IF (TRUE) THEN
			me.StateMachine.intStateNext := cSTA_STOP;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_EXTENDBusy" ObjectId="ec7636de-ac06-47ad-b7b6-638d46823670">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_EXTENDBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiSimExtendTime_ms);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				SIf.In.bolExtended.intern := TRUE;
				SIf.In.bolRetracted.intern := FALSE;
			END_IF
		END_IF
		
		//no change action
		SIf.Out.bolExtend.intern := TRUE;
		SIf.Out.bolRetract.intern := FALSE;
		
		
		// State Change Condition
		IF (me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiExtendTime_ms) THEN
			IF (SIf.In.bolRetracted.intern) THEN
				// sensor retract always on
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_CYL.SensorRetractAlwaysOn,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			ELSE
				// timeout extend
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_CYL.SensorExtendNotReached,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF (SIf.In.bolExtended.intern) AND (SIf.In.bolRetracted.intern=FALSE) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_EXTEND;
		ELSIF ((SIf.Cfg.eTyp = E_Typ_CYL.Valve1_SensorRetracted) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve2_SensorRetracted))
				 AND (SIf.In.bolRetracted.intern=FALSE) AND (me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiSimExtendTime_ms) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_EXTEND;
		ELSIF ((SIf.Cfg.eTyp = E_Typ_CYL.Valve1_Sensor0) OR (SIf.Cfg.eTyp = E_Typ_CYL.Valve2_Sensor0))
				AND (me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiSimExtendTime_ms) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_EXTEND;		
		ELSIF(me.intCmd=cCMD_STOP) THEN
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		ELSIF(me.intCmd=cCMD_RETRACT) THEN
			me.StateMachine.intStateNext := CYL_CmdState.cSTA_RETRACTBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		SIf.Cur.udiMoveTimeExtend := me.StateMachine.udiTimeInState_ms;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="bd07fe95-31ae-4b74-acba-a6245f2a7bd6">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_CYL" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>59de7442-5445-4be6-b821-033336f62ada</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_DRV" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_bolOverload">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolPulse">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_a_bolBlockedSupvervis">
                    <type>
                      <array>
                        <dimension lower="1" upper="cMAX_BLOCKED_SUP" />
                        <baseType>
                          <BOOL />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="In_bolMaintenanceSwitch">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="Out_bolSpeed_1">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_bolSpeed_2">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_DRV" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolPulseFlag">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="udiPulseTimeoutTimer">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="udiTimerSpeedCalc">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Timer for speed average calculation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aSpeedShift">
                    <type>
                      <array>
                        <dimension lower="0" upper="4" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Shift register for average calculation of the speed</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intSpeedShiftSize">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Size of Speed Shift array for average calculation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinSpeedCalc_um_s">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Varible for Speedcalculation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinSpeedNew_um_s">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Varible for Speedcalculation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinPosOld_um">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Old Position for Speed calculation</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intI">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Loop variable</xhtml>
                    </documentation>
                  </variable>
                  <variable name="a_dintPinDistance">
                    <type>
                      <array>
                        <dimension lower="1" upper="cMAX_BLOCKED_SUP" />
                        <baseType>
                          <DINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Blocked supervision
 Array with supervision distances</xhtml>
                    </documentation>
                  </variable>
                  <variable name="a_bolREBlockedSupvervis">
                    <type>
                      <array>
                        <dimension lower="1" upper="cMAX_BLOCKED_SUP" />
                        <baseType>
                          <BOOL />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="dinPosOldCycle_um">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Old Position for from last cycle</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <localVars constant="true">
                  <variable name="cSpeedCalcTime_ms">
                    <type>
                      <UDINT />
                    </type>
                    <initialValue>
                      <simpleValue value="250" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Check speed every 250ms</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Drive element for all different Drive types, 
Configuration of the type and Speed Calculation


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		27.06.2013		VP/RE		Start history
0.00.2		28.08.2013		AVME/PRE	Implement speed calculation
0.00.3		19.09.2013		AVME/PRE	Implement new Base Concept
0.00.4		02.10.2013		VP/RE		Added pulse counter. Changed pulse distance to 28.4 mm as a default value. Changed driving distance to 305 mm.
0.00.5      10.10.2013		AVME/DSC    In_bolBufferFull deleted. Not needed in DRV controller. Handled by parent controller if necessary.
0.00.6      18.10.2013		AVME/DSC    SIf.Alm[4].strText deleted in FB_init. Not used anymore.
0.00.7		22.10.2013		AVME/MRU	DRV without pulse sensor simulated pulse imroved
0.00.8      23.10.2013		AVME/DSC    Speed calculation from always to state RUN. cSpeedCalcTime_ms -&gt; 250ms. Shift register array 0..4. Clear buffer in state RUN entry action.
										Changes for better position interpolation in controllers like MER, DPJ, DHC and JUN.
0.00.9		09.07.2014		AVME/MRU	Add Maintenance Switch to Drive (Used in Windsor)
										
___________________________________________________________________________________________________*)


SUPER^();

(*
IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
END_IF;
*)</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="114eb374-98a4-4895-bee8-b5e13ddba14f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.EOFF) AND (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.OFF) THEN
			IF (me.intCmd=cCMD_RUN) THEN 
				me.StateMachine.intStateNext := cSTA_RUNBusy;
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="2c38d673-5f6c-40cb-9c9a-af8f5e2ddfe5">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_DRV" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="643f16a1-e025-45a8-a890-bb6333befaac">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	// Error checks not in OFF and Error States
	IF (me.StateMachine.intState&lt;&gt;cSTA_OFF) AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) THEN

		IF (SIf.Cfg.bolEnableMaintenaceSwitch AND SIf.In.bolMaintenanceSwitch.intern) THEN
			// SIf.Alm[4].strText := 'Maintenance Switch is OFF'; 
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,4,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);		
			me.StateMachine.intStateNext := cSTA_ERROR;		
		END_IF

		IF SIf.In.bolOverload.intern THEN
			// SIf.Alm[1].strText := 'Drive overload'; 
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,1,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);		
			me.StateMachine.intStateNext := cSTA_ERROR;		
		END_IF
		
		// Blocked Supervision control
		// Sensor detect Pins, if a defined count of pins are brocken, the machine stops
		FOR intI := 1 TO SIf.Cfg.usiCountBlockedSupervis DO
			
			// Simulation
			// Simulate the Pins in the drive
			IF (CIf.SwCfg.bolSimulation) THEN
				IF (a_dintPinDistance[intI] &gt;  SIf.Cfg.dinPinDistance_um) THEN
					SIf.In.a_bolBlockedSupvervis[intI].intern := TRUE;
				ELSE
					SIf.In.a_bolBlockedSupvervis[intI].intern := FALSE;
				END_IF
			END_IF
		
			// Check if a new pin is arrive, set distance to last pin to '0'
			IF ((SIf.In.a_bolBlockedSupvervis[intI].intern = TRUE) AND (a_bolREBlockedSupvervis[intI] = FALSE)) THEN
				a_bolREBlockedSupvervis[intI] := TRUE;
				a_dintPinDistance[intI] := 0;
			ELSIF ((SIf.In.a_bolBlockedSupvervis[intI].intern = FALSE) AND (a_bolREBlockedSupvervis[intI] = TRUE)) THEN
				a_bolREBlockedSupvervis[intI] := FALSE;
			END_IF
			// Check distance to last Pin, if to far away, set error
			IF (a_dintPinDistance[intI] &gt; ((SIf.Par.int_MaxBrokenPins+1) * SIf.Cfg.dinPinDistance_um)) THEN
				// SIf.Alm[3].strText := 'Drive blocked, Pins are broken'; 
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,3,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				a_dintPinDistance[intI] := 0;		
				me.StateMachine.intStateNext := cSTA_ERROR;		
			ELSE
				a_dintPinDistance[intI] := a_dintPinDistance[intI] + SIf.Cur.dinPos_um - dinPosOldCycle_um;					
			END_IF		
		END_FOR
		dinPosOldCycle_um := SIf.Cur.dinPos_um;
	END_IF
END_IF

// Speed calculation in always function to get correct position everytime, not only in run
// observe no pulse detected failure case 
IF (SIf.In.bolPulse.intern AND NOT(bolPulseFlag)) THEN				
	// calculate CUR
	SIf.Cur.dinPos_um := SIf.Cur.dinPos_um + SIf.Cfg.dinDistPerPulse_um;
	SIf.Cur.dinPulseCounter := SIf.Cur.dinPulseCounter + 1;
		
	udiPulseTimeoutTimer := 0;
	bolPulseFlag := TRUE;
ELSIF (NOT(SIf.In.bolPulse.intern) AND bolPulseFlag) THEN
	bolPulseFlag := FALSE;
END_IF

// Always change actions in Base Library
// ----------------------------------------------------------------------------------
// overrule error always from base -&gt; no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState=cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="6e115bc5-e0d3-49a0-b7c5-189aa0b2fb18">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		SIf.Out.bolSpeed_1.intern := FALSE;
		SIf.Out.bolSpeed_2.intern := FALSE;
		
		// State Change Condition
		IF (TRUE) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="6f47a8ef-2f39-4884-af88-b47d12b014e6">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="ii">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		udiPulseTimeoutTimer := 0;
		bolPulseFlag := FALSE;
		
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udi_pulseSim_ms);  
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
			
		// Get Size of array
		intSpeedShiftSize := SIZEOF(aSpeedShift)/(SIZEOF(aSpeedShift[0]));
		// Clear speed buffer
		FOR ii:=0 TO intSpeedShiftSize-1 BY 1 DO
			aSpeedShift[ii]:=0;
		END_FOR
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// Simulation
		// AND speed simulation if no distance sensor is existing !!!
		IF ((CIf.SwCfg.bolSimulation) OR (SIf.Cfg.bolPulseExist = FALSE)) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				SIf.In.bolPulse.intern := TRUE; 
				In_bolPulse := TRUE; // MRU 22.10.2013 added for drive without pulse sensor
				fbSimulationTimer.IN := FALSE;
			ELSE
				SIf.In.bolPulse.intern := FALSE;
				In_bolPulse := FALSE; // MRU 22.10.2013 added for drive without pulse sensor
				fbSimulationTimer.IN := TRUE;
			END_IF
		END_IF
	
		IF SIf.Cfg.bolSpeedVariable = TRUE THEN
			SetSpeed();
		END_IF;
		
		udiPulseTimeoutTimer := udiPulseTimeoutTimer + me.FUBInfo.udiSample_ms;
		
		
		// Speed calculation
		IF udiTimerSpeedCalc &gt;= cSpeedCalcTime_ms THEN
			dinSpeedNew_um_s := (SIf.Cur.dinPos_um - dinPosOld_um)*1000 / UDINT_TO_DINT(udiTimerSpeedCalc);
			dinSpeedCalc_um_s := dinSpeedNew_um_s;
			// Get Size of array
			intSpeedShiftSize := SIZEOF(aSpeedShift)/(SIZEOF(aSpeedShift[0]));
			intI := intSpeedShiftSize-1;
			WHILE intI &gt; 0 DO		
				// Shift all speeds one field
				aSpeedShift[intI] := aSpeedShift[intI-1];
				dinSpeedCalc_um_s := dinSpeedCalc_um_s + aSpeedShift[intI];
				intI := intI - 1;
			END_WHILE
			aSpeedShift[0] := dinSpeedNew_um_s;
			SIf.Cur.dinSpeed_um_s := dinSpeedCalc_um_s / intSpeedShiftSize;
			dinPosOld_um := SIf.Cur.dinPos_um;
			udiTimerSpeedCalc := 0;
				
		ELSE
			udiTimerSpeedCalc := udiTimerSpeedCalc + me.FUBInfo.udiSample_ms;
		END_IF
		
		
		// State Change Condition
		IF ((udiPulseTimeoutTimer &gt;= Sif.Par.udi_pulseTimeout_ms) AND (SIf.Cfg.bolPulseExist = TRUE)) THEN
			// SIf.Alm[2].strText := 'Timeout no pulse detected';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,2,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);

			me.StateMachine.intStateNext :=  cSTA_ERROR;		
		ELSIF (me.intCmd=cCMD_OFF) THEN
			me.StateMachine.intStateNext :=  cSTA_OFFBusy;
		END_IF
		
	END_IF



//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		// Set speed zero
		SIf.Cur.dinSpeed_um_s := 0;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="8628a7bc-058a-47d8-b52f-15ef6e40e799">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="ii">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR ii:= 0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[ii].intCmd=cCMD_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR
CIf.Job.aCmdList[ii].intCmd := cCMD_RUN;
CIf.Job.aCmdList[ii].strName := 'Run'; 
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;

// set name of class/typ
CIf.Info.strType := 'FB_DRV';
CIf.Info.strFullName := 'Drive';

// set alarm class
SIf.Alm[1].eAlmClass := E_AlmClass.OFF;
SIf.Alm[1].strText := 'Drive overload'; 
SIf.Alm[2].eAlmClass := E_AlmClass.OFF;
SIf.Alm[2].strText := 'Timeout no pulse detected';
SIf.Alm[3].eAlmClass := E_AlmClass.OFF;
SIf.Alm[3].strText := 'Drive blocked, Pins are broken';
SIf.Alm[4].eAlmClass := E_AlmClass.OFF;
SIf.Alm[4].strText := 'Maintenance Switch is OFF'; 

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// parmeter
SIf.Par.udi_pulseTimeout_ms := 2000;
SIf.Par.udi_pulseSim_ms := 56;
SIf.Par.usi_speedLevel := 0;
SIf.Par.int_MaxBrokenPins := 5;

SIf.Cfg.dinDistPerPulse_um := 28400; // 28,4[mm/puls]
SIf.Cfg.usiCountBlockedSupervis := 0;
SIf.Cfg.dinPinDistance_um := 305000;
SIf.Cfg.bolEnableMaintenaceSwitch := FALSE; // Normaly no Maintenance Switch exist</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="9e54f73c-c5f1-450b-a027-e2c0a4ba8cad">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
    cSTA_RUN: 
        THIS^.sta_RUN();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="SetSpeed" ObjectId="a56d404a-7ae4-4439-82b0-a2e594cfa9eb">
                    <interface>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Private="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="SetSpeed" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// 0=slow, 1=middle, 2=fast
CASE SIf.Par.usi_speedLevel OF
	0:
		SIf.Out.bolSpeed_1.intern := TRUE;
		SIf.Out.bolSpeed_2.intern := FALSE;
	1:
		SIf.Out.bolSpeed_1.intern := TRUE;
		SIf.Out.bolSpeed_2.intern := TRUE;
	2:
		SIf.Out.bolSpeed_1.intern := FALSE;
		SIf.Out.bolSpeed_2.intern := TRUE;
	ELSE
		SIf.Out.bolSpeed_1.intern := TRUE;
		SIf.Out.bolSpeed_2.intern := FALSE;
END_CASE</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="abf2d6d2-e1ae-4cba-8c33-fac5a09856c0">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
SIf.In.bolOverload.map := THIS^.In_bolOverload;
SIf.In.bolPulse.map := THIS^.In_bolPulse;
SIf.In.bolMaintenanceSwitch.map := THIS^.In_bolMaintenanceSwitch;

FOR intI := 1 TO SIf.Cfg.usiCountBlockedSupervis DO
	SIf.In.a_bolBlockedSupvervis[intI].map := THIS^.In_a_bolBlockedSupvervis[intI];
	IF (CIf.SwCfg.bolSimulation = FALSE) THEN
		getInBol(CIf.Job.bolIoForce,ADR(SIf.In.a_bolBlockedSupvervis[intI]));
	END_IF
END_FOR

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolOverload));
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolPulse));
	//ctrl.In.bol_PosSwitchBasicDefTyp.intern := getInBol(ctrl.ifc.Job.bol_Force ,ADR(ctrl.In.bol_PosSwitchBasicDefTyp);
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolMaintenanceSwitch));
ELSE
	//simulation of global IO
	SIf.In.bolOverload.intern := FALSE;
	SIf.In.bolMaintenanceSwitch.intern := FALSE;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="b6f8afae-ced3-4019-b3bb-384684e21c5c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	
	SIf.Out.bolSpeed_1.intern := FALSE;
	SIf.Out.bolSpeed_2.intern := FALSE;
	
END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="baf35169-6ce0-4ca9-8b4e-517e7a3aedfb">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF ((me.intCmd=cCMD_OFF) OR (me.intCmd=cCMD_RUN)) THEN
			me.StateMachine.intStateNext := cSTA_OFFBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="c273ebae-f621-49b0-bbde-a6a72c865130">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bolSwitchValvesOff">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolSpeed_1));
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolSpeed_2));

	THIS^.Out_bolSpeed_1 := SIf.Out.bolSpeed_1.map;
	THIS^.Out_bolSpeed_2 := SIf.Out.bolSpeed_2.map;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNBusy" ObjectId="e0541a79-ec22-49f9-be02-61c7af714a1d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		IF SIf.Cfg.bolSpeedVariable = TRUE THEN
			SetSpeed();
		ELSE
			SIf.Out.bolSpeed_1.intern := TRUE;
		END_IF;		
		
		// State Change Condition
		IF (TRUE) THEN
			me.StateMachine.intStateNext := cSTA_RUN;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="0d48173d-eb3f-4817-a35d-a8e1f2a8abb2">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_DRV" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>a09ebb54-dbb7-4b29-b322-5e52fbbdee8c</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_ECD" pouType="functionBlock">
              <interface>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_ECD" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiNumOfStateErrors">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Number State Errors in this cycle</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiNumOfCRCErrors">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Number CRC Errors in this cycle</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinLoop">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Loop variable for request</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinLoopSlave">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Loop variable for Slaves</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinSlaveNbr">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Number of Slaves for internal use</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dinAlarmInfo">
                    <type>
                      <DINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Variable to calculat the error information</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolFBbusy">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Feedback from functions</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolResetCRCError">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Save The Reset of CRC Errors</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolFBerror">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Feedback from functions</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiFBerror">
                    <type>
                      <UDINT />
                    </type>
                  </variable>
                  <variable name="arrSlaveAdress">
                    <type>
                      <array>
                        <dimension lower="0" upper="ECD_Const.cuinMaxSlaves" />
                        <baseType>
                          <UINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Array of all Adresses</xhtml>
                    </documentation>
                  </variable>
                  <variable name="arrSlaveConf">
                    <type>
                      <array>
                        <dimension lower="0" upper="ECD_Const.cuinMaxSlaves" />
                        <baseType>
                          <derived name="Tc2_EtherCAT.ST_EcSlaveConfigData" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Array of all Slave Data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="arrSlaveAbnormalStates">
                    <type>
                      <array>
                        <dimension lower="0" upper="ECD_Const.cuinMaxSlaves" />
                        <baseType>
                          <UDINT />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Array of Abnormal State Changes</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinConfigSlaveNbr">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Number of configurated Slaves</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinErrorSlaveAdr">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Slavenumber internal</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinErrorSlaveNbr">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Numbers of Slave Errors</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinErrorSlaveInfo">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Information of Error</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinErrorSlaveLink">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Adress of Link Error</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinErrorSlaveLinkNbr">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Numbers of Link Error</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinErrorSlaveLinkInfo">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Information of Link Error</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinErrorSlaveAdrCRC">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Slavenumber internal</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinErrorSlaveNbrCRC">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Numbers of Slave Errors</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinErrorSlaveInfoCRC">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Information of Error</xhtml>
                    </documentation>
                  </variable>
                  <variable name="arrAlmtexts">
                    <type>
                      <array>
                        <dimension lower="1" upper="(E_ALM_ECD.MAX_E_ALM - 1)" />
                        <baseType>
                          <string />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Internal Alarmtextes to insert additional informations</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strAlarminfo">
                    <type>
                      <string />
                    </type>
                  </variable>
                  <variable name="fbEcGetAllSlaveAddr">
                    <type>
                      <derived name="Tc2_EtherCAT.FB_EcGetAllSlaveAddr" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Functional Blocks</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbEcGetConfSlaves">
                    <type>
                      <derived name="Tc2_EtherCAT.FB_EcGetConfSlaves" />
                    </type>
                  </variable>
                  <variable name="fbEcGetMasterState">
                    <type>
                      <derived name="Tc2_EtherCAT.FB_EcGetMasterState" />
                    </type>
                  </variable>
                  <variable name="fbEcGetSlaveState">
                    <type>
                      <derived name="Tc2_EtherCAT.FB_EcGetSlaveState" />
                    </type>
                  </variable>
                  <variable name="fbEcGetSlaveCrcError">
                    <type>
                      <derived name="Tc2_EtherCAT.FB_EcGetSlaveCrcErrorEx" />
                    </type>
                  </variable>
                  <variable name="fbEcGetAllSlaveAbnormalStateChanges">
                    <type>
                      <derived name="Tc2_EtherCAT.FB_EcGetAllSlaveAbnormalStateChanges" />
                    </type>
                  </variable>
                  <variable name="fbEcMasterFrameStatisticClearCRC">
                    <type>
                      <derived name="Tc2_EtherCAT.FB_EcMasterFrameStatisticClearCRC" />
                    </type>
                  </variable>
                </localVars>
                <localVars constant="true">
                  <variable name="cSTA_SUB_INITIALIZE">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="500" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Sub states</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cSTA_SUB_GetAllSlaveAdress">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="501" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_GetAllSlaveAdressDone">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="502" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_GetConfSlaves">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="503" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_GetConfSlavesDone">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="504" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_CheckMaster">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="505" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_CheckMasterDone">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="506" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_CheckSlaveChanges">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="507" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_CheckSlaveChangesDone">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="508" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_SLAVE_START">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="509" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_CheckSlaveState">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="510" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_CheckSlaveStateDone">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="511" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_CheckCRC">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="512" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_CheckCRCDone">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="513" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_CheckCRCReset">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="514" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_CheckCRCResetDone">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="515" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_Inc">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="516" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_WAIT_NEXT_POLL">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="517" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_ERROR">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="560" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_DONE">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="520" />
                    </initialValue>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
EtherCAT Diagnostics for Hardware and communication errors
Diagnosis of the EtherCAT with Beckhoff FUB's to check if there are some errors in the network 

History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		25.04.2014		AVME/PRE	Start history

___________________________________________________________________________________________________*)

SUPER^();

(*
IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
END_IF;
*)</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="02e40ca3-8345-4dee-9659-31e56a9b2e60">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		// Initialize sub state machine
		me.SubStateMachine.intState:= cSTA_SUB_INITIALIZE; 
		me.SubStateMachine.intStateNext := cSTA_SUB_INITIALIZE;
	END_IF
	
//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN	
		// State Change Condition
		IF (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.EOFF) AND (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.OFF) THEN	
			IF ((SIf.Cfg.bolRunAlways = TRUE) OR (me.intCmd=BASE_PLC.cCMD_RUN))  THEN
				me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
			END_IF
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="1be99cb1-11ca-4a87-a197-56174323634a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="intI">
                          <type>
                            <INT />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> internal Loop Variable</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bolAlaveOK">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Internal Variable for Found Address</xhtml>
                          </documentation>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		udiNumOfStateErrors:= 0;
		udiNumOfCRCErrors:= 0;
		uinLoop:= 0;
		uinSlaveNbr:= 0;

		// Initialize sub state machine
		me.SubStateMachine.intState:= cSTA_SUB_INITIALIZE; 
		me.SubStateMachine.intStateNext := cSTA_SUB_INITIALIZE;
		
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
			// Simulation
			IF (CIf.SwCfg.bolSimulation) THEN
				me.SubStateMachine.intStateNext := cSTA_SUB_WAIT_NEXT_POLL;
				me.SubStateMachine.udiTimeInState_ms := 0;
			END_IF
			
			// Check if a Reset of the CRC Errors has to be done
			IF ((SIf.Alm[E_ALM_ECD.SlaveCRCError].bol = TRUE) AND (CIf.Job.bolAlmReset = TRUE)) THEN
				bolResetCRCError := TRUE;
				SIf.Alm[E_ALM_ECD.SlaveCRCError].bol := FALSE;
			END_IF
			
		
			// Sub statemachine to set necessary AMS routes and determine the handle ID of all connections in list	
			CASE me.SubStateMachine.intState OF	
			
				cSTA_SUB_INITIALIZE: 
					me.SubStateMachine.intStateNext := cSTA_SUB_CheckMaster;		

				
				// **************************************************************************
				// Call FUB fbEcGetMasterState to get The State of the EtherCAT Master Device
				// **************************************************************************
				cSTA_SUB_CheckMaster:
				
					// Prepare Function Block
					fbEcGetMasterState(sNetId:= SIf.Cfg.strNetID, 
										bExecute:= FALSE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms)); 
				
					// Start Function
					fbEcGetMasterState(bExecute:= TRUE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms)); 
				
					me.SubStateMachine.intStateNext := cSTA_SUB_CheckMasterDone;		
							
				// **************************************************************************
				// Wait until GetAllSlaveAdress is Done
				// **************************************************************************
				cSTA_SUB_CheckMasterDone:
				
					fbEcGetMasterState(bExecute:= FALSE);
					// Wait until done
					IF NOT (fbEcGetMasterState.bBusy) THEN
						IF NOT (fbEcGetMasterState.bError) THEN
							SIf.Cur.worMasterState := fbEcGetMasterState.state;
							SIf.Cur.worMasterState := fbEcGetMasterState.state;
							// In Operational State check slaves
							IF SIf.Cur.worMasterState = Tc2_EtherCAT.EC_DEVICE_STATE_OP THEN
								me.SubStateMachine.intStateNext := cSTA_SUB_GetAllSlaveAdress;
							// In Pre-Operational check again
							ELSIF ((SIf.Cur.worMasterState = Tc2_EtherCAT.EC_DEVICE_STATE_PREOP) OR (SIf.Cur.worMasterState = Tc2_EtherCAT.EC_DEVICE_STATE_PREOP)) THEN
								me.SubStateMachine.intStateNext := cSTA_SUB_CheckMaster;
							// ELSE ERROR
							ELSE
								// SIf.Alm[E_ALM_ECD.MasterStateError].strText := 'Master State Error'; // Master not in the correct state =&gt; Info = Masterstate
								pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.MasterStateError,WORD_TO_DINT(SIf.Cur.worMasterState),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);								
							END_IF
						// Error
						ELSE
							// SIf.Alm[E_ALM_ECD.ADS_ComError].strText := 'ADS Communication Error to EtherCAT Master'; // ADS Communication Error to EtherCAT Master =&gt; Info = ADS_Errorcode
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.ADS_ComError,UDINT_TO_DINT(fbEcGetMasterState.nErrId),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
							me.SubStateMachine.intStateNext := cSTA_SUB_ERROR;		
						END_IF
					END_IF
							
				
				// **************************************************************************
				// Call FUB fbEcGetAllSlaveAddr to get all connected slaves. 
				// **************************************************************************
				cSTA_SUB_GetAllSlaveAdress:
				
					// Prepare Function Block
					fbEcGetAllSlaveAddr(sNetId:= SIf.Cfg.strNetID, 
										pAddrBuf:= ADR(arrSlaveAdress), 
										cbBufLen:= SIZEOF(arrSlaveAdress), 
										bExecute:= FALSE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms));
				
					// Start Function
					fbEcGetAllSlaveAddr(bExecute:= TRUE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms));
				
					me.SubStateMachine.intStateNext := cSTA_SUB_GetAllSlaveAdressDone;		
							
				// **************************************************************************
				// Wait until GetAllSlaveAdress is Done
				// **************************************************************************
				cSTA_SUB_GetAllSlaveAdressDone:
				
					fbEcGetAllSlaveAddr(bExecute:= FALSE);
					// Wait until done
					IF NOT (fbEcGetAllSlaveAddr.bBusy) THEN
						IF NOT (fbEcGetAllSlaveAddr.bError) THEN
							// Prepare data
							SIf.Cur.uinNumOfSlaves := fbEcGetAllSlaveAddr.nSlaves;
							IF SIf.Cur.uinNumOfSlaves &gt; 0 THEN
								FOR uinLoop := 0 TO (SIf.Cur.uinNumOfSlaves-1) DO
									SIf.Cur.stSlaveData[uinLoop].uinAddress := arrSlaveAdress[uinLoop];
								END_FOR
							ELSE
								// SIf.Alm[E_ALM_ECD.NoSlaveFound].strText :=  'No Slave in Network'; 		// No EtherCAT Slave found in the network
								pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.NoSlaveFound,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);								
							END_IF
							me.SubStateMachine.intStateNext := cSTA_SUB_GetConfSlaves;
						// Error
						ELSE
							// SIf.Alm[E_ALM_ECD.ADS_ComError].strText := 'ADS Communication Error to EtherCAT Master'; // ADS Communication Error to EtherCAT Master =&gt; Info = ADS_Errorcode
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.ADS_ComError,UDINT_TO_DINT(fbEcGetAllSlaveAddr.nErrId),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
							me.SubStateMachine.intStateNext := cSTA_SUB_ERROR;		
						END_IF
					END_IF
			
				// **************************************************************************
				// Call FUB fbEcGetConfSlaves to get all configurated slaves. 
				// **************************************************************************
				cSTA_SUB_GetConfSlaves:
				
					// Prepare Function Block
					fbEcGetConfSlaves(sNetId:= SIf.Cfg.strNetID, 
										pArrEcConfSlaveInfo:= ADR(arrSlaveConf), 
										cbBufLen:= SIZEOF(arrSlaveConf), 
										bExecute:= FALSE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms));
				
					// Start Function
					fbEcGetConfSlaves(bExecute:= TRUE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms));
				
					me.SubStateMachine.intStateNext := cSTA_SUB_GetConfSlavesDone;		
							
				// **************************************************************************
				// Wait until fbEcGetConfSlaves is Done
				// **************************************************************************
				cSTA_SUB_GetConfSlavesDone:
				
					fbEcGetConfSlaves(bExecute:= FALSE);
					// Wait until done
					IF NOT (fbEcGetConfSlaves.bBusy) THEN
						IF NOT (fbEcGetConfSlaves.bError) THEN
							// Prepare data
							uinConfigSlaveNbr := fbEcGetConfSlaves.nSlaves;
							IF uinConfigSlaveNbr &gt; 0 THEN
								uinErrorSlaveAdr := 0;
								uinErrorSlaveNbr := 0;
								// Search if configurated Address if found in the hardware found Slaves
								// Loop throug the Configrated Arreay...
								FOR intI := 0 TO (UINT_TO_INT(uinConfigSlaveNbr)-1) DO	
									bolAlaveOK := FALSE;				
									//...and search in the found addresses	
									FOR uinLoop := 0 TO (SIf.Cur.uinNumOfSlaves-1) DO
										IF (WORD_TO_UINT(arrSlaveConf[intI].nAddr) = SIf.Cur.stSlaveData[uinLoop].uinAddress) THEN // Adress of Configurated and found Slave is the same
											// Copy configuration Data in the CUR Structure
											SIf.Cur.stSlaveData[uinLoop].stConfigData := arrSlaveConf[intI];
											// This slave is done
											bolAlaveOK := TRUE;
											EXIT;
										END_IF
									END_FOR
									// If configurated Address is not found in the redaed Hardware addresses, get Address and increment number
									IF bolAlaveOK = FALSE THEN
										IF uinErrorSlaveAdr = 0 THEN // only write the first module in Error as information
											uinErrorSlaveAdr := WORD_TO_UINT(arrSlaveConf[intI].nAddr);
										END_IF
										uinErrorSlaveNbr := uinErrorSlaveNbr + 1;
									END_IF
								END_FOR
								// Error handling if minimal one configurated slave not found
								IF uinErrorSlaveNbr &gt; 0 THEN 		// Minimal one false Slave
									// Get Error Information
									dinAlarmInfo := UDINT_TO_DINT(SHL(UINT_TO_UDINT(uinErrorSlaveNbr),16) OR uinErrorSlaveAdr);
									strAlarminfo := CONCAT(' Slave Number: ' , UINT_TO_STRING(uinErrorSlaveAdr));
									strAlarminfo := CONCAT(strAlarminfo, ' of totally missings: ');
									strAlarminfo := CONCAT(strAlarminfo, UDINT_TO_STRING(uinErrorSlaveNbr));
									SIf.Alm[E_ALM_ECD.NotAllSlaveConnected].strText := CONCAT(arrAlmtexts[E_ALM_ECD.NotAllSlaveConnected], strAlarminfo);
									
									// SIf.Alm[E_ALM_ECD.NotAllSlaveConnected].strText := 'Configuration and actual differences';// // Configured and reached Slaves are not the same =&gt; Info Byte 0+1 = Slave Addres from last error Info Byte 2+3 = Numbers of error Slaves
									pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.NotAllSlaveConnected,dinAlarmInfo,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);																	
								END_IF
								// If more slaves hardware found as configurated also an error
								IF SIf.Cur.uinNumOfSlaves &gt; uinConfigSlaveNbr THEN
									// Search if hardware Address which is not configurated
									// Loop throug the Hardware Arreay...
									FOR uinLoop := 0 TO (SIf.Cur.uinNumOfSlaves-1) DO	
										bolAlaveOK := FALSE;				
										//...and search in the configuration
										FOR intI := 0 TO (UINT_TO_INT(uinConfigSlaveNbr)-1) DO										
											IF (WORD_TO_UINT(arrSlaveConf[intI].nAddr) = SIf.Cur.stSlaveData[uinLoop].uinAddress) THEN // Adress of Configurated and found Slave is the same
												// This slave is done
												bolAlaveOK := TRUE;
												EXIT;
											END_IF
										END_FOR
										// If configurated Address is not found, get Address and increment number
										IF bolAlaveOK = FALSE THEN
											IF uinErrorSlaveAdr = 0 THEN // only write the first module in Error as information
												uinErrorSlaveAdr := WORD_TO_UINT(arrSlaveConf[intI].nAddr);
											END_IF
											uinErrorSlaveNbr := uinErrorSlaveNbr + 1;
										END_IF
									END_FOR
										// Error handling if minimal one configurated slave not found
										IF uinErrorSlaveNbr &gt; 0 THEN 		// Minimal one false Slave
											// Get Error Information
											dinAlarmInfo := UDINT_TO_DINT(SHL(UINT_TO_UDINT(uinErrorSlaveNbr),16) OR uinErrorSlaveAdr);
											// Get Error Information
											dinAlarmInfo := UDINT_TO_DINT(SHL(UINT_TO_UDINT(uinErrorSlaveNbr),16) OR uinErrorSlaveAdr);
											strAlarminfo := CONCAT(' Slave Number: ' , UINT_TO_STRING(uinErrorSlaveAdr));
											strAlarminfo := CONCAT(strAlarminfo, ' of totally missings: ');
											strAlarminfo := CONCAT(strAlarminfo, UDINT_TO_STRING(uinErrorSlaveNbr));
											SIf.Alm[E_ALM_ECD.ToManySlaves].strText := CONCAT(arrAlmtexts[E_ALM_ECD.ToManySlaves], strAlarminfo);
											// SIf.Alm[E_ALM_ECD.ToManySlaves].strText := 'To many slaves';// More slaves at the master as the structure could handle =&gt; Info Byte 0+1 = Slave Addres from last error Info Byte 2+3 = Numbers of error Slaves
											pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.ToManySlaves,dinAlarmInfo,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);																	
										END_IF										
								END_IF
							// No Slaves in Cofiguration Found	
							ELSE
								// SIf.Alm[E_ALM_ECD.NoSlaveFound].strText :=  'No Slave in Network'; 		// No EtherCAT Slave found in the network
								pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.NoSlaveFound,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);								
							END_IF
							me.SubStateMachine.intStateNext := cSTA_SUB_CheckSlaveChanges;
						// Error
						ELSE
							// SIf.Alm[E_ALM_ECD.ADS_ComError].strText := 'ADS Communication Error to EtherCAT Master'; // ADS Communication Error to EtherCAT Master =&gt; Info = ADS_Errorcode
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.ADS_ComError,UDINT_TO_DINT(fbEcGetConfSlaves.nErrorId),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
							me.SubStateMachine.intStateNext := cSTA_SUB_ERROR;		
						END_IF
					END_IF
					
				// **************************************************************************
				// Call FUB fbEcGetAllSlaveAbnormalStateChanges to get The StateChanges
				// **************************************************************************
				cSTA_SUB_CheckSlaveChanges:
				
					// Prepare Function Block
					fbEcGetAllSlaveAbnormalStateChanges(sNetId:= SIf.Cfg.strNetID, 
										pAddrBuf:= ADR(arrSlaveAbnormalStates), 
										cbBufLen:= SIZEOF(arrSlaveAbnormalStates), 
										bExecute:= FALSE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms)); 
				
					// Start Function
					fbEcGetAllSlaveAbnormalStateChanges(bExecute:= TRUE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms)); 
				
					me.SubStateMachine.intStateNext := cSTA_SUB_CheckSlaveChangesDone;		
							
				// **************************************************************************
				// Wait until GetAllSlaveAdress is Done
				// **************************************************************************
				cSTA_SUB_CheckSlaveChangesDone:
				
					fbEcGetAllSlaveAbnormalStateChanges(bExecute:= FALSE);
					// Wait until done
					IF NOT (fbEcGetAllSlaveAbnormalStateChanges.bBusy) THEN
						IF NOT (fbEcGetAllSlaveAbnormalStateChanges.bError) THEN
							// Check Data
							uinErrorSlaveAdr := 0;
							uinErrorSlaveNbr := 0;
							uinErrorSlaveInfo := 0;
							FOR uinLoop := 0 TO (SIf.Cur.uinNumOfSlaves-1) DO
								IF arrSlaveAbnormalStates[uinLoop] &gt; 0 THEN
									IF uinErrorSlaveAdr = 0 THEN // only write the first module in Error as information
										uinErrorSlaveAdr := uinLoop;
										uinErrorSlaveInfo := UDINT_TO_UINT(arrSlaveAbnormalStates[uinLoop]);
									END_IF
									uinErrorSlaveNbr := uinErrorSlaveNbr + 1;
								END_IF
							END_FOR
							// Error from a Slave with too many State Changes
							IF uinErrorSlaveNbr &gt; 0 THEN
								// Get Error Information
								dinAlarmInfo := UDINT_TO_DINT(SHL(UINT_TO_UDINT(uinErrorSlaveNbr),16) OR uinErrorSlaveAdr);
								strAlarminfo := CONCAT(' Slave Number: ' , UINT_TO_STRING(uinErrorSlaveAdr));
								strAlarminfo := CONCAT(strAlarminfo, ' with Errors: ');
								strAlarminfo := CONCAT(strAlarminfo, UDINT_TO_STRING(uinErrorSlaveInfo));
								SIf.Alm[E_ALM_ECD.StateChanges].strText := CONCAT(arrAlmtexts[E_ALM_ECD.StateChanges], strAlarminfo);
								// SIf.Alm[E_ALM_ECD.SlaveCRCError].strText :=  'Slave CRC Error';	// Minimum one Slave has to many CRC Erros =&gt; Byte 0+1 = Slave Addres from last error, Info Byte 2 + 3 = Number of CRC Errors from last Slave with error
								pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.StateChanges,dinAlarmInfo,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);																								
							END_IF
							me.SubStateMachine.intStateNext := cSTA_SUB_SLAVE_START;
						// Error
						ELSE
							// SIf.Alm[E_ALM_ECD.ADS_ComError].strText := 'ADS Communication Error to EtherCAT Master'; // ADS Communication Error to EtherCAT Master =&gt; Info = ADS_Errorcode
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.ADS_ComError,UDINT_TO_DINT(fbEcGetAllSlaveAbnormalStateChanges.nErrId),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
							me.SubStateMachine.intStateNext := cSTA_SUB_ERROR;		
						END_IF
					END_IF
							
				
				
				// **************************************************************************
				// Prepare Data for Slave Checks 
				// **************************************************************************
				cSTA_SUB_SLAVE_START:
					uinLoopSlave := 0;
					uinErrorSlaveAdr := 0;
					uinErrorSlaveNbr := 0;
					uinErrorSlaveInfo := 0;
					uinErrorSlaveAdrCRC := 0;
					uinErrorSlaveNbrCRC := 0;
					uinErrorSlaveInfoCRC := 0;
					uinErrorSlaveLink := 0;
					uinErrorSlaveLinkNbr := 0;
					uinErrorSlaveLinkInfo := 0;
					me.SubStateMachine.intStateNext := cSTA_SUB_CheckSlaveState;
					
				// **************************************************************************
				// Call FUB fbEcGetSlaveState to get the State of 
				// **************************************************************************
				cSTA_SUB_CheckSlaveState:
				
					// Prepare Function Block
					fbEcGetSlaveState(sNetId:= SIf.Cfg.strNetID, 
										nSlaveAddr:= SIf.Cur.stSlaveData[uinLoopSlave].uinAddress, 
										bExecute:= FALSE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckOne_ms));
				
					// Start Function
					fbEcGetSlaveState(bExecute:= TRUE, 
										nSlaveAddr:= SIf.Cur.stSlaveData[uinLoopSlave].uinAddress, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckOne_ms));
				
					me.SubStateMachine.intStateNext := cSTA_SUB_CheckSlaveStateDone;		
							
				// **************************************************************************
				// Wait until GetAllSlaveAdress is Done
				// **************************************************************************
				cSTA_SUB_CheckSlaveStateDone:
				
					fbEcGetSlaveState(bExecute:= FALSE);
					// Wait until done
					IF NOT (fbEcGetSlaveState.bBusy) THEN
						IF NOT (fbEcGetSlaveState.bError) THEN
							// Check State of Slave
							SIf.Cur.stSlaveData[uinLoopSlave].stState := fbEcGetSlaveState.state;
							IF (SIf.Cur.stSlaveData[uinLoopSlave].stState.deviceState &lt;&gt; Tc2_EtherCAT.EC_DEVICE_STATE_OP) THEN
								IF uinErrorSlaveAdr = 0 THEN // only write the first module in Error as information
									uinErrorSlaveAdr := SIf.Cur.stSlaveData[uinLoopSlave].uinAddress;
									uinErrorSlaveInfo := SIf.Cur.stSlaveData[uinLoopSlave].stState.deviceState;
								END_IF
								uinErrorSlaveNbr := uinErrorSlaveNbr+1;
							END_IF
							// Check Link State
							// Word 1 = State, Word 2 = Port
							IF ((SIf.Cur.stSlaveData[uinLoopSlave].stState.linkState AND 16#0F) &gt; 0) THEN
								IF uinErrorSlaveLink = 0 THEN // only write the first module in Error as information
									uinErrorSlaveLink := SIf.Cur.stSlaveData[uinLoopSlave].uinAddress;
									uinErrorSlaveLinkInfo := SIf.Cur.stSlaveData[uinLoopSlave].stState.linkState;
								END_IF
								uinErrorSlaveLinkNbr := uinErrorSlaveNbr+1;
							END_IF
							me.SubStateMachine.intStateNext := cSTA_SUB_CheckCRC;
						// Error
						ELSE
							// SIf.Alm[E_ALM_ECD.ADS_ComError].strText := 'ADS Communication Error to EtherCAT Master'; // ADS Communication Error to EtherCAT Master =&gt; Info = ADS_Errorcode
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.ADS_ComError,UDINT_TO_DINT(fbEcGetSlaveState.nErrId),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
							me.SubStateMachine.intStateNext := cSTA_SUB_ERROR;		
						END_IF
					END_IF
			
				// **************************************************************************
				// Call FUB fbEcGetSlaveCrcError to get the CRC Errors of the Slaves
				// **************************************************************************
				cSTA_SUB_CheckCRC:
				
					// Prepare Function Block
					fbEcGetSlaveCrcError(sNetId:= SIf.Cfg.strNetID, 
										nSlaveAddr:= SIf.Cur.stSlaveData[uinLoopSlave].uinAddress, 
										bExecute:= FALSE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckOne_ms));
				
					// Start Function
					fbEcGetSlaveCrcError(bExecute:= TRUE, 
										nSlaveAddr:= SIf.Cur.stSlaveData[uinLoopSlave].uinAddress, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckOne_ms));
				
					me.SubStateMachine.intStateNext := cSTA_SUB_CheckCRCDone;		
							
				// **************************************************************************
				// Wait until GetAllSlaveAdress is Done
				// **************************************************************************
				cSTA_SUB_CheckCRCDone:
				
					fbEcGetSlaveCrcError(bExecute:= FALSE);
					// Wait until done
					IF NOT (fbEcGetSlaveCrcError.bBusy) THEN
						IF NOT (fbEcGetSlaveCrcError.bError) THEN
							// Check data
							SIf.Cur.stSlaveData[uinLoopSlave].stCRCError := fbEcGetSlaveCrcError.crcError;
							IF (SIf.Cur.stSlaveData[uinLoopSlave].stCRCError.portA &gt;= SIf.Par.udiMaxCRC) THEN
								IF ( (uinErrorSlaveAdrCRC = 0) OR (uinErrorSlaveInfoCRC &lt; UDINT_TO_UINT(SIf.Cur.stSlaveData[uinLoopSlave].stCRCError.portA)) ) THEN // only write the first module in Error as information or the slave with the most CRC errors
									uinErrorSlaveAdrCRC := SIf.Cur.stSlaveData[uinLoopSlave].uinAddress;
									uinErrorSlaveInfoCRC := UDINT_TO_UINT(SIf.Cur.stSlaveData[uinLoopSlave].stCRCError.portA);
								END_IF
								uinErrorSlaveNbrCRC := uinErrorSlaveNbrCRC + 1;
							END_IF
							IF (SIf.Cur.stSlaveData[uinLoopSlave].stCRCError.portB &gt;= SIf.Par.udiMaxCRC) THEN
								IF ( (uinErrorSlaveAdrCRC = 0) OR (uinErrorSlaveInfoCRC &lt; UDINT_TO_UINT(SIf.Cur.stSlaveData[uinLoopSlave].stCRCError.portA)) ) THEN // only write the first module in Error as information or the slave with the most CRC errors
									uinErrorSlaveAdrCRC := SIf.Cur.stSlaveData[uinLoopSlave].uinAddress;
									uinErrorSlaveInfoCRC := UDINT_TO_UINT(SIf.Cur.stSlaveData[uinLoopSlave].stCRCError.portB);
								END_IF
								uinErrorSlaveNbrCRC := uinErrorSlaveNbrCRC + 1;
							END_IF
							IF (SIf.Cur.stSlaveData[uinLoopSlave].stCRCError.portC &gt;= SIf.Par.udiMaxCRC) THEN
								IF ( (uinErrorSlaveAdrCRC = 0) OR (uinErrorSlaveInfoCRC &lt; UDINT_TO_UINT(SIf.Cur.stSlaveData[uinLoopSlave].stCRCError.portA)) ) THEN // only write the first module in Error as information or the slave with the most CRC errors
									uinErrorSlaveAdrCRC := SIf.Cur.stSlaveData[uinLoopSlave].uinAddress;
									uinErrorSlaveInfoCRC := UDINT_TO_UINT(SIf.Cur.stSlaveData[uinLoopSlave].stCRCError.portC);
								END_IF
								uinErrorSlaveNbrCRC := uinErrorSlaveNbrCRC + 1;
							END_IF
							IF (SIf.Cur.stSlaveData[uinLoopSlave].stCRCError.portD &gt;= SIf.Par.udiMaxCRC) THEN
								IF ( (uinErrorSlaveAdrCRC = 0) OR (uinErrorSlaveInfoCRC &lt; UDINT_TO_UINT(SIf.Cur.stSlaveData[uinLoopSlave].stCRCError.portA)) ) THEN // only write the first module in Error as information or the slave with the most CRC errors
									uinErrorSlaveAdrCRC := SIf.Cur.stSlaveData[uinLoopSlave].uinAddress;
									uinErrorSlaveInfoCRC := UDINT_TO_UINT(SIf.Cur.stSlaveData[uinLoopSlave].stCRCError.portD);
								END_IF
								uinErrorSlaveNbrCRC := uinErrorSlaveNbrCRC + 1;
							END_IF
							me.SubStateMachine.intStateNext := cSTA_SUB_Inc;
						// Error
						ELSE
							// SIf.Alm[E_ALM_ECD.ADS_ComError].strText := 'ADS Communication Error to EtherCAT Master'; // ADS Communication Error to EtherCAT Master =&gt; Info = ADS_Errorcode
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.ADS_ComError,UDINT_TO_DINT(fbEcGetSlaveCrcError.nErrId),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
							me.SubStateMachine.intStateNext := cSTA_SUB_ERROR;		
						END_IF
					END_IF

				//************************************************************************
				// Prepare Function for next Slave 
				//************************************************************************	
				cSTA_SUB_Inc:
					IF (uinLoopSlave &lt; (SIf.Cur.uinNumOfSlaves-1)) THEN
						// Another slave to check
						uinLoopSlave := uinLoopSlave + 1;
						me.SubStateMachine.intStateNext := cSTA_SUB_CheckSlaveState;
					// Otherwise all slaves are checked
					ELSE
						// Check states
						// Error handling if minimal one configurated slave not found
						IF uinErrorSlaveNbr &gt; 0 THEN 		// Minimal one false Slave
							// Get Error Information
							dinAlarmInfo := UDINT_TO_DINT(SHL(UINT_TO_UDINT(uinErrorSlaveInfo),16) OR uinErrorSlaveAdr);
							strAlarminfo := CONCAT(' Slave Number: ' , UINT_TO_STRING(uinErrorSlaveAdr));
							strAlarminfo := CONCAT(strAlarminfo, ' in State: ');
							strAlarminfo := CONCAT(strAlarminfo, UDINT_TO_STRING(uinErrorSlaveInfo));
							SIf.Alm[E_ALM_ECD.SlaveStateError].strText := CONCAT(arrAlmtexts[E_ALM_ECD.SlaveStateError], strAlarminfo);
							// SIf.Alm[E_ALM_ECD.SlaveStateError].strText := 'Slave State Error'; // Minimum one Slave not in the correct state =&gt; Byte 0+1 = Slave Addres from last error, Info Byte 2 + 3 = State of last error Slave
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.SlaveStateError,dinAlarmInfo,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);																	
						END_IF	
						// Check Link Error
						IF uinErrorSlaveLinkNbr &gt; 0 THEN 		// Minimal one false Slave
							// Get Error Information
							dinAlarmInfo := UDINT_TO_DINT(SHL(UINT_TO_UDINT(uinErrorSlaveLinkInfo),16) OR uinErrorSlaveLink);
							strAlarminfo := CONCAT(' Slave Number:  ' , UINT_TO_STRING(uinErrorSlaveLink));
							strAlarminfo := CONCAT(strAlarminfo, ' Link Error: ');
							strAlarminfo := CONCAT(strAlarminfo, UDINT_TO_STRING(uinErrorSlaveLinkInfo));
							SIf.Alm[E_ALM_ECD.SlaveLinkError].strText := CONCAT(arrAlmtexts[E_ALM_ECD.SlaveLinkError], strAlarminfo);
							// SIf.Alm[E_ALM_ECD.SlaveLinkError].strText :=  'Slave Link State Error'; // Minimum one Slave has a LinkState Erros =&gt; Byte 0+1 = Slave Addres from last error Info Byte 2 + 3 = Link State of last error Slave
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.SlaveLinkError,dinAlarmInfo,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);																	
						END_IF	
						// Check CRC Errors
						SIf.Cur.udiCRCSumm := 0;
						FOR uinLoop := 0 TO (SIf.Cur.uinNumOfSlaves-1) DO
							// Add all CRC Errors for informations   
							SIf.Cur.udiCRCSumm := SIf.Cur.udiCRCSumm + SIf.Cur.stSlaveData[uinLoop].stCRCError.portA + SIf.Cur.stSlaveData[uinLoop].stCRCError.portB + SIf.Cur.stSlaveData[uinLoop].stCRCError.portC + SIf.Cur.stSlaveData[uinLoop].stCRCError.portD;
						END_FOR
						// Error from a Slave with too many CRC Errors
						IF uinErrorSlaveNbrCRC &gt; 0 THEN
							// Get Error Information
							dinAlarmInfo := UDINT_TO_DINT(SHL(UINT_TO_UDINT(uinErrorSlaveInfoCRC),16) OR uinErrorSlaveAdrCRC);
							strAlarminfo := CONCAT(' Slave Number: ' , UINT_TO_STRING(uinErrorSlaveAdrCRC));
							strAlarminfo := CONCAT(strAlarminfo, ' CRC Errors: ');
							strAlarminfo := CONCAT(strAlarminfo, UDINT_TO_STRING(uinErrorSlaveInfoCRC));
							SIf.Alm[E_ALM_ECD.SlaveCRCError].strText := CONCAT(arrAlmtexts[E_ALM_ECD.SlaveCRCError], strAlarminfo);
							// SIf.Alm[E_ALM_ECD.SlaveCRCError].strText :=  'Slave CRC Error';	// Minimum one Slave has to many CRC Erros =&gt; Byte 0+1 = Slave Addres from last error, Info Byte 2 + 3 = Number of CRC Errors from last Slave with error
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.SlaveCRCError,dinAlarmInfo,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);																								
							SIf.Alm[E_ALM_ECD.SlaveCRCError].bol := TRUE;
						END_IF
						me.SubStateMachine.intStateNext := cSTA_SUB_WAIT_NEXT_POLL;
						
					END_IF
		
				//************************************************************************
				// Wait for next polling - Connection list completely processed 
				//************************************************************************	
				cSTA_SUB_WAIT_NEXT_POLL:
				
					// Wait polling time expired 	
					IF (me.SubStateMachine.udiTimeInState_ms &gt;= SIf.Par.udiPollingInterval_ms) THEN				
						//Start again at first connection in list
						me.SubStateMachine.intStateNext := cSTA_SUB_INITIALIZE;
					ELSIF bolResetCRCError = TRUE THEN
						me.SubStateMachine.intStateNext := cSTA_SUB_CheckCRCReset;						
					END_IF
					
				// **************************************************************************
				// Call FUB fbEcMasterFrameStatisticClearCRC to reset all CRC Errors of the Slaves
				// **************************************************************************
				cSTA_SUB_CheckCRCReset:
				
					// Prepare Function Block
					fbEcMasterFrameStatisticClearCRC(sNetId:= SIf.Cfg.strNetID, 
										bExecute:= FALSE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms));
				
					// Start Function
					fbEcMasterFrameStatisticClearCRC(bExecute:= TRUE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms));
				
					me.SubStateMachine.intStateNext := cSTA_SUB_CheckCRCResetDone;		
							
				// **************************************************************************
				// Wait until Reset all CRC Error is Done
				// **************************************************************************
				cSTA_SUB_CheckCRCResetDone:
				
					fbEcMasterFrameStatisticClearCRC(bExecute:= FALSE);
					// Wait until done
					IF NOT (fbEcMasterFrameStatisticClearCRC.bBusy) THEN
						IF NOT (fbEcMasterFrameStatisticClearCRC.bError) THEN
							me.SubStateMachine.intStateNext := cSTA_SUB_WAIT_NEXT_POLL;
							bolResetCRCError := FALSE;
						// Error
						ELSE
							// SIf.Alm[E_ALM_ECD.ADS_ComError].strText := 'ADS Communication Error to EtherCAT Master'; // ADS Communication Error to EtherCAT Master =&gt; Info = ADS_Errorcode
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.ADS_ComError,UDINT_TO_DINT(fbEcGetSlaveCrcError.nErrId),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
							me.SubStateMachine.intStateNext := cSTA_SUB_ERROR;		
						END_IF
					END_IF

				//************************************************************************
				// ERROR			
				//************************************************************************	
				cSTA_SUB_ERROR:
					// SIf.Alm[E_ALM_ECD.ADS_ComError].strText := 'ADS Communication Error to EtherCAT Master'; // ADS Communication Error to EtherCAT Master =&gt; Info = ADS_Errorcode
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.ADS_ComError,UDINT_TO_DINT(udiFBerror),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					me.StateMachine.intStateNext := BASE_PLC.cSTA_ERROR;	
			
				
			END_CASE	
			
		
		// State Change Condition
		IF ((me.SubStateMachine.intState=cSTA_SUB_ERROR) OR ((me.SubStateMachine.udiTimeInState_ms &gt;= SIf.Par.udiTOPowerOn_ms) AND (me.SubStateMachine.intState &lt;&gt; cSTA_SUB_WAIT_NEXT_POLL))) THEN
			// In case if TO
			IF (me.SubStateMachine.udiTimeInState_ms &gt;= SIf.Par.udiTOPowerOn_ms) THEN
				// SIf.Alm[E_ALM_ECD.TimeOutFunction].strText := 'Timeout EtherCAT function'; // A Function is not finished after the defined Timeout
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.TimeOutFunction,UDINT_TO_DINT(me.SubStateMachine.udiTimeInState_ms),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF
			me.StateMachine.intStateNext := cSTA_ERROR;				
		END_IF
			
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF

</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PONBusy" ObjectId="2cd4b2e3-2ca2-409e-beff-ad01f0513a4c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="ii">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="bolSlaveOK">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Internal Variable for Found Address</xhtml>
                          </documentation>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PONBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		udiNumOfStateErrors:= 0;
		udiNumOfCRCErrors:= 0;
		uinLoop:= 0;
		uinSlaveNbr:= 0;

		// Initialize sub state machine
		me.SubStateMachine.intState:= cSTA_SUB_INITIALIZE; 
		me.SubStateMachine.intStateNext := cSTA_SUB_INITIALIZE;
		
		// Get stored alarmtextes into local Texts
		FOR ii := 1 TO (E_ALM_ECD.MAX_E_ALM - 1) DO
			arrAlmtexts[ii] := SIf.Alm[ii].strText;
		END_FOR
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
			// Simulation
			IF (CIf.SwCfg.bolSimulation) THEN
				me.SubStateMachine.intStateNext := cSTA_SUB_DONE;
			END_IF
		
			// Sub statemachine to set necessary AMS routes and determine the handle ID of all connections in list	
			CASE me.SubStateMachine.intState OF	
			
				cSTA_SUB_INITIALIZE: 
					me.SubStateMachine.intStateNext := cSTA_SUB_CheckMaster;		

				
				// **************************************************************************
				// Call FUB fbEcGetMasterState to get The State of the EtherCAT Master Device
				// **************************************************************************
				cSTA_SUB_CheckMaster:
				
					// Prepare Function Block
					fbEcGetMasterState(sNetId:= SIf.Cfg.strNetID, 
										bExecute:= FALSE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms)); 
				
					// Start Function
					fbEcGetMasterState(bExecute:= TRUE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms)); 
				
					me.SubStateMachine.intStateNext := cSTA_SUB_CheckMasterDone;		
							
				// **************************************************************************
				// Wait until GetAllSlaveAdress is Done
				// **************************************************************************
				cSTA_SUB_CheckMasterDone:
				
					fbEcGetMasterState(bExecute:= FALSE);
					// Wait until done
					IF NOT (fbEcGetMasterState.bBusy) THEN
						IF NOT (fbEcGetMasterState.bError) THEN
							SIf.Cur.worMasterState := fbEcGetMasterState.state;
							// In Operational State check slaves
							IF SIf.Cur.worMasterState = Tc2_EtherCAT.EC_DEVICE_STATE_OP THEN
								me.SubStateMachine.intStateNext := cSTA_SUB_GetAllSlaveAdress;
							// In Pre-Operational check again
							ELSIF ((SIf.Cur.worMasterState = Tc2_EtherCAT.EC_DEVICE_STATE_PREOP) OR (SIf.Cur.worMasterState = Tc2_EtherCAT.EC_DEVICE_STATE_PREOP)) THEN
								me.SubStateMachine.intStateNext := cSTA_SUB_CheckMaster;
							// ELSE ERROR
							ELSE
								// SIf.Alm[E_ALM_ECD.MasterStateError].strText := 'Master State Error'; // Master not in the correct state =&gt; Info = Masterstate
								pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.MasterStateError,WORD_TO_DINT(SIf.Cur.worMasterState),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);								
							END_IF
						// Error
						ELSE
							// SIf.Alm[E_ALM_ECD.ADS_ComError].strText := 'ADS Communication Error to EtherCAT Master'; // ADS Communication Error to EtherCAT Master =&gt; Info = ADS_Errorcode
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.ADS_ComError,UDINT_TO_DINT(fbEcGetMasterState.nErrId),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
							me.SubStateMachine.intStateNext := cSTA_SUB_ERROR;		
						END_IF
					END_IF
							
				
				// **************************************************************************
				// Call FUB fbEcGetAllSlaveAddr to get all connected slaves. 
				// **************************************************************************
				cSTA_SUB_GetAllSlaveAdress:
				
					// Prepare Function Block
					fbEcGetAllSlaveAddr(sNetId:= SIf.Cfg.strNetID, 
										pAddrBuf:= ADR(arrSlaveAdress), 
										cbBufLen:= SIZEOF(arrSlaveAdress), 
										bExecute:= FALSE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms));
				
					// Start Function
					fbEcGetAllSlaveAddr(bExecute:= TRUE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms));
				
					me.SubStateMachine.intStateNext := cSTA_SUB_GetAllSlaveAdressDone;		
							
				// **************************************************************************
				// Wait until GetAllSlaveAdress is Done
				// **************************************************************************
				cSTA_SUB_GetAllSlaveAdressDone:
				
					fbEcGetAllSlaveAddr(bExecute:= FALSE);
					// Wait until done
					IF NOT (fbEcGetAllSlaveAddr.bBusy) THEN
						IF NOT (fbEcGetAllSlaveAddr.bError) THEN
							// Prepare data
							SIf.Cur.uinNumOfSlaves := fbEcGetAllSlaveAddr.nSlaves;
							IF SIf.Cur.uinNumOfSlaves &gt; 0 THEN
								FOR uinLoop := 0 TO (SIf.Cur.uinNumOfSlaves-1) DO
									SIf.Cur.stSlaveData[uinLoop].uinAddress := arrSlaveAdress[uinLoop];
								END_FOR
							ELSE
								// SIf.Alm[E_ALM_ECD.NoSlaveFound].strText :=  'No Slave in Network'; 		// No EtherCAT Slave found in the network
								pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.NoSlaveFound,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);								
							END_IF
							me.SubStateMachine.intStateNext := cSTA_SUB_GetConfSlaves;
						// Error
						ELSE
							// SIf.Alm[E_ALM_ECD.ADS_ComError].strText := 'ADS Communication Error to EtherCAT Master'; // ADS Communication Error to EtherCAT Master =&gt; Info = ADS_Errorcode
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.ADS_ComError,UDINT_TO_DINT(fbEcGetAllSlaveAddr.nErrId),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
							me.SubStateMachine.intStateNext := cSTA_SUB_ERROR;		
						END_IF
					END_IF
			
				// **************************************************************************
				// Call FUB fbEcGetConfSlaves to get all configurated slaves. 
				// **************************************************************************
				cSTA_SUB_GetConfSlaves:
				
					// Prepare Function Block
					fbEcGetConfSlaves(sNetId:= SIf.Cfg.strNetID, 
										pArrEcConfSlaveInfo:= ADR(arrSlaveConf), 
										cbBufLen:= SIZEOF(arrSlaveConf), 
										bExecute:= FALSE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms));
				
					// Start Function
					fbEcGetConfSlaves(bExecute:= TRUE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms));
				
					me.SubStateMachine.intStateNext := cSTA_SUB_GetConfSlavesDone;		
							
				// **************************************************************************
				// Wait until fbEcGetConfSlaves is Done
				// **************************************************************************
				cSTA_SUB_GetConfSlavesDone:
				
					fbEcGetConfSlaves(bExecute:= FALSE);
					// Wait until done
					IF NOT (fbEcGetConfSlaves.bBusy) THEN
						IF NOT (fbEcGetConfSlaves.bError) THEN
							// Prepare data
							uinConfigSlaveNbr := fbEcGetConfSlaves.nSlaves;
							IF uinConfigSlaveNbr &gt; 0 THEN
								uinErrorSlaveAdr := 0;
								uinErrorSlaveNbr := 0;
								// Search if configurated Address if found in the hardware found Slaves
								// Loop throug the Configrated Arreay...
								FOR ii := 0 TO (uinConfigSlaveNbr-1) DO	
									bolSlaveOK := FALSE;				
									//...and search in the found addresses	
									FOR uinLoop := 0 TO (SIf.Cur.uinNumOfSlaves-1) DO
										IF (WORD_TO_UINT(arrSlaveConf[ii].nAddr) = SIf.Cur.stSlaveData[uinLoop].uinAddress) THEN // Adress of Configurated and found Slave is the same
											// Copy configuration Data in the CUR Structure
											SIf.Cur.stSlaveData[uinLoop].stConfigData := arrSlaveConf[ii];
											// This slave is done
											bolSlaveOK := TRUE;
											EXIT;
										END_IF
									END_FOR
									// If configurated Address is not found in the redaed Hardware addresses, get Address and increment number
									IF bolSlaveOK = FALSE THEN
										IF uinErrorSlaveAdr = 0 THEN // only write the first module in Error as information
											uinErrorSlaveAdr := WORD_TO_UINT(arrSlaveConf[ii].nAddr);
										END_IF
										uinErrorSlaveNbr := uinErrorSlaveNbr + 1;
									END_IF
								END_FOR
								// Error handling if minimal one configurated slave not found
								IF uinErrorSlaveNbr &gt; 0 THEN 		// Minimal one false Slave
									// Get Error Information
									dinAlarmInfo := UDINT_TO_DINT(SHL(UINT_TO_UDINT(uinErrorSlaveNbr),16) OR uinErrorSlaveAdr);
									strAlarminfo := CONCAT( 'Slave Number: ' , UINT_TO_STRING(uinErrorSlaveAdr));
									strAlarminfo := CONCAT(strAlarminfo, ' of totally missings: ');
									strAlarminfo := CONCAT(strAlarminfo, UDINT_TO_STRING(uinErrorSlaveNbr));
									
									SIf.Alm[E_ALM_ECD.NotAllSlaveConnected].strText := CONCAT(arrAlmtexts[E_ALM_ECD.NotAllSlaveConnected], strAlarminfo);
									
									// SIf.Alm[E_ALM_ECD.NotAllSlaveConnected].strText := 'Configuration and actual differences';// // Configured and reached Slaves are not the same =&gt; Info Byte 0+1 = Slave Addres from last error Info Byte 2+3 = Numbers of error Slaves
									pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.NotAllSlaveConnected,dinAlarmInfo,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);																	
								END_IF
								// If more slaves hardware found as configurated also an error
								IF SIf.Cur.uinNumOfSlaves &gt; uinConfigSlaveNbr THEN
									// Search if hardware Address which is not configurated
									// Loop throug the Hardware Arreay...
									FOR uinLoop := 0 TO (SIf.Cur.uinNumOfSlaves-1) DO	
										bolSlaveOK := FALSE;				
										//...and search in the configuration
										FOR ii := 0 TO (uinConfigSlaveNbr-1) DO										
											IF (WORD_TO_UINT(arrSlaveConf[ii].nAddr) = SIf.Cur.stSlaveData[uinLoop].uinAddress) THEN // Adress of Configurated and found Slave is the same
												// This slave is done
												bolSlaveOK := TRUE;
												EXIT;
											END_IF
										END_FOR
										// If configurated Address is not found, get Address and increment number
										IF bolSlaveOK = FALSE THEN
											IF uinErrorSlaveAdr = 0 THEN // only write the first module in Error as information
												uinErrorSlaveAdr := WORD_TO_UINT(arrSlaveConf[ii].nAddr);
											END_IF
											uinErrorSlaveNbr := uinErrorSlaveNbr + 1;
										END_IF
									END_FOR
										// Error handling if minimal one configurated slave not found
										IF uinErrorSlaveNbr &gt; 0 THEN 		// Minimal one false Slave
											// Get Error Information
											strAlarminfo := CONCAT(' Slave Number: ' , UINT_TO_STRING(uinErrorSlaveAdr));
											strAlarminfo := CONCAT(strAlarminfo, ' of totally missings: ');
											strAlarminfo := CONCAT(strAlarminfo, UDINT_TO_STRING(uinErrorSlaveNbr));
											
											SIf.Alm[E_ALM_ECD.ToManySlaves].strText := CONCAT(arrAlmtexts[E_ALM_ECD.ToManySlaves], strAlarminfo);
											dinAlarmInfo := UDINT_TO_DINT(SHL(UINT_TO_UDINT(uinErrorSlaveNbr),16) OR uinErrorSlaveAdr);
											// SIf.Alm[E_ALM_ECD.ToManySlaves].strText := 'To many slaves';// More slaves at the master as the structure could handle =&gt; Info Byte 0+1 = Slave Addres from last error Info Byte 2+3 = Numbers of error Slaves
											pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.ToManySlaves,dinAlarmInfo,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);																	
										END_IF										
								END_IF
							// No Slaves in Cofiguration Found	
							ELSE
								// SIf.Alm[E_ALM_ECD.NoSlaveFound].strText :=  'No Slave in Network'; 		// No EtherCAT Slave found in the network
								pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.NoSlaveFound,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);								
							END_IF
							me.SubStateMachine.intStateNext := cSTA_SUB_DONE;
						// Error
						ELSE
							// SIf.Alm[E_ALM_ECD.ADS_ComError].strText := 'ADS Communication Error to EtherCAT Master'; // ADS Communication Error to EtherCAT Master =&gt; Info = ADS_Errorcode
							pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.ADS_ComError,UDINT_TO_DINT(fbEcGetConfSlaves.nErrorId),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
							me.SubStateMachine.intStateNext := cSTA_SUB_ERROR;		
						END_IF
					END_IF
			

				
				// **************************************************************************
				// All necessary AMS routes set and connection handles are determined 
				// **************************************************************************
				cSTA_SUB_DONE:
				
				// **************************************************************************
				// Error
				// **************************************************************************
				cSTA_SUB_ERROR:
				
			END_CASE	
			
		
		// State Change Condition
		IF ((me.SubStateMachine.intState=cSTA_SUB_ERROR) OR (me.StateMachine.udiTimeInState_ms &gt;= SIf.Par.udiTOPowerOn_ms)) THEN
			// In case if TO
			IF (me.StateMachine.udiTimeInState_ms &gt;= SIf.Par.udiTOPowerOn_ms) THEN
				// SIf.Alm[E_ALM_ECD.TimeOutFunction].strText := 'Timeout EtherCAT function'; // A Function is not finished after the defined Timeout
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.TimeOutFunction,UDINT_TO_DINT(me.StateMachine.udiTimeInState_ms),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF
			me.StateMachine.intStateNext := cSTA_ERROR;				
		ELSIF (me.SubStateMachine.intState=cSTA_SUB_DONE) THEN
			me.StateMachine.intStateNext := cSTA_PON;
		END_IF
			
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="333c5c46-87eb-4a59-90e3-182833d9400c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		// Prepare Function Block
		bolResetCRCError := TRUE;
		fbEcMasterFrameStatisticClearCRC(sNetId:= SIf.Cfg.strNetID, 
										bExecute:= FALSE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms));
				
		// Start Function
		fbEcMasterFrameStatisticClearCRC(bExecute:= TRUE, 
										tTimeout:= UDINT_TO_TIME(SIf.Par.udiTOCheckAll_ms));
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		// **************************************************************************
		// Wait until Reset all CRC Error is Done
		// **************************************************************************
			fbEcMasterFrameStatisticClearCRC(bExecute:= FALSE);
			// Wait until done
			IF NOT (fbEcMasterFrameStatisticClearCRC.bBusy) THEN
				IF NOT (fbEcMasterFrameStatisticClearCRC.bError) THEN
					bolResetCRCError := FALSE;
				// Error
				ELSE
					// SIf.Alm[E_ALM_ECD.ADS_ComError].strText := 'ADS Communication Error to EtherCAT Master'; // ADS Communication Error to EtherCAT Master =&gt; Info = ADS_Errorcode
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_ECD.ADS_ComError,UDINT_TO_DINT(fbEcGetSlaveCrcError.nErrId),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					me.StateMachine.intStateNext := cSTA_SUB_ERROR;		
				END_IF
			END_IF
		
		// State Change Condition
		IF ((CIf.Job.bolAlmReset = FALSE) AND (bolResetCRCError = FALSE)) THEN
			IF (me.StateMachine.intStateHistory&lt;=cSTA_PON) THEN
				me.StateMachine.intStateNext := cSTA_PONBusy;
			ELSIF ((SIf.Cfg.bolRunAlways = TRUE) OR (me.intCmd=BASE_PLC.cCMD_RUN)) THEN
				me.StateMachine.intStateNext := cSTA_RUNBusy;
			ELSE
				me.StateMachine.intStateNext := cSTA_OFFBusy;
			END_IF
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="3b27a24d-3662-4f62-b0ac-ba0540163417">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	;	
END_IF


// ----------------------------------------------------------------------------------
// Always change actions in Base Library
// ----------------------------------------------------------------------------------
// overrule error always from base -&gt; no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState=cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="3ff121ce-11c0-4fa8-addc-65cf351fcf1d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="udiTaskCnt">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                        <variable name="ii">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR ii:= 0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[ii].intCmd=cCMD_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR
CIf.Job.aCmdList[ii].intCmd := cCMD_RUN;
CIf.Job.aCmdList[ii].strName := 'Run'; 
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;

// set name of class/typ
CIf.Info.strType := 'FB_ECD';
CIf.Info.strFullName := 'EtherCAT Diagnostic';

// set alarm class
SIf.Alm[E_ALM_ECD.ADS_ComError].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_ECD.ADS_ComError].strText := 'ADS Communication Error to EtherCAT Master'; // ADS Communication Error to EtherCAT Master =&gt; Info = ADS_Errorcode
SIf.Alm[E_ALM_ECD.TimeOutFunction].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_ECD.TimeOutFunction].strText := 'Timeout EtherCAT function'; // A Function is not finished after the defined Timeout
SIf.Alm[E_ALM_ECD.NotAllSlaveConnected].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_ECD.NotAllSlaveConnected].strText := 'Not all configurated Slaves Found ';// Configured and reached Slaves are not the same =&gt; Info Byte 0+1 = Slave Addres from last error Info Byte 2+3 = Numbers of error Slaves
SIf.Alm[E_ALM_ECD.ToManySlaves].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_ECD.ToManySlaves].strText := 'To many slaves';// More slaves at the master as the structure could handle =&gt; Info Byte 0+1 = Slave Addres from last error Info Byte 2+3 = Numbers of error Slaves
SIf.Alm[E_ALM_ECD.MasterStateError].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_ECD.MasterStateError].strText := 'Master State Error'; // Master not in the correct state =&gt; Info = Masterstate
SIf.Alm[E_ALM_ECD.SlaveStateError].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_ECD.SlaveStateError].strText := 'Slave State Error'; // Minimum one Slave not in the correct state =&gt; Byte 0+1 = Slave Addres from first error, Info Byte 2 + 3 = State of first error Slave
SIf.Alm[E_ALM_ECD.SlaveCRCError].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_ECD.SlaveCRCError].strText :=  'Slave CRC Error';	// Minimum one Slave has to many CRC Erros =&gt; Byte 0+1 = Slave Addres from first error or the one with the most CRC errors, Info Byte 2 + 3 = Number of CRC Errors from first Slave with error
SIf.Alm[E_ALM_ECD.SlaveLinkError].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_ECD.SlaveLinkError].strText :=  'Slave Link State Error'; // Minimum one Slave has a LinkState Erros =&gt; Byte 0+1 = Slave Addres from first error Info Byte 2 + 3 = Link State of first error Slave
SIf.Alm[E_ALM_ECD.NoSlaveFound].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_ECD.NoSlaveFound].strText :=  'No Slave in Network'; 		// No EtherCAT Slave found in the network
SIf.Alm[E_ALM_ECD.StateChanges].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_ECD.StateChanges].strText :=  'To many Abnormal State Changes'; 		// No EtherCAT Slave found in the network

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// parameter
SIf.Par.udiTOCheckOne_ms:= 1500;
SIf.Par.udiTOCheckAll_ms:= 5000;
SIf.Par.udiTOPowerOn_ms:= 10000;
SIf.Par.udiPollingInterval_ms:= 10000;
SIf.Par.udiMaxCRC:= 50;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNBusy" ObjectId="6598c86e-bc38-4e9a-9e3b-f22dccb24314">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		;
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (TRUE) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUN;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="724f052e-faae-482c-af16-153019b383d6">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
    cSTA_RUN: 
        THIS^.sta_RUN();				
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="876f0e49-e9c1-49e4-b503-d87cb82aa3e0">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Initialize sub state machine
		me.SubStateMachine.intState:= cSTA_SUB_INITIALIZE; 
		me.SubStateMachine.intStateNext := cSTA_SUB_INITIALIZE;
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="9de49631-3c4b-425f-8cc9-cd4acf422a4e">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_ECD" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="c0d150d4-d1ae-426e-9be5-d64068fb4cb7">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;	
		// State Change Condition
		IF ((me.intCmd&lt;&gt;cCMD_PON) AND (me.intCmd&lt;&gt;cCMD_DONE)) OR (SIf.Cfg.bolRunAlways = TRUE) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_OFFBusy;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="feee4ac9-1fc5-4241-8928-60636091e9ca">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states
IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		(*
		// cmd's
		CASE intCmdState OF
			;
		END_CASE
		*)
	ELSE
		// states
		CASE intCmdState OF
			// SUB States
			cSTA_SUB_INITIALIZE:
				getCmdState := 'cSTA_SUB_INITIALIZE';
			cSTA_SUB_GetAllSlaveAdress:
				getCmdState := 'cSTA_SUB_GetAllSlaveAdress';
			cSTA_SUB_GetAllSlaveAdressDone:
				getCmdState := 'cSTA_SUB_GetAllSlaveAdressDone';
			cSTA_SUB_GetConfSlaves:
				getCmdState := 'cSTA_SUB_GetConfSlaves';
			cSTA_SUB_GetConfSlavesDone:
				getCmdState := 'cSTA_SUB_GetConfSlavesDone';			
			cSTA_SUB_CheckMaster:
				getCmdState := 'cSTA_SUB_CheckMaster';	
			cSTA_SUB_CheckMasterDone:
				getCmdState := 'cSTA_SUB_CheckMasterDone';	
			cSTA_SUB_CheckSlaveChanges:
				getCmdState := 'cSTA_SUB_CheckSlaveChanges';	
			cSTA_SUB_CheckSlaveChangesDone:
				getCmdState := 'cSTA_SUB_CheckSlaveChangesDone';				
			cSTA_SUB_SLAVE_START:
				getCmdState := 'cSTA_SUB_SLAVE_START';				
			cSTA_SUB_CheckSlaveState:
				getCmdState := 'cSTA_SUB_CheckSlaveState';	
			cSTA_SUB_CheckSlaveStateDone:
				getCmdState := 'cSTA_SUB_CheckSlaveStateDone';	
			cSTA_SUB_CheckCRC:
				getCmdState := 'cSTA_SUB_CheckCRC';	
			cSTA_SUB_CheckCRCDone:
				getCmdState := 'cSTA_SUB_CheckCRCDone';	
			cSTA_SUB_CheckCRCReset:
				getCmdState := 'cSTA_SUB_CheckCRCReset';	
			cSTA_SUB_CheckCRCResetDone:
				getCmdState := 'cSTA_SUB_CheckCRCResetDone';	
			cSTA_SUB_Inc:
				getCmdState := 'cSTA_SUB_Inc';	
		
			cSTA_SUB_ERROR:
				getCmdState := 'cSTA_SUB_ERROR';
			cSTA_SUB_DONE:
				getCmdState := 'cSTA_SUB_DONE';
			cSTA_SUB_WAIT_NEXT_POLL:
				getCmdState := 'cSTA_SUB_WAIT_NEXT_POLL';
				

		END_CASE
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="e6b984c1-c9c3-4692-a6b8-7d2b3aaf6b33">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_ECD" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>1fea0de2-a9af-4156-b983-ff4982d3f480</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_DtChnToLine_NewRFID" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="bolResetError">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="pSIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_Ctrl_SIf_RFW" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="intError">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">Error value</xhtml>
                    </documentation>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="intStatemachine">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Internal Variable</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbGetSystemTime">
                    <type>
                      <derived name="GETSYSTEMTIME" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Time Variables</xhtml>
                    </documentation>
                  </variable>
                  <variable name="stfileTime">
                    <type>
                      <derived name="T_FILETIME" />
                    </type>
                  </variable>
                  <variable name="dtActualTime">
                    <type>
                      <DT />
                    </type>
                  </variable>
                  <variable name="bolDataBad">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Data not correct</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intCountRetry">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Retry Counts for error message</xhtml>
                    </documentation>
                  </variable>
                  <variable name="aBuffer">
                    <type>
                      <array>
                        <dimension lower="0" upper="cDtChnBuffer" />
                        <baseType>
                          <derived name="T_NewRFID_DtChn" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Buffer for Senddata</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intPBufferInput">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pointer for new Input</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intPBufferOutput">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Pointer for readout</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intIndexOldest">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Data Channel Specific Variable</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dtOldestTag">
                    <type>
                      <DT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Date and time of the oldes imput</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <localVars constant="true">
                  <variable name="cDtChnBuffer">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="20" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_Data_Init">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="900" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_Data_WaitForJob">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="902" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_Data_SendData">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="904" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_Data_Acknowledge">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="906" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_Data_Retry">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="908" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_Data_Error">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="910" />
                    </initialValue>
                  </variable>
                  <variable name="cDataState_DONE">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="-1" />
                    </initialValue>
                  </variable>
                  <variable name="cDataState_Ready">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="1" />
                    </initialValue>
                  </variable>
                  <variable name="cDataState_Retry">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="-99" />
                    </initialValue>
                  </variable>
                  <variable name="cDataState_Error">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="-100" />
                    </initialValue>
                  </variable>
                  <variable name="cMAX_RETRY">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="10" />
                    </initialValue>
                  </variable>
                  <variable name="cERR_BufferFull">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="-99" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Error Codes</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cERR_NoSIF">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="-100" />
                    </initialValue>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Datachannel to send data to Lince Controller
Insert new Job with Method Creat in a Buffer
Send buffer elements if Linecontroller is ready


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		26.08.2013		AVM/PRE		Start history
0.00.2		30.09.2013		AVM/PRE		Date and time with string, not with DT Type

___________________________________________________________________________________________________*)

// Data Channel to Receive Data from Line Controller
// Startup check States
IF (pSIf &lt;&gt; 0) THEN
	IF (intStatemachine &lt; cSTA_SUB_Data_Init) THEN
		intStatemachine := cSTA_SUB_Data_Init;
	END_IF
ELSE
	intError := cERR_NoSIF;
END_IF

CASE intStatemachine OF
	cSTA_SUB_Data_Init:
		IF pSIf^.DtChnToLine.stNewRfid.intDataState = cDataState_DONE THEN
			intStatemachine := cSTA_SUB_Data_WaitForJob;
		END_IF
		
	cSTA_SUB_Data_WaitForJob:
		// New data arrived
		IF intPBufferInput &lt;&gt; intPBufferOutput THEN
			IF pSIf^.DtChnToLine.stNewRfid.intDataState = cDataState_DONE THEN
				intStatemachine := cSTA_SUB_Data_SendData;
			END_IF
		END_IF
	
	cSTA_SUB_Data_SendData:	
		pSIf^.DtChnToLine.stNewRfid.uliTagID := aBuffer[intPBufferOutput].uliTagID;
		pSIf^.DtChnToLine.stNewRfid.strID := aBuffer[intPBufferOutput].strID;
		pSIf^.DtChnToLine.stNewRfid.strTimestamp := aBuffer[intPBufferOutput].strTimestamp;
		pSIf^.DtChnToLine.stNewRfid.intDataState := cDataState_Ready;
		intStatemachine := cSTA_SUB_Data_Acknowledge;	
		
	cSTA_SUB_Data_Acknowledge:	
		IF pSIf^.DtChnToLine.stNewRfid.intDataState = cDataState_DONE THEN
			// Data read from Line Controller
			// Reset Buffer Element
			aBuffer[intPBufferOutput].strTimestamp := '';
			aBuffer[intPBufferOutput].intDataState := 0;
			aBuffer[intPBufferOutput].uliTagID := 0;
			aBuffer[intPBufferOutput].strID := '';
			// Increase Read out pointer
			IF intPBufferOutput &lt; cDtChnBuffer THEN
				intPBufferOutput := intPBufferOutput + 1;
			ELSE
				intPBufferOutput := 0;
			END_IF
			intStatemachine := cSTA_SUB_Data_WaitForJob;
			
		ELSIF pSIf^.DtChnToLine.stNewRfid.intDataState = cDataState_Retry THEN
			intStatemachine := cSTA_SUB_Data_Retry;
		ELSIF pSIf^.DtChnToLine.stNewRfid.intDataState = cDataState_Error THEN
			intStatemachine := cSTA_SUB_Data_Error;
		END_IF
		
	cSTA_SUB_Data_Retry:
			IF intCountRetry &lt; cMAX_RETRY THEN
				intCountRetry := intCountRetry + 1;
				intStatemachine := cSTA_SUB_Data_SendData;
			ELSE
				intStatemachine := cSTA_SUB_Data_Error;
			END_IF

	cSTA_SUB_Data_Error:
		intError := intCountRetry;
		IF bolResetError = TRUE THEN
			intStatemachine := cSTA_SUB_Data_WaitForJob;
		END_IF
			
END_CASE</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Creat" ObjectId="4dd6ebf1-4c8c-47ab-b5bc-e6fa305fe01c">
                    <interface>
                      <returnType>
                        <INT />
                      </returnType>
                      <inputVars>
                        <variable name="In_strID">
                          <type>
                            <string />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> configurable if Tag or Tray ID</xhtml>
                          </documentation>
                        </variable>
                        <variable name="In_uliTagID">
                          <type>
                            <ULINT />
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="strTemp">
                          <type>
                            <string />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Creat" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Insert a new Job to send at Line controller
// Only insert the job, if the buffer is not full, next input dosn't cross input and Outputpointer

// Get Systemtime
fbGetSystemTime(timeLoDW=&gt;stfileTime.dwLowDateTime, timeHiDW=&gt;stfileTime.dwHighDateTime);
dtActualTime := FILETIME_TO_DT( stfileTime );

IF ((intPBufferInput + 1) = intPBufferOutput) OR ((intPBufferInput = cDtChnBuffer) AND (intPBufferOutput = 0)) THEN
	Creat := cERR_BufferFull;
ELSE
	aBuffer[intPBufferInput].uliTagID := In_uliTagID;
	aBuffer[intPBufferInput].strID := In_strID;
	strTemp := DT_TO_STRING(dtActualTime);
	strTemp := Tc2_Standard.RIGHT(STR:=strTemp, SIZE:= (LEN(strTemp)-3));
	strTemp := CONCAT(strTemp,'.000');	
	aBuffer[intPBufferInput].strTimestamp := strTemp;
	IF intPBufferInput &lt; cDtChnBuffer THEN
		intPBufferInput := intPBufferInput + 1;
	ELSE
		intPBufferInput := 0;
	END_IF
	Creat := intPBufferInput;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>7377b839-51b4-4ecb-8121-1fca29d92915</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_RFW" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="pRFD_SIf">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_RFD" />
                        </baseType>
                      </pointer>
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_RFW" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolNewTag">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Internal Variable</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolRENewTag">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Rising Edge New tag at antenna</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolAllFinished">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Read All is finished</xhtml>
                    </documentation>
                  </variable>
                  <variable name="dwoJobIntern">
                    <type>
                      <DWORD />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Internal Job for more reading</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinDataAdress">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Startadress on the Tag from the needed Data</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinDataLengh">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Lengh of data to read or write</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uliTagID_old">
                    <type>
                      <ULINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> old Tag ID to know a new RFID Tag is on antenna</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiTemp">
                    <type>
                      <USINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temporary Help Variable</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinTemp">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temporary Help Variable</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intTemp">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temporary Help Variable</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intValue">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="udiTemp">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temporary Help Variable</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uliTemp">
                    <type>
                      <LWORD />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temporary Help Variable</xhtml>
                    </documentation>
                  </variable>
                  <variable name="strTemp">
                    <type>
                      <string />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temporary Help Variable</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intPositionPoint">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temporary Help Variable to save to position of the point in the string</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intPositionSign">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Temporary Help Variable to save to position of the - in the string</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTimeDelayRead">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Short Brake between the different Reads</xhtml>
                    </documentation>
                  </variable>
                  <variable name="fbDtChnToLine_NewRFID">
                    <type>
                      <derived name="FB_DtChnToLine_NewRFID" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Data Channel to Line new RFID Tag</xhtml>
                    </documentation>
                  </variable>
                  <variable name="intDtChnToLineState">
                    <type>
                      <INT />
                    </type>
                  </variable>
                </localVars>
                <localVars constant="true">
                  <variable name="cRFW_SUB_WaitTag">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="302" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml">sub States for RUN Function</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cRFW_SUB_SendJob">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="304" />
                    </initialValue>
                  </variable>
                  <variable name="cRFW_SUB_GetData">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="306" />
                    </initialValue>
                  </variable>
                  <variable name="cRFW_SUB_CheckData">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="308" />
                    </initialValue>
                  </variable>
                  <variable name="cRFW_SUB_SendJobTrayID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="310" />
                    </initialValue>
                  </variable>
                  <variable name="cRFW_SUB_GetDataTrayID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="312" />
                    </initialValue>
                  </variable>
                  <variable name="cRFW_SUB_CheckDataTrayID">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="314" />
                    </initialValue>
                  </variable>
                  <variable name="cRFW_SUB_Finished">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="320" />
                    </initialValue>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
RFID Reader and Writer
Controlls the communication to the RFID Reader and Writer


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		09.07.2013		AVME/PRE	Start history
0.00.2		19.09.2013		AVME/PRE	Implement new Base Concept
0.00.3		24.09.2013		AVME/KVO	Parameter init from element controller to driver
0.00.4		01.10.2013		AVME/PRE	Insert DataChanel to Line
0.00.5		14.11.2013		AVME/PRE	First Checks on the promo machine
0.00.6		17.02.2014		AVME/KVO	Bug fix write single data
___________________________________________________________________________________________________*)


SUPER^();

(*
IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
END_IF;
*)</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="01fa4158-8869-42d7-a043-3b03868c50b5">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	pRFD_SIf^.stCur.pData := ADR(SIf.Cur.abytData[0]);
	SIf.Cur.bolPresent := pRFD_SIf^.stStatus.bolPresent;
	IF (CIf.Job.bolAlmReset = TRUE) AND (pRFD_SIf^.stErr.bolErrorActive = TRUE) THEN
		pRFD_SIf^.stErr.bolErrAck := TRUE;
	END_IF
	
	// Data channel to UI/Line
	fbDtChnToLine_NewRFID.pSIf := ADR(SIf);
	fbDtChnToLine_NewRFID.bolResetError := CIf.Job.bolAlmReset;
	fbDtChnToLine_NewRFID();
	IF fbDtChnToLine_NewRFID.intError &lt;&gt; 0 THEN
		// Set Alarm: SIf.Alm[6].strText := 'Data Channel Error Send Data';
		//pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,6,fbDtChnToLine_NewRFID.intError,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);	
	END_IF
	
	// config driver
	pRFD_SIf^.stCfg.bolSimulation := CIf.SwCfg.bolSimulation;
	pRFD_SIf^.stCfg.eTyp := SIf.Cfg.eTyp;
	pRFD_SIf^.stCfg.stNetId := SIf.Cfg.stNetId; //PLC NetId
	pRFD_SIf^.stCfg.uinSlaveAddr := SIf.Cfg.uinSlaveAddr; //Io card Ethercat adress 
	
	// ----------------------------------------------------------------------------------
	// Always change actions in Base Library
	// ----------------------------------------------------------------------------------
	// overrule error always from base -&gt; no EOFF State!! in EOFF go to OFF
	IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
		IF (me.StateMachine.intState=cSTA_OFF) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		ELSE // stay in OFF
			me.StateMachine.intStateNext := cSTA_OFFBusy;
		END_IF
	END_IF
END_IF

</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="07139a26-171c-4d73-ae47-1772f434179e">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		IF (pRFD_SIf^.stErr.bolComError = TRUE) OR (pRFD_SIf^.stErr.bolProtcolError = TRUE) THEN
			// SIf.Alm[1].strText := 'Communication Error between PLC and RFID Reader'; 
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,1,UDINT_TO_DINT(pRFD_SIf^.stErr.udiErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		ELSIF pRFD_SIf^.stErr.bolSDOError = TRUE THEN
			// SIf.Alm[2].strText := 'Initialisation Error from RFID Reader';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,2,UDINT_TO_DINT(pRFD_SIf^.stErr.udiErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		ELSIF (pRFD_SIf^.stErr.bolRFIDError = TRUE) THEN
			// SIf.Alm[3].strText := 'RFID Tag Error';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,3,UDINT_TO_DINT(pRFD_SIf^.stErr.udiErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		END_IF
		
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		IF 	CIf.Job.intACmd &gt; cCMD_OFF THEN
			CIf.Job.intACmd := cCMD_DONE;
		END_IF

	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ONbusy" ObjectId="1bb97763-b40d-4722-a8c0-8c52f085370b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ONbusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		bolNewTag := FALSE;
		me.SubStateMachine.intState := cRFW_SUB_WaitTag;
		
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiReadTime_ms / 2);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			pRFD_SIf^.stStatus.bolOn := TRUE;
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				;
			END_IF
		END_IF
		
		// Function
		IF(pRFD_SIf^.stStatus.bolOn = FALSE) THEN
			pRFD_SIf^.intCmd := RFD_Cmd.cRFD_CMD_CTRL_ON;
		END_IF
		
		// State Change Condition
		IF (pRFD_SIf^.stErr.bolErrorActive = TRUE) THEN  
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF(pRFD_SIf^.stStatus.bolOn = TRUE) THEN
			me.StateMachine.intStateNext := RFW_CmdState.cSTA_ON;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;		
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="264788df-90a6-4149-9ea0-e4a45dc80f4c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.EOFF) AND (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.OFF) THEN
			IF(me.intCmd=cCMD_RUN) THEN
				me.StateMachine.intStateNext := cSTA_RUNBusy;
			ELSIF ((me.intCmd=RFW_CmdState.cCMD_READ) OR (me.intCmd=RFW_CmdState.cCMD_WRITE)) AND (SIf.Cfg.eTyp = E_Typ_RFW.RF382R) THEN
				// SIf.Alm[5].strText := 'Command for this type of RFID not possible';
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,5,UDINT_TO_DINT(pRFD_SIf^.stErr.udiErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);			
			ELSIF(me.intCmd=RFW_CmdState.cCMD_READ) THEN
				me.StateMachine.intStateNext := RFW_CmdState.cSTA_READBusy;
			ELSIF(me.intCmd=RFW_CmdState.cCMD_WRITE) THEN
				me.StateMachine.intStateNext := RFW_CmdState.cSTA_WRITEBusy;
			ELSIF(me.intCmd=RFW_CmdState.cCMD_ON) THEN
				me.StateMachine.intStateNext := RFW_CmdState.cSTA_ONBusy;			
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="2cceee73-5340-45cb-a6fa-8e498866d35d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="udiTaskCnt">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                        <variable name="ii">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR ii:= 0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[ii].intCmd=cCMD_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR
CIf.Job.aCmdList[ii].intCmd := RFW_CmdState.cCMD_READ;
CIf.Job.aCmdList[ii].strName := 'Read'; 
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := RFW_CmdState.cCMD_WRITE;
CIf.Job.aCmdList[ii].strName := 'Write';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := RFW_CmdState.cCMD_ON;
CIf.Job.aCmdList[ii].strName := 'On';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := cCMD_RUN;
CIf.Job.aCmdList[ii].strName := 'Run';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;

// set name of class/typ
CIf.Info.strType := 'FB_RFID';
CIf.Info.strFullName := 'RFID Reader-Writer';

// set alarm class
SIf.Alm[1].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[1].strText := 'Communication Error between PLC and RFID Reader'; 
SIf.Alm[2].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[2].strText := 'Initialisation Error from RFID Reader';
SIf.Alm[3].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[3].strText := 'RFID Tag Error';
SIf.Alm[4].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[4].strText := 'timeout wait on Data';
SIf.Alm[5].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[5].strText := 'Command for this type of RFID not possible';
SIf.Alm[6].eAlmClass := E_AlmClass.INFO;
SIf.Alm[6].strText := 'Data Channel Error Send Data';

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// parmeter
SIf.Par.udiReadTime_ms := 30000;
SIf.Par.udiWriteTime_ms := 300000;
SIf.Par.udiMinCmdTime := 100;

// Get correct type
SIf.Cfg.eTyp := E_Typ_RFW.RF382R;
SIf.Cfg.stNetId := '192.168.2.123.1.1'; //PLC NetId
SIf.Cfg.uinSlaveAddr := 1039; //Io card Ethercat adress 
SIf.Cfg.bolGetTrayIDAuto := FALSE;
SIf.Cfg.bolDtChToLine_send := TRUE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ON" ObjectId="3f89f901-ef7a-426a-bbc6-9160e2223188">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		bolNewTag := FALSE;
		me.SubStateMachine.intState := cRFW_SUB_WaitTag-1; // init first state - string
		me.SubStateMachine.intStateNext := cRFW_SUB_WaitTag;
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiReadTime_ms / 2);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		
		// Function
				
		// State Change Condition
		IF (pRFD_SIf^.stErr.bolErrorActive = TRUE) THEN  
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF ((me.intCmd=cCMD_READ) OR (me.intCmd=cCMD_WRITE)) AND (SIf.Cfg.eTyp = E_Typ_RFW.RF382R) THEN
			// SIf.Alm[5].strText := 'Command for this type of RFID not possible';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,5,UDINT_TO_DINT(pRFD_SIf^.stErr.udiErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);			
		ELSIF (me.intCmd=cCMD_READ) THEN
			me.StateMachine.intStateNext := cSTA_READBusy;
		ELSIF(me.intCmd=cCMD_WRITE) THEN
			me.StateMachine.intStateNext := cSTA_WRITEBusy;
		ELSIF(me.intCmd=cCMD_RUN) THEN
			me.StateMachine.intStateNext := cSTA_RUNBusy;			
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;		
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="58e9c3b4-9dfb-4d05-be68-46bb21d02e6b">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_RFW" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="66a902de-580a-4869-a0a1-268afd7156ea">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiReadTime_ms / 2);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				pRFD_SIf^.intCmd := RFD_Cmd.cRFD_CMD_DONE;
				SIf.Cur.bolPresent := FALSE;
			END_IF
		END_IF
		
	
		// State Change Condition
		IF pRFD_SIf^.stErr.bolErrorActive = TRUE THEN // AND (me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiWriteTime_ms) 
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		//ELSIF(pRFD_SIf^.intCmd = RFD_Cmd.cRFD_CMD_DONE) THEN
		ELSIF (TRUE) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_WRITEBusy" ObjectId="6a409eb9-e99d-4e8d-8be7-8cce0a919e4b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_WRITEBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiWriteTime_ms / 2);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
		
		IF SIf.Cur.dwoJob = 0 THEN
			SIf.Cur.dwoJob := RFID_Data.cRFID_AllData;
		END_IF
		
		// Prepare Data for writing
		// Repetition ID
		IF (SIf.Cur.dwoJob = RFID_Data.cRFID_AllData) OR (SIf.Cur.dwoJob = RFID_Data.cRFID_RepetionID) THEN
			uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_RepetionID);
			uinDataAdress := uinDataAdress MOD 16#100;							// Maximum 255 data
			SIf.Cur.abytData[uinDataAdress] := SIf.Cur.stData.usiRepetitionID;
		END_IF
		// Tray Info
		IF (SIf.Cur.dwoJob = RFID_Data.cRFID_AllData) OR (SIf.Cur.dwoJob = RFID_Data.cRFID_TrayInfo) THEN
			uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_TrayInfo);
			uinDataAdress := uinDataAdress MOD 16#100;							// Maximum 255 data
			SIf.Cur.abytData[uinDataAdress].0 := SIf.Cur.stData.bolWorkstation2;
			SIf.Cur.abytData[uinDataAdress].6 := SIf.Cur.stData.bolDeleteFileAfterPrint;
			SIf.Cur.abytData[uinDataAdress].7 := SIf.Cur.stData.bolPrintOk;
		END_IF
		// Height of tray
		IF (SIf.Cur.dwoJob = RFID_Data.cRFID_AllData) OR (SIf.Cur.dwoJob = RFID_Data.cRFID_HeighOfTray) THEN
			uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_HeighOfTray);
			uinDataAdress := uinDataAdress MOD 16#100;							// Maximum 255 data
			SIf.Cur.abytData[uinDataAdress] := SHL(SIf.Cur.stData.usiHeightOffset,1);
			SIf.Cur.abytData[uinDataAdress].0 := SIf.Cur.stData.bolHeightUseMeasure;
			SIf.Cur.abytData[uinDataAdress].4 := SIf.Cur.stData.bolHeightOffsetSignMinus;
		END_IF
		// Pretreatment
		IF (SIf.Cur.dwoJob = RFID_Data.cRFID_AllData) OR (SIf.Cur.dwoJob = RFID_Data.cRFID_Pretreatment) THEN
			uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_Pretreatment);
			uinDataAdress := uinDataAdress MOD 16#100;							// Maximum 255 data
			SIf.Cur.abytData[uinDataAdress] := SHL(SIf.Cur.stData.usiPlasmaLevel,2);
			SIf.Cur.abytData[uinDataAdress].1 := SIf.Cur.stData.bolIonizer;
			SIf.Cur.abytData[uinDataAdress].4 := SIf.Cur.stData.bolPrintPass;
			SIf.Cur.abytData[uinDataAdress].5 := SIf.Cur.stData.bolNozzleCheck;
			SIf.Cur.abytData[uinDataAdress].6 := SIf.Cur.stData.bolAligneCheck;
		END_IF
		// UV-curing
		IF (SIf.Cur.dwoJob = RFID_Data.cRFID_AllData) OR (SIf.Cur.dwoJob = RFID_Data.cRFID_UVcuring) THEN
			uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_UVcuring);
			uinDataAdress := uinDataAdress MOD 16#100;							// Maximum 255 data
			SIf.Cur.abytData[uinDataAdress] := SHL(SIf.Cur.stData.usiUVLampLevel,4);
			IF SIf.Cur.stData.usiUVPinningLevel &lt; 16 THEN // Only 4 bit possible
				usiTemp := SIf.Cur.stData.usiUVPinningLevel OR SIf.Cur.abytData[uinDataAdress];
				SIf.Cur.abytData[uinDataAdress] := usiTemp;
			END_IF
		END_IF
		// Filename
		IF (SIf.Cur.dwoJob = RFID_Data.cRFID_AllData) OR (SIf.Cur.dwoJob = RFID_Data.cRFID_Filename) THEN
			uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_Filename);
			uinDataAdress := uinDataAdress MOD 16#100;							// Maximum 255 data
			strTemp := SIf.Cur.stData.strFileName;
			intPositionPoint := TC2_STANDARD.FIND(strTemp,'.');
			IF intPositionPoint &gt; 1 THEN
				intValue := intPositionPoint - 1;
				strTemp := TC2_STANDARD.LEFT(strTemp, intValue);
			END_IF
			intPositionSign := TC2_STANDARD.FIND(strTemp,'-');
			IF intPositionSign &gt; 0 THEN
				intValue :=  TC2_STANDARD.LEN(strTemp) - intPositionSign;
				IF intValue &gt;= 1 THEN
					strTemp := TC2_STANDARD.RIGHT(strTemp, intValue);
					intValue := STRING_TO_INT(strTemp);
					SIf.Cur.abytData[uinDataAdress] := INT_TO_USINT(intValue);
				END_IF
				uliTemp := STRING_TO_ULINT(TC2_STANDARD.LEFT(SIf.Cur.stData.strFileName, (intPositionSign - 1)));
				uinDataLengh := DWORD_TO_UINT(SHR(RFID_Data.cRFID_Filename,16));
				FOR uinTemp := 1 TO  uinDataLengh DO
					SIf.Cur.abytData[uinDataAdress+uinTemp] := ULINT_TO_USINT(uliTemp);
					uliTemp := SHR(uliTemp,8);
				END_FOR
			
			END_IF
		END_IF
				
		// Brush
		IF (SIf.Cur.dwoJob = RFID_Data.cRFID_AllData) OR (SIf.Cur.dwoJob = RFID_Data.cRFID_Brush) THEN
			uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_Brush);
			uinDataAdress := uinDataAdress MOD 16#100;							// Maximum 255 data
			SIf.Cur.abytData[uinDataAdress].0 := SIf.Cur.stData.bolBrush;
			SIf.Cur.abytData[uinDataAdress].1 := SIf.Cur.stData.bolBrushClean;
			SIf.Cur.abytData[uinDataAdress].2 := SIf.Cur.stData.bolBrushFans;
			SIf.Cur.abytData[uinDataAdress].6 := SIf.Cur.stData.bolGutterClean;
			SIf.Cur.abytData[uinDataAdress].7 := SIf.Cur.stData.bolSpecialTray;
		END_IF
		
		// Tray ID - not overwritten with all data - fixed name/ID the others are changeable process data
		IF (SIf.Cur.dwoJob = RFID_Data.cRFID_TrayID) THEN	
			uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_TrayID);
			uinDataAdress := uinDataAdress MOD 16#100;							// Maximum 255 data
			uinDataLengh := DWORD_TO_UINT(SHR(RFID_Data.cRFID_TrayID,16));
	
			MEMCPY(destAddr:=ADR(SIf.Cur.abytData[uinDataAdress]), srcAddr:=ADR(SIf.Cur.stData.strTrayID), n:=uinDataLengh);
		END_IF
		
		// Write commando
		uinDataAdress := DWORD_TO_UINT(SIf.Cur.dwoJob);
		uinDataAdress := uinDataAdress MOD 16#100;							// Maximum 255 data
		pRFD_SIf^.stCur.uinAdressData := uinDataAdress;
		pRFD_SIf^.stCur.uinAdressTag := DWORD_TO_UINT(SIf.Cur.dwoJob);
		pRFD_SIf^.stCur.usiCount := DWORD_TO_USINT(SHR(SIf.Cur.dwoJob,16));

		IF (CIf.SwCfg.bolSimulation = FALSE) THEN
			pRFD_SIf^.intCmd := RFD_Cmd.cRFD_CMD_Write;
		END_IF
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				pRFD_SIf^.intCmd := RFD_Cmd.cRFD_CMD_DONE;
			END_IF
		END_IF
		
		//no change action
		 
		
		// State Change Condition
		IF (pRFD_SIf^.stErr.bolErrorActive = TRUE) THEN //  
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF (me.StateMachine.udiTimeInState_ms &gt; SIf.Par.udiWriteTime_ms) THEN
			// SIf.Alm[4].strText := 'timeout wait on Data';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,4,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF (pRFD_SIf^.intCmd = RFD_Cmd.cRFD_CMD_DONE) THEN
			me.StateMachine.intStateNext := cSTA_WRITE;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="76cc41a1-a0a5-43b6-8358-f37074d1f932">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		bolNewTag := FALSE;
		me.SubStateMachine.intState := cRFW_SUB_WaitTag-1; // init first state - string
		me.SubStateMachine.intStateNext := cRFW_SUB_WaitTag;
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiReadTime_ms / 2);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.IN = FALSE) THEN
				fbSimulationTimer.IN := TRUE;
			END_IF
			IF pRFD_SIf^.intCmd &lt;&gt; RFD_Cmd.cRFD_CMD_DONE THEN
				pRFD_SIf^.intCmd := RFD_Cmd.cRFD_CMD_DONE;
			END_IF
			IF (fbSimulationTimer.Q) THEN
				fbSimulationTimer.IN := FALSE;
				IF SIf.Cur.bolPresent = FALSE THEN
					SIf.Cur.bolPresent := TRUE;
					SIf.Cur.stData.uliTagID := SIf.Cur.stData.uliTagID + 1;
					Tc2_System.MEMCPY(destAddr:=ADR(pRFD_SIf^.stStatus.abyteUID), srcAddr:=ADR(SIf.Cur.stData.uliTagID), n:=8);
				ELSE
					SIf.Cur.bolPresent := FALSE;
				END_IF
			END_IF
		END_IF
		
		// Function
		// If the RF ID Reader does not send automatically the Tag ID, read it if a new Tag is ready
		IF (SIf.Cfg.eTyp = E_Typ_RFW.RF310R) AND (CIf.SwCfg.bolSimulation = FALSE) THEN
			IF ((SIf.Cur.bolPresent = TRUE) AND (bolRENewTag = FALSE)) THEN
				bolNewTag := TRUE;
				bolRENewTag := TRUE;
			ELSIF (SIf.Cur.bolPresent = FALSE) THEN
				bolRENewTag := FALSE;
				bolNewTag := FALSE;
			END_IF
			
			//--------------------------------------------------------------------------------------
			// sub state machine for sequence
			CASE me.SubStateMachine.intState OF
				//--------------------------------------------------------------------------------------
				cRFW_SUB_WaitTag:
					IF (bolNewTag = TRUE) THEN
						me.SubStateMachine.intStateNext := cRFW_SUB_SendJob;
					END_IF
				
				cRFW_SUB_SendJob:
					pRFD_SIf^.stCur.uinAdressData :=0;
					pRFD_SIf^.stCur.uinAdressTag := DWORD_TO_UINT(RFID_Data.cRFID_TagID);
					pRFD_SIf^.stCur.usiCount := DWORD_TO_USINT(SHR(RFID_Data.cRFID_TagID,16));
				
					pRFD_SIf^.intCmd := RFD_Cmd.cRFD_CMD_MDS;
					
					me.SubStateMachine.intStateNext := cRFW_SUB_GetData;
					
				cRFW_SUB_GetData:
					IF pRFD_SIf^.intCmd = RFD_Cmd.cRFD_CMD_DONE THEN
						me.SubStateMachine.intStateNext := cRFW_SUB_CheckData;
					END_IF
				
				cRFW_SUB_CheckData:
					SIf.Cur.stData.strTagID := '';
					Tc2_System.MEMCPY(destAddr:=ADR(SIf.Cur.stData.uliTagID), srcAddr:=ADR(pRFD_SIf^.stStatus.abyteUID), n:=8);
					SIf.Cur.stData.strTagID := FB_ULINT_TO_HEXSTRING(in_uliValue:= SIf.Cur.stData.uliTagID);	

					IF (SIf.Cfg.bolGetTrayIDAuto = TRUE) THEN
						me.SubStateMachine.intStateNext := cRFW_SUB_SendJobTrayID;
					ELSE
						me.SubStateMachine.intStateNext := cRFW_SUB_Finished;
					END_IF
					
				cRFW_SUB_SendJobTrayID:
					uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_TrayID);
					uinDataAdress := uinDataAdress MOD 16#100;							// Maximum 255 data
					uinDataLengh := DWORD_TO_UINT(SHR(RFID_Data.cRFID_TrayID,16));
					pRFD_SIf^.stCur.uinAdressData :=uinDataAdress;
					pRFD_SIf^.stCur.uinAdressTag := DWORD_TO_UINT(RFID_Data.cRFID_TrayID);
					pRFD_SIf^.stCur.usiCount := DWORD_TO_USINT(SHR(RFID_Data.cRFID_TrayID,16));
				
					pRFD_SIf^.intCmd := RFD_Cmd.cRFD_CMD_Read;
					
					me.SubStateMachine.intStateNext := cRFW_SUB_GetData;
					
				cRFW_SUB_GetDataTrayID:
					IF pRFD_SIf^.intCmd = RFD_Cmd.cRFD_CMD_DONE THEN
						me.SubStateMachine.intStateNext := cRFW_SUB_CheckData;
					END_IF
				
				cRFW_SUB_CheckDataTrayID:
					uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_TrayID);
					uinDataAdress := uinDataAdress MOD 16#100;							// Maximum 255 data
					uinDataLengh := DWORD_TO_UINT(SHR(RFID_Data.cRFID_TrayID,16));
					SIf.Cur.stData.strTagID := '';
					Tc2_System.MEMCPY(destAddr:=ADR(SIf.Cur.stData.strTrayID), srcAddr:=ADR(pRFD_SIf^.stStatus.abyteUID[uinDataAdress]), n:=uinDataLengh);

					me.SubStateMachine.intStateNext := cRFW_SUB_Finished;
	
				cRFW_SUB_Finished:
					bolNewTag := FALSE;				
					me.SubStateMachine.intStateNext := cRFW_SUB_WaitTag;
					
			END_CASE
		ELSIF (SIf.Cfg.eTyp = E_Typ_RFW.RF382R) THEN
			SIf.Cur.stData.strTagID := '';
			Tc2_System.MEMCPY(destAddr:=ADR(SIf.Cur.stData.uliTagID), srcAddr:=ADR(pRFD_SIf^.stStatus.abyteUID), n:=8);
			SIf.Cur.stData.strTagID := FB_ULINT_TO_HEXSTRING(in_uliValue:= SIf.Cur.stData.uliTagID);	
			
		END_IF
		
		IF uliTagID_old &lt;&gt; SIf.Cur.stData.uliTagID THEN
			IF SIf.Cfg.bolDtChToLine_send = TRUE THEN
				IF SIf.Cfg.bolGetTrayIDAuto THEN
					intDtChnToLineState	:= fbDtChnToLine_NewRFID.Creat(In_uliTagID:= SIf.Cur.stData.uliTagID, In_strID:= SIf.Cur.stData.strTrayID);
				ELSE
					intDtChnToLineState	:= fbDtChnToLine_NewRFID.Creat(In_uliTagID:= SIf.Cur.stData.uliTagID, In_strID:= SIf.Cur.stData.strTagID);						
				END_IF
				IF intDtChnToLineState &gt;= 0 THEN
					uliTagID_old := SIf.Cur.stData.uliTagID;
				ELSE
					// Set Alarm: SIf.Alm[6].strText := 'Data Channel Error Send Data';
					//pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,6,intDtChnToLineState,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);					
				END_IF
			ELSE
				uliTagID_old := SIf.Cur.stData.uliTagID;
			END_IF		
		END_IF
		
				
		// State Change Condition
		IF (pRFD_SIf^.stErr.bolErrorActive = TRUE) THEN  
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF ((me.intCmd=RFW_CmdState.cCMD_READ) OR (me.intCmd=RFW_CmdState.cCMD_WRITE)) AND (SIf.Cfg.eTyp = E_Typ_RFW.RF382R) THEN
			// SIf.Alm[5].strText := 'Command for this type of RFID not possible';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,5,UDINT_TO_DINT(pRFD_SIf^.stErr.udiErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);			
		ELSIF (me.intCmd=RFW_CmdState.cCMD_READ) AND (me.SubStateMachine.intState = cRFW_SUB_WaitTag) THEN
			me.StateMachine.intStateNext := RFW_CmdState.cSTA_READBusy;
		ELSIF(me.intCmd=RFW_CmdState.cCMD_WRITE) AND (me.SubStateMachine.intState = cRFW_SUB_WaitTag) THEN
			me.StateMachine.intStateNext := RFW_CmdState.cSTA_WRITEBusy;
		ELSIF(me.intCmd=RFW_CmdState.cCMD_ON) THEN
			me.StateMachine.intStateNext := RFW_CmdState.cSTA_ONBusy;			
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;		
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="7e9d47c5-2f3f-452d-8651-a0602020ca90">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    RFW_CmdState.cSTA_READBusy: 
        THIS^.sta_READBusy();
    RFW_CmdState.cSTA_READ: 
        THIS^.sta_READ();
    RFW_CmdState.cSTA_WRITEBusy: 
        THIS^.sta_WRITEBusy();
    RFW_CmdState.cSTA_WRITE: 
        THIS^.sta_WRITE();
    RFW_CmdState.cSTA_ONBusy: 
        THIS^.sta_ONBusy();
    RFW_CmdState.cSTA_ON: 
        THIS^.sta_ON();		
    cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
    cSTA_RUN: 
        THIS^.sta_RUN();		
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_READ" ObjectId="934172f5-9bfa-42d0-8246-17fd3fbd3afc">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_READ" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// State Change Condition
		IF(me.intCmd=cCMD_RUN) THEN
			me.StateMachine.intStateNext := cSTA_RUNBusy;
		ELSIF ((me.intCmd=RFW_CmdState.cCMD_READ) OR (me.intCmd=RFW_CmdState.cCMD_WRITE)) AND (SIf.Cfg.eTyp = E_Typ_RFW.RF382R) THEN
			// SIf.Alm[5].strText := 'Command for this type of RFID not possible';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,5,UDINT_TO_DINT(pRFD_SIf^.stErr.udiErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);			
		ELSIF(me.intCmd=RFW_CmdState.cCMD_WRITE) THEN
			me.StateMachine.intStateNext := RFW_CmdState.cSTA_WRITEBusy;
		//ELSIF(me.intCmd=RFW_CmdState.cCMD_READ) THEN
		//	me.StateMachine.intStateNext := RFW_CmdState.cSTA_READBusy;
		ELSIF(me.intCmd=RFW_CmdState.cCMD_ON) THEN
			me.StateMachine.intStateNext := RFW_CmdState.cSTA_ONBusy;			
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_READBusy" ObjectId="b063d0b3-ad66-465e-93fc-95ee5de1af01">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_READBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiReadTime_ms / 2);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
		
		IF SIf.Cur.dwoJob = 0 THEN
			SIf.Cur.dwoJob := RFID_Data.cRFID_AllData;
		END_IF
		
		bolAllFinished := FALSE;
		dwoJobIntern := SIf.Cur.dwoJob;
		
		uinDataAdress := DWORD_TO_UINT(dwoJobIntern);
		uinDataAdress := uinDataAdress MOD 16#100;							// Maximum 255 data
		
		pRFD_SIf^.stCur.uinAdressData := uinDataAdress;
		pRFD_SIf^.stCur.uinAdressTag := DWORD_TO_UINT(dwoJobIntern);
		pRFD_SIf^.stCur.usiCount := DWORD_TO_USINT(SHR(dwoJobIntern,16));
		
		udiTimeDelayRead := 0;

		IF (CIf.SwCfg.bolSimulation = FALSE) THEN
			pRFD_SIf^.intCmd := RFD_Cmd.cRFD_CMD_Read;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				pRFD_SIf^.intCmd := RFD_Cmd.cRFD_CMD_DONE;
			END_IF
		END_IF
		
		// Function
		// By Read all the Tray ID has to be readed too
		IF (pRFD_SIf^.intCmd = RFD_Cmd.cRFD_CMD_DONE) AND (udiTimeDelayRead &gt; SIf.Par.udiMinCmdTime) THEN
		//---------------------------------------
			udiTimeDelayRead := 0;
			// Prepare Data from read memory
			// Repetition ID
			IF (dwoJobIntern = RFID_Data.cRFID_AllData) OR (dwoJobIntern = RFID_Data.cRFID_RepetionID) THEN
				uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_RepetionID);
				uinDataAdress := uinDataAdress  MOD 16#100;							// only 0..255
				IF ((uinDataAdress &gt;= 0) AND (uinDataAdress &lt;= 255)) THEN
					SIf.Cur.stData.usiRepetitionID := SIf.Cur.abytData[uinDataAdress];
				END_IF
			END_IF
			// Tray Info
			IF (dwoJobIntern = RFID_Data.cRFID_AllData) OR (dwoJobIntern = RFID_Data.cRFID_TrayInfo) THEN
				uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_TrayInfo);
				uinDataAdress := uinDataAdress  MOD 16#100;							// only 0..255
				IF ((uinDataAdress &gt;= 0) AND (uinDataAdress &lt;= 255)) THEN
					SIf.Cur.stData.bolWorkstation2 := SIf.Cur.abytData[uinDataAdress].0;
					SIf.Cur.stData.bolDeleteFileAfterPrint := SIf.Cur.abytData[uinDataAdress].6;
					SIf.Cur.stData.bolPrintOk := SIf.Cur.abytData[uinDataAdress].7;
				END_IF
			END_IF
			// Height of tray
			IF (dwoJobIntern = RFID_Data.cRFID_AllData) OR (dwoJobIntern = RFID_Data.cRFID_HeighOfTray) THEN
				uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_HeighOfTray);
				uinDataAdress := uinDataAdress  MOD 16#100;							// only 0..255
				IF ((uinDataAdress &gt;= 0) AND (uinDataAdress &lt;= 255)) THEN
					SIf.Cur.stData.bolHeightUseMeasure := SIf.Cur.abytData[uinDataAdress].0;
					SIf.Cur.stData.usiHeightOffset := 0;
					SIf.Cur.stData.usiHeightOffset.0 := SIf.Cur.abytData[uinDataAdress].1;
					SIf.Cur.stData.usiHeightOffset.1 := SIf.Cur.abytData[uinDataAdress].2;
					SIf.Cur.stData.usiHeightOffset.2 := SIf.Cur.abytData[uinDataAdress].3;
					SIf.Cur.stData.bolHeightOffsetSignMinus := SIf.Cur.abytData[uinDataAdress].4;
				END_IF
			END_IF
			// Pretreatment
			IF (dwoJobIntern = RFID_Data.cRFID_AllData) OR (dwoJobIntern = RFID_Data.cRFID_RepetionID) THEN
				uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_Pretreatment);
				uinDataAdress := uinDataAdress  MOD 16#100;							// only 0..255
				IF ((uinDataAdress &gt;= 0) AND (uinDataAdress &lt;= 255)) THEN
					SIf.Cur.stData.bolIonizer := SIf.Cur.abytData[uinDataAdress].1;
					SIf.Cur.stData.usiPlasmaLevel := 0;
					SIf.Cur.stData.usiPlasmaLevel.0 := SIf.Cur.abytData[uinDataAdress].2;
					SIf.Cur.stData.usiPlasmaLevel.1 := SIf.Cur.abytData[uinDataAdress].3;
					SIf.Cur.stData.bolPrintPass := SIf.Cur.abytData[uinDataAdress].4;
					SIf.Cur.stData.bolNozzleCheck := SIf.Cur.abytData[uinDataAdress].5;
					SIf.Cur.stData.bolAligneCheck := SIf.Cur.abytData[uinDataAdress].6;
				END_IF
			END_IF
			// UV-curing
			IF (dwoJobIntern = RFID_Data.cRFID_AllData) OR (dwoJobIntern = RFID_Data.cRFID_UVcuring) THEN
				uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_UVcuring);
				uinDataAdress := uinDataAdress  MOD 16#100;							// only 0..255
				IF ((uinDataAdress &gt;= 0) AND (uinDataAdress &lt;= 255)) THEN
					SIf.Cur.stData.usiUVPinningLevel := 0;
					SIf.Cur.stData.usiUVPinningLevel.0 := SIf.Cur.abytData[uinDataAdress].0;
					SIf.Cur.stData.usiUVPinningLevel.1 := SIf.Cur.abytData[uinDataAdress].1;
					SIf.Cur.stData.usiUVPinningLevel.2 := SIf.Cur.abytData[uinDataAdress].2;
					SIf.Cur.stData.usiUVPinningLevel.3 := SIf.Cur.abytData[uinDataAdress].3;
		
					SIf.Cur.stData.usiUVLampLevel := 0;
					SIf.Cur.stData.usiUVLampLevel.0 := SIf.Cur.abytData[uinDataAdress].4;
					SIf.Cur.stData.usiUVLampLevel.1 := SIf.Cur.abytData[uinDataAdress].5;
					SIf.Cur.stData.usiUVLampLevel.2 := SIf.Cur.abytData[uinDataAdress].6;
					SIf.Cur.stData.usiUVLampLevel.3 := SIf.Cur.abytData[uinDataAdress].7;
				END_IF
			END_IF
			// Filename
			IF (dwoJobIntern = RFID_Data.cRFID_AllData) OR (dwoJobIntern = RFID_Data.cRFID_Filename) THEN
				uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_Filename);
				uinDataLengh := DWORD_TO_UINT(SHR(RFID_Data.cRFID_Filename,16));
				uinDataAdress := uinDataAdress  MOD 16#100;							// only 0..255
				IF ((uinDataAdress &gt;= 0) AND (uinDataAdress &lt;= 255)) THEN
					strTemp := USINT_TO_STRING(SIf.Cur.abytData[uinDataAdress]);
					strTemp := TC2_STANDARD.CONCAT('-', strTemp);
					uliTemp := 0;
					uinDataAdress := uinDataAdress+1;	// Next signs
					Tc2_System.MEMCPY(destAddr := ADR(uliTemp), srcAddr := ADR(SIf.Cur.abytData[uinDataAdress]), n:= (uinDataLengh-1));
		
					SIf.Cur.stData.strFileName := TC2_STANDARD.CONCAT(ULINT_TO_STRING(uliTemp), strTemp);
				END_IF
			END_IF
			// Brush
			IF (dwoJobIntern = RFID_Data.cRFID_AllData) OR (dwoJobIntern = RFID_Data.cRFID_Brush) THEN
				uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_Brush);
				uinDataAdress := uinDataAdress  MOD 16#100;							// only 0..255
				IF ((uinDataAdress &gt;= 0) AND (uinDataAdress &lt;= 255)) THEN
					SIf.Cur.stData.bolBrush := SIf.Cur.abytData[uinDataAdress].0;
					SIf.Cur.stData.bolBrushClean := SIf.Cur.abytData[uinDataAdress].1;
					SIf.Cur.stData.bolBrushFans := SIf.Cur.abytData[uinDataAdress].2;
					SIf.Cur.stData.bolGutterClean := SIf.Cur.abytData[uinDataAdress].6;
					SIf.Cur.stData.bolSpecialTray := SIf.Cur.abytData[uinDataAdress].7;
				END_IF
			END_IF
			
			// Tray ID
			IF (dwoJobIntern = RFID_Data.cRFID_TrayID) THEN
				uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_TrayID);
				uinDataAdress := uinDataAdress  MOD 16#100;							// only 0..255
				IF ((uinDataAdress &gt;= 0) AND (uinDataAdress &lt;= 255)) THEN
					uinDataLengh := DWORD_TO_UINT(SHR(RFID_Data.cRFID_TrayID,16));
					SIf.Cur.stData.strTrayID := '';
					udiTemp := Tc2_System.MEMCPY(destAddr:=ADR(SIf.Cur.stData.strTrayID), srcAddr:=ADR(SIf.Cur.abytData[uinDataAdress]), n:=uinDataLengh);
				END_IF
			END_IF
	
			// Tag ID
			IF (dwoJobIntern = RFID_Data.cRFID_TagID) THEN
				uinDataAdress := DWORD_TO_UINT(RFID_Data.cRFID_TagID);
				uinDataAdress := uinDataAdress  MOD 16#100;							// only 0..255
				IF ((uinDataAdress &gt;= 0) AND (uinDataAdress &lt;= 255)) THEN
					uinDataLengh := DWORD_TO_UINT(SHR(RFID_Data.cRFID_TagID,16));
					SIf.Cur.stData.strTagID := '';
					udiTemp := Tc2_System.MEMCPY(destAddr:=ADR(SIf.Cur.stData.uliTagID), srcAddr:=ADR(pRFD_SIf^.stStatus.abyteUID), n:=8);
					SIf.Cur.stData.strTagID := FB_ULINT_TO_HEXSTRING(in_uliValue:= SIf.Cur.stData.uliTagID);	
				END_IF
			END_IF	
		//---------------------------------------
		//END_IF
			IF SIf.Cur.dwoJob = RFID_Data.cRFID_AllData THEN
				//IF udiTimeDelayRead &gt;= 100 THEN // Wait 100ms
					IF dwoJobIntern = RFID_Data.cRFID_AllData THEN
						dwoJobIntern := RFID_Data.cRFID_TrayID;
						uinDataAdress := DWORD_TO_UINT(dwoJobIntern);
						uinDataAdress := uinDataAdress MOD 16#100;							// Maximum 255 data
						
						pRFD_SIf^.stCur.uinAdressData := uinDataAdress;
						pRFD_SIf^.stCur.uinAdressTag := DWORD_TO_UINT(dwoJobIntern);
						pRFD_SIf^.stCur.usiCount := DWORD_TO_USINT(SHR(dwoJobIntern,16));
				
						pRFD_SIf^.intCmd := RFD_Cmd.cRFD_CMD_Read;
						udiTimeDelayRead := 0;
					ELSIF dwoJobIntern = RFID_Data.cRFID_TrayID THEN
						dwoJobIntern := RFID_Data.cRFID_TagID;
						uinDataAdress := DWORD_TO_UINT(dwoJobIntern);
						uinDataAdress := uinDataAdress MOD 16#100;							// Maximum 255 data
						
						pRFD_SIf^.stCur.uinAdressData := uinDataAdress;
						pRFD_SIf^.stCur.uinAdressTag := DWORD_TO_UINT(dwoJobIntern);
						pRFD_SIf^.stCur.usiCount := DWORD_TO_USINT(SHR(dwoJobIntern,16));
				
						pRFD_SIf^.intCmd := RFD_Cmd.cRFD_CMD_MDS;
						udiTimeDelayRead := 0;
					ELSE
						bolAllFinished := TRUE;
					END_IF
				//ELSE
					udiTimeDelayRead := udiTimeDelayRead + me.FUBInfo.udiSample_ms;			
				//END_IF
			ELSE
				bolAllFinished := TRUE;
			END_IF
		END_IF
		// State Change Condition
		IF (pRFD_SIf^.stErr.bolErrorActive = TRUE) THEN  
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF (me.StateMachine.udiTimeInState_ms &gt; SIf.Par.udiWriteTime_ms) THEN
			// SIf.Alm[4].strText := 'timeout wait on Data';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,4,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF (bolAllFinished = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_READ;
		END_IF
	END_IF

	udiTimeDelayRead := udiTimeDelayRead + me.FUBInfo.udiSample_ms;



//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_WRITE" ObjectId="b460320c-5ad7-462f-a22b-e48ba64fd66b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_WRITE" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// State Change Condition
		IF(me.intCmd=cCMD_RUN) THEN
			me.StateMachine.intStateNext := cSTA_RUNBusy;
		ELSIF(me.intCmd=RFW_CmdState.cCMD_READ) THEN
			me.StateMachine.intStateNext := RFW_CmdState.cSTA_READBusy;
		ELSIF ((me.intCmd=RFW_CmdState.cCMD_READ) OR (me.intCmd=RFW_CmdState.cCMD_WRITE)) AND (SIf.Cfg.eTyp = E_Typ_RFW.RF382R) THEN
			// SIf.Alm[5].strText := 'Command for this type of RFID not possible';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,5,UDINT_TO_DINT(pRFD_SIf^.stErr.udiErrorID),ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);	
		ELSIF(me.intCmd=RFW_CmdState.cCMD_WRITE) THEN
			me.StateMachine.intStateNext := RFW_CmdState.cSTA_WRITEBusy;
		ELSIF(me.intCmd=RFW_CmdState.cCMD_ON) THEN
			me.StateMachine.intStateNext := RFW_CmdState.cSTA_ONBusy;			
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="bdf203ad-aab5-4cde-a759-d6f4e13b487d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (me.intCmd&lt;&gt;cCMD_PON) AND (me.intCmd&lt;&gt;cCMD_DONE) THEN
			me.StateMachine.intStateNext := cSTA_OFFBusy;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="d4f77975-08bd-4cd8-9588-c6e42a420a5e">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states
IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		// cmd's
		CASE intCmdState OF
			RFW_CmdState.cCMD_ON: 
				getCmdState := 'cCMD_ON';
			RFW_CmdState.cCMD_READ: 
				getCmdState := 'cCMD_READ';
			RFW_CmdState.cCMD_WRITE: 
				getCmdState := 'cCMD_WRITE';
		END_CASE;
	ELSE
	
	// cmd's
		CASE intCmdState OF
			RFW_CmdState.cSTA_ONBusy: 
				getCmdState := 'cSTA_ONBusy';
			RFW_CmdState.cSTA_ON: 
				getCmdState := 'cSTA_ON';
			RFW_CmdState.cSTA_READBusy: 
				getCmdState := 'cSTA_READBusy';
			RFW_CmdState.cSTA_READ: 
				getCmdState := 'cSTA_READ';
			RFW_CmdState.cSTA_WRITEBusy: 
				getCmdState := 'cSTA_WRITEBusy';
			RFW_CmdState.cSTA_WRITE: 
				getCmdState := 'cSTA_WRITE';
				
			// SUB States
			cRFW_SUB_WaitTag:
				getCmdState := 'cRFW_SUB_WaitTag';
			cRFW_SUB_SendJob:
				getCmdState := 'cRFW_SUB_SendJob';
			cRFW_SUB_GetData:
				getCmdState := 'cRFW_SUB_GetData';
			cRFW_SUB_CheckData:
				getCmdState := 'cRFW_SUB_CheckData';
			cRFW_SUB_SendJobTrayID:
				getCmdState := 'cRFW_SUB_SendJobTrayID';
			cRFW_SUB_GetDataTrayID:
				getCmdState := 'cRFW_SUB_GetDataTrayID';
			cRFW_SUB_CheckDataTrayID:
				getCmdState := 'cRFW_SUB_CheckDataTrayID';
			cRFW_SUB_Finished: 			
				getCmdState := 'cRFW_SUB_Finished';
		END_CASE;
	END_IF
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNbusy" ObjectId="d9be2459-cddd-441e-b3bc-d9f11ddd4cc1">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNbusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		bolNewTag := FALSE;
		me.SubStateMachine.intState := cRFW_SUB_WaitTag;
		SIf.Cur.dwoJob := RFID_Data.cRFID_TrayID;
		
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiReadTime_ms / 2);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				;
			END_IF
		END_IF
		
		// Function
		
		// State Change Condition
		IF (pRFD_SIf^.stErr.bolErrorActive = TRUE) THEN  
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF(me.intCmd=cCMD_READ) THEN
			me.StateMachine.intStateNext := cSTA_READBusy;
		ELSIF(me.intCmd=cCMD_WRITE) THEN
			me.StateMachine.intStateNext := cSTA_WRITEBusy;
		ELSE
			me.StateMachine.intStateNext := cSTA_RUN;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;		
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="e161fdba-303b-42de-9649-6c247dfd8304">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	;
	//ctrl.In.bol_PosSwitchBasicDefTyp.intern := getInBol(ctrl.ifc.Job.bol_Force ,ADR(ctrl.In.bol_PosSwitchBasicDefTyp);
ELSE
	//simulation of global IO
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PONBusy" ObjectId="fd7298f0-0180-459f-b01f-ad55a89dcb0e">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PONBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiReadTime_ms / 2);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
		
		IF (CIf.SwCfg.bolSimulation = FALSE) THEN
			pRFD_SIf^.intCmd := RFD_Cmd.cRFD_CMD_CTRL_ON; // parameter initialisation on driver
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				pRFD_SIf^.intCmd := RFD_Cmd.cRFD_CMD_DONE;
				SIf.Cur.bolPresent := FALSE;
			END_IF
		END_IF
		
	
		// State Change Condition
		IF (pRFD_SIf^.stErr.bolErrorActive = TRUE) AND (CIf.SwCfg.bolSimulation = FALSE) THEN // AND (me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiWriteTime_ms) 
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF (pRFD_SIf^.intCmd = RFD_Cmd.cRFD_CMD_DONE) THEN
			me.StateMachine.intStateNext := cSTA_PON;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="feaed240-0603-45af-8950-b8abe0aacabd">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bolSwitchValvesOff">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	// check interlocks to prevent damages
	IF (CIf.Job.bolIlkOverwrite=FALSE) THEN
		;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="da0cbadb-1e4d-4be9-b282-9eb599454fa6">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_RFW" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>6f3444f8-fe94-4d15-ac48-af337cfd9399</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_ULINT_TO_HEXSTRING" pouType="function">
              <interface>
                <returnType>
                  <string length="16" />
                </returnType>
                <inputVars>
                  <variable name="in_uliValue">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                </inputVars>
                <localVars>
                  <variable name="intI">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="uliValue">
                    <type>
                      <ULINT />
                    </type>
                  </variable>
                  <variable name="usiSign">
                    <type>
                      <USINT />
                    </type>
                  </variable>
                  <variable name="strTemp">
                    <type>
                      <string length="16" />
                    </type>
                  </variable>
                  <variable name="strSign">
                    <type>
                      <string length="1" />
                    </type>
                  </variable>
                </localVars>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">strTemp := '';


	uliValue := in_uliValue;
	
	FOR intI := 0 TO 15 DO
		
		usiSign := ULINT_TO_USINT(uliValue MOD 16);
		uliValue := uliValue/16;
		
		IF usiSign &lt;= 9 THEN		
			strSign := USINT_TO_STRING(usiSign);		// ASCII Sign for Value 16#30 ...16#39
		ELSIF (usiSign = 10) THEN	
			strSign := 'A';
		ELSIF (usiSign = 11) THEN	
			strSign := 'B';
		ELSIF (usiSign = 12) THEN	
			strSign := 'C';
		ELSIF (usiSign = 13) THEN	
			strSign := 'D';
		ELSIF (usiSign = 14) THEN	
			strSign := 'E';
		ELSIF (usiSign = 15) THEN	
			strSign := 'F';
		ELSE
			FB_ULINT_TO_HEXSTRING := '';
			RETURN;
		END_IF
		strTemp := TC2_STANDARD.CONCAT(STR1 := strSign, STR2 := strTemp);
	END_FOR

	FB_ULINT_TO_HEXSTRING := strTemp;
</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>0fecdd07-4acd-4bed-838b-ede9abbf975f</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_SGT" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_bolGreenOn">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Green lamp ON</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_bolYellowOn">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Yellow lamp ON</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_bolRedOn">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Red lamp ON</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_bolBeepOn">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Beep ON</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_bolGreenBlink">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Green lamp BLINK</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_bolYellowBlink">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Yellow lamp BLINK</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_bolRedBlink">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Red lamp BLINK</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_uinCntGreen">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Counter Green (Blink by change, On by Value &gt; 0)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_uinCntYellow">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Counter Yellow (Blink by change, On by Value &gt; 0)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_uinCntRed">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Counter Red (Blink by change, On by Value &gt; 0)</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_uinCntBeep">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Counter Beep	(Blink by change, On by Value &gt; 0)</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="Out_bolGreen">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_bolYellow">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_bolRed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_bolBeep">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="uin_InCntGreenOld">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Shadow copy of In Green Cnt</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uin_InCntYellowOld">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Shadow copy of In Yellow Cnt</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uin_InCntRedOld">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Shadow copy of In Red Cnt</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uin_InCntBeepOld">
                    <type>
                      <UINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Shadow copy of In Beep Cnt</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiTimer">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Timer for Oszilator</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolTimer">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Oszilator Signal</xhtml>
                    </documentation>
                  </variable>
                  <variable name="udiBeepTimer">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Timer for Beep-Oszilator</xhtml>
                    </documentation>
                  </variable>
                  <variable name="bolBeepTimer">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Beep Signal</xhtml>
                    </documentation>
                  </variable>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_SGT" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <localVars constant="true">
                  <variable name="cSTA_SUB_INITIALIZED">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="500" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> sub States for PONBusy test sequence</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cSTA_SUB_TestGreen">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="502" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_TestYellow">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="504" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_TestRed">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="506" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_TestBeep">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="508" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_FINISH">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="510" />
                    </initialValue>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Control for the Signal Tower.


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		03.06.2014		AVME/MRU	Start history


___________________________________________________________________________________________________*)

SUPER^();

(*
IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
END_IF;
*)
</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="071e78d1-35ef-48f4-aa56-3babb01ae9b2">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	cSTA_RUN:
		THIS^.sta_RUN();
	cSTA_RUNBusy:
		THIS^.sta_RUNBusy();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="11488f8c-fb9a-4a89-875a-9b9e9ea32d8b">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		// States's
		;
	ELSE
		// States's
		CASE intCmdState OF
			cSTA_SUB_INITIALIZED: 
				getCmdState := 'cSTA_SUB_INITIALIZED';
			cSTA_SUB_TestGreen: 
				getCmdState := 'cSTA_SUB_TestGreen';
			cSTA_SUB_TestYellow: 
				getCmdState := 'cSTA_SUB_TestYellow';
			cSTA_SUB_TestRed: 
				getCmdState := 'cSTA_SUB_TestRed';
			cSTA_SUB_TestBeep: 
				getCmdState := 'cSTA_SUB_TestBeep';	
			cSTA_SUB_FINISH: 
				getCmdState := 'cSTA_SUB_FINISH';			
		END_CASE;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="16a4f14f-8c70-47c3-aefd-a640fa4d18e2">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// not inherite from base !!!
// SUPER^.Always();

IF (me.bolChangeBackToAUTO=TRUE) THEN // switch mode to automatic switch off controller
	//me.StateMachine.intStateNext := cSTA_OFFBusy;
	me.bolChangeBackToAUTO := FALSE; // for cylinder no change to off when switch to automatic!!
END_IF

IF (CIf.SwCfg.bolExist=FALSE) THEN // hardware of controller does not exist
	me.StateMachine.intStateNext := cSTA_SINGLE_ANSWER;
ELSE
	// Init or power on requested -&gt; change to state PONbusy
	IF (((me.StateMachine.intState=cSTA_INITIALIZED) OR (me.intCmd=cCMD_PON)) 
		AND (me.StateMachine.intState&lt;&gt;cSTA_PONBusy) AND (me.StateMachine.intState&lt;&gt;cSTA_PON)
		AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) 
		AND (me.StateMachine.intState&lt;&gt;cSTA_EOFF) AND (me.StateMachine.intState&lt;&gt;cSTA_EOFFBusy)) THEN // switch after startup to PONBusy
		me.StateMachine.intStateNext := cSTA_PONBusy;
	END_IF
END_IF

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="1f52b74c-ab5f-4872-8160-08d2ca48b0f8">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_SGT" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="2c1d78e1-d2ba-44f1-b62f-82ce282d2a3c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="ii">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR ii:= 0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[ii].intCmd=cCMD_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR

// set name of class/typ
CIf.Info.strType := 'FB_SGT';
CIf.Info.strFullName := 'Signal Tower';

// set alarm class
SIf.Alm[E_ALM_SGT.Dummy].eAlmClass := E_AlmClass.INFO;
SIf.Alm[E_ALM_SGT.Dummy].strText := 'DUMMY';

//*******************************************************************************
// initial values
//*******************************************************************************

// Configuration defaults of class
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;
SIf.Cfg.bolEnableLampTest := TRUE;

// Parameter defaults of class
SIf.Par.udiBlinkTime_ms := 1000;
SIf.Par.udiBeepOnTime_ms := 250;	
SIf.Par.udiBeepOffTime_ms := 2000;
SIf.Par.udiLampTestTime_ms := 500;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNBusy" ObjectId="4599e496-dbed-46f2-881a-5717ff0ba1d1">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		
		// State Change Condition
		IF (TRUE) THEN
			me.StateMachine.intStateNext := cSTA_RUN;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="4d78f065-c5de-4fbb-b74e-f27f17ab7875">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		// State Change Condition
		IF(TRUE) THEN // Auto start of Signal Tower
			me.StateMachine.intStateNext := cSTA_RUNBusy;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="611bf975-a4e4-4abc-9b49-b98753cbb3c2">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		// State Change Condition
		IF (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.EOFF) AND (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.OFF) THEN
			IF (me.intCmd=cCMD_RUN) THEN
				me.StateMachine.intStateNext :=  cSTA_RUNBusy;
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="860d867e-aded-4dc3-b96a-6c7237c7f688">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// Oscillator for blinking lamp
		IF (udiTimer &gt;= 2*SIf.Par.udiBlinkTime_ms) THEN
			bolTimer:= FALSE;
			udiTimer:= 0;
		ELSIF (udiTimer &gt;= SIf.Par.udiBlinkTime_ms) THEN
			bolTimer:= TRUE;
		END_IF
		udiTimer:= udiTimer + me.FUBInfo.udiSample_ms;
		// Oscillator for Beep
		IF (udiBeepTimer &gt;= (SIf.Par.udiBeepOffTime_ms + SIf.Par.udiBeepOnTime_ms)) THEN
			bolBeepTimer:= TRUE;
			udiBeepTimer:= 0;
		ELSIF (udiBeepTimer &gt;= SIf.Par.udiBeepOnTime_ms) THEN
			bolBeepTimer:= FALSE;
		END_IF
		udiBeepTimer:= udiBeepTimer + me.FUBInfo.udiSample_ms;	
		
		// Green Lamp
		SIf.Out.bolGreen.intern := setLampOutput(bolBlink:= In_bolGreenBlink, bolOn:= In_bolGreenOn, uinCnt:= In_uinCntGreen, 
												uinCntOLD:= uin_InCntGreenOld, bolOscillator:= bolTimer);
		// Yellow Lamp
		SIf.Out.bolYellow.intern := setLampOutput(bolBlink:= In_bolYellowBlink, bolOn:= In_bolYellowOn, uinCnt:= In_uinCntYellow, 
												uinCntOLD:= uin_InCntYellowOld, bolOscillator:= bolTimer);
		// Red Lamp
		SIf.Out.bolRed.intern := setLampOutput(bolBlink:= In_bolRedBlink, bolOn:= In_bolRedOn, uinCnt:= In_uinCntRed, 
												uinCntOLD:= uin_InCntRedOld, bolOscillator:= bolTimer);
		// Beep										
		SIf.Out.bolBeep.intern := setBeepOutput(bolOscillate:= In_bolBeepOn, uinCnt:= In_uinCntBeep,
												uinCntOLD:= uin_InCntBeepOld, bolOscillator:= bolBeepTimer);
												
		// Reset
		IF (CIf.Job.bolAlmReset) THEN
			uin_InCntGreenOld:= In_uinCntGreen;
			uin_InCntYellowOld:= In_uinCntYellow;
			uin_InCntRedOld:= In_uinCntRed;
			uin_InCntBeepOld:= In_uinCntBeep;
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF(me.intCmd=cCMD_OFF) THEN
			me.StateMachine.intStateNext := cSTA_OFFBusy;
		END_IF
	END_IF



//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="setLampOutput" ObjectId="b2eced1b-5f5c-41c2-9a66-6cdd9f3f979d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bolBlink">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Blink On Input</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bolOn">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Lamp On Input</xhtml>
                          </documentation>
                        </variable>
                        <variable name="uinCnt">
                          <type>
                            <UINT />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Counter Input</xhtml>
                          </documentation>
                        </variable>
                        <variable name="uinCntOLD">
                          <type>
                            <UINT />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Shadow copy of counter</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bolOscillator">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Oscillator Toggle Bit</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="bolBlinkOn">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                        <variable name="bolLampOn">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="setLampOutput" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Lamp blink
IF ((uinCnt &gt; uinCntOLD) OR bolBlink) THEN
	bolBlinkOn:= TRUE;
END_IF
// Lamp On
IF ((uinCnt &gt; 0) OR bolOn) THEN
	bolLampOn:= TRUE;
END_IF

// Set/Reset Output
IF bolBlinkOn THEN	// first prio blink
	setLampOutput:= bolOscillator;
ELSIF bolLampOn THEN // second prio 
	setLampOutput:= TRUE;
ELSE
	setLampOutput:= FALSE;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="d7e11bf8-8223-4355-8ad1-e44891247a41">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bolSwitchValvesOff">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolGreen));
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolRed));
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolYellow));
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolBeep));
	
	THIS^.Out_bolGreen := SIf.Out.bolGreen.map;
	THIS^.Out_bolRed := SIf.Out.bolRed.map;
	THIS^.Out_bolYellow := SIf.Out.bolYellow.map;
	THIS^.Out_bolBeep := SIf.Out.bolBeep.map;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="df7cc5fc-37c4-45d7-b614-d169e6e63f44">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		// Green Lamp
		SIf.Out.bolGreen.intern := FALSE;
		// Yellow Lamp
		SIf.Out.bolYellow.intern := FALSE;
		// Red Lamp
		SIf.Out.bolRed.intern := FALSE;
		// Beep
		SIf.Out.bolBeep.intern :=FALSE;		
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// State Change Condition
		IF (TRUE) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="setBeepOutput" ObjectId="e59c31d2-688b-43f4-bfd2-9d7a3cbe5aee">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bolOscillate">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Oscillate On Input</xhtml>
                          </documentation>
                        </variable>
                        <variable name="uinCnt">
                          <type>
                            <UINT />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Counter Input</xhtml>
                          </documentation>
                        </variable>
                        <variable name="uinCntOLD">
                          <type>
                            <UINT />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Shadow copy of counter</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bolOscillator">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Oscillator Toggle Bit</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="bolOscillatorOn">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="setBeepOutput" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Beep Oscillate
IF ((uinCnt &gt; uinCntOLD) OR bolOscillate) THEN
	bolOscillatorOn:= TRUE;
END_IF
// Set/Reset Output
IF bolOscillatorOn THEN
	setBeepOutput:= bolOscillator;
ELSE
	setBeepOutput:= FALSE;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PONBusy" ObjectId="eb33caa0-1f4b-402c-8167-358cefcc0764">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PONBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Green Lamp
		SIf.Out.bolGreen.intern := FALSE;
		// Yellow Lamp
		SIf.Out.bolYellow.intern := FALSE;
		// Red Lamp
		SIf.Out.bolRed.intern := FALSE;
		// Beep
		SIf.Out.bolBeep.intern :=FALSE;	
		
		// Initialize sub state machine
		me.SubStateMachine.intState:= cSTA_SUB_INITIALIZED; 
		me.SubStateMachine.intStateNext:= cSTA_SUB_INITIALIZED;		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		IF (SIf.Cfg.bolEnableLampTest) THEN
			//--------------------------------------------------------------------------------------
			// sub state machine for lamp test sequence
			CASE me.SubStateMachine.intState OF
				cSTA_SUB_INITIALIZED:
					me.SubStateMachine.intStateNext := cSTA_SUB_TestGreen;
				cSTA_SUB_TestGreen:
					SIf.Out.bolGreen.intern := TRUE;
					IF (me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiLampTestTime_ms) THEN 
						me.SubStateMachine.intStateNext := cSTA_SUB_TestYellow;
					END_IF
				cSTA_SUB_TestYellow:
					SIf.Out.bolYellow.intern := TRUE;
					IF (me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiLampTestTime_ms) THEN 
						me.SubStateMachine.intStateNext := cSTA_SUB_TestRed;
					END_IF			
				cSTA_SUB_TestRed:
					SIf.Out.bolRed.intern := TRUE;
					IF (me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiLampTestTime_ms) THEN 
						me.SubStateMachine.intStateNext := cSTA_SUB_TestBeep;
					END_IF				
				cSTA_SUB_TestBeep:
					SIf.Out.bolBeep.intern := TRUE;
					IF (me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.udiLampTestTime_ms) THEN
						SIf.Out.bolGreen.intern := FALSE;
						SIf.Out.bolYellow.intern := FALSE;
						SIf.Out.bolRed.intern := FALSE;
						SIf.Out.bolBeep.intern := FALSE; 
						me.SubStateMachine.intStateNext := cSTA_SUB_FINISH;
					END_IF				
				cSTA_SUB_FINISH:
					;
				
			END_CASE
		ELSE // Lamp test not enabled, PONBusy is done
			me.SubStateMachine.intStateNext := cSTA_SUB_FINISH;
		END_IF

		
		// State Change Condition
		IF (me.SubStateMachine.intState = cSTA_SUB_FINISH) THEN	// Test done
			me.StateMachine.intStateNext :=  cSTA_PON;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="78d976b8-7e91-4aec-8701-265874a8bb81">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_SGT" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>3e38ff1c-8932-4771-aa3a-87f55e3483ce</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_UMC" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_uinStatus">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="In_intMotorActualSpeed">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="In_uinMotorSetSpeed">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="In_strNetId">
                    <type>
                      <derived name="AMSNETID" />
                    </type>
                  </variable>
                  <variable name="In_uintPort">
                    <type>
                      <WORD />
                    </type>
                  </variable>
                  <variable name="In_uinECATState">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="In_uinIOData">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="Out_uinControl">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="Out_uinSpeedSetpoint">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_UMC" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_unStatus">
                    <type>
                      <derived name="U_UMC_Lenze_Status" />
                    </type>
                  </variable>
                  <variable name="Out_unControl">
                    <type>
                      <derived name="U_UMC_Lenze_Control" />
                    </type>
                  </variable>
                  <variable name="arTurnDirection">
                    <type>
                      <array>
                        <dimension lower="0" upper="MAX_E_TURN_DIRECTION" />
                        <baseType>
                          <BOOL />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="fbPulse">
                    <type>
                      <derived name="TC2_STANDARD.TP" />
                    </type>
                  </variable>
                  <variable name="fbEcCoESdoRead_ErrorText">
                    <type>
                      <derived name="FB_EcCoESdoRead" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> EtherCAT slave diagnostics via CoE</xhtml>
                    </documentation>
                  </variable>
                  <variable name="sErrorText">
                    <type>
                      <string length="80" />
                    </type>
                  </variable>
                  <variable name="sNetId">
                    <type>
                      <derived name="T_AmsNetId" />
                    </type>
                  </variable>
                  <variable name="bSdoRead">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </localVars>
                <localVars constant="true">
                  <variable name="cLEFT">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="TRUE" />
                    </initialValue>
                  </variable>
                  <variable name="cRIGHT">
                    <type>
                      <BOOL />
                    </type>
                    <initialValue>
                      <simpleValue value="FALSE" />
                    </initialValue>
                  </variable>
                  <variable name="cEtherCAT_OP_MODE">
                    <type>
                      <UINT />
                    </type>
                    <initialValue>
                      <simpleValue value="16#8" />
                    </initialValue>
                  </variable>
                  <variable name="cEtherCAT_MODE_MASK">
                    <type>
                      <UINT />
                    </type>
                    <initialValue>
                      <simpleValue value="16#F" />
                    </initialValue>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Lenze Motor implementation. 


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		09.07.2013		PC			Start history
0.00.2		04.02.2014		AVM/MRU		Simulation mode
										cCMD_LEFT / cCMD_RIGHT added in FB_init / getCmdState
0.00.3		02.10.2014		AVM/MRU		SingleAnswer in Always added
0.00.4		05.12.2014		HLV/MAH		Motor status information text from CoE added

___________________________________________________________________________________________________*)

SUPER^();

(*
IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
END_IF;
*)</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="06969552-1773-4573-a299-c8c9933c6ef7">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
SIf.In.uinStatus.map			:= THIS^.In_uinStatus				;
SIf.In.intMotorActualSpeed.map	:= THIS^.In_intMotorActualSpeed	;
SIf.In.uinMotorSetSpeed.map		:= THIS^.In_uinMotorSetSpeed		;
SIf.In.bol400V_Ok.map			:= THIS^.In_uinIOData.15;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	BASE_PLC.getInUint(CIf.Job.bolIoForce,ADR(SIf.In.uinStatus));
	BASE_PLC.getInUint(CIf.Job.bolIoForce,ADR(SIf.In.intMotorActualSpeed));
	BASE_PLC.getInUint(CIf.Job.bolIoForce,ADR(SIf.In.uinMotorSetSpeed));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bol400V_Ok));
ELSE
	//simulation of global IO
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STOP" ObjectId="09e03bbf-eae1-44ff-a886-88cd140bacad">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STOP" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			cCMD_Left:
				SIf.Par.eRotationDirection := E_TURN_DIRECTION.LEFT;
				me.StateMachine.intStateNext := cSTA_RUNBusy;
			cCMD_Right:
				SIf.Par.eRotationDirection := E_TURN_DIRECTION.RIGHT;
				me.StateMachine.intStateNext := cSTA_RUNBusy;
			BASE_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := cSTA_RUNBusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="cmd_MotorClear" ObjectId="0ad32ce5-02b8-4336-897b-d51700cbd635">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="cmd_MotorClear" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">Out_unControl.Output 				:= 0;
SIf.Out.uinSpeedSetpoint.intern 	:= 0;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="150e8486-b104-40bc-a4cd-7964d5391c98">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		SIf.Cur.uinMotorResetCnt := 0;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		CASE me.intCmd OF
			cCMD_Left:
				SIf.Par.eRotationDirection := E_TURN_DIRECTION.LEFT;
				me.StateMachine.intStateNext := cSTA_RUNBusy;
			cCMD_Right:
				SIf.Par.eRotationDirection := E_TURN_DIRECTION.RIGHT;
				me.StateMachine.intStateNext := cSTA_RUNBusy;
			BASE_PLC.cCMD_STOP:
				me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
			BASE_PLC.cCMD_RUN:
				me.StateMachine.intStateNext := cSTA_RUNBusy;
		END_CASE
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="cmd_MotorStop" ObjectId="1a8a96f0-c8a9-40ae-90a4-f5ab5f6c384a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="cmd_MotorStop" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">Out_unControl.Output 				:= 0;
Out_unControl.Data.SetDCBreak 		:= 1;
Out_unControl.Data.SetHalt        	:= 1;
Out_unControl.Data.SetQuickStop    	:= 1;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="cmd_MotorOff" ObjectId="326dcdf1-c155-44d9-932c-4ff855772f9d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="cmd_MotorOff" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">Out_unControl.Output 				:= 0;
Out_unControl.Data.SetDCBreak 		:= 1;
Out_unControl.Data.SetHalt        	:= 1;
Out_unControl.Data.SetQuickStop    	:= 1;
SIf.Out.uinSpeedSetpoint.intern 	:= 0;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="3696bb31-b5b5-4032-aeb8-45d951e4306a">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_UMC" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="3a485704-ed5c-4489-b478-2352d4f505da">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//SUPER^.Always();

IF (me.bolChangeBackToAUTO=TRUE) THEN // switch mode to automatic switch off controller
	me.StateMachine.intStateNext := cSTA_OFFBusy;
	me.bolChangeBackToAUTO := FALSE;
END_IF

IF (CIf.SwCfg.bolExist=FALSE) THEN // hardware of controller does not exist
	me.StateMachine.intStateNext := cSTA_SINGLE_ANSWER;
ELSE
    IF (((me.StateMachine.intState=cSTA_INITIALIZED) OR (me.intCmd=cCMD_PON)) 
        AND (me.StateMachine.intState&lt;&gt;cSTA_PONBusy) AND (me.StateMachine.intState&lt;&gt;cSTA_PON)
        AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) 
        AND (me.StateMachine.intState&lt;&gt;cSTA_EOFF) AND (me.StateMachine.intState&lt;&gt;cSTA_EOFFBusy)) THEN // switch after startup to PONBusy
        me.StateMachine.intStateNext := cSTA_PONBusy;
    END_IF
END_IF

// ----------------------------------------------------------------------------------
// Simulation
IF (CIf.SwCfg.bolSimulation) THEN
	// Simulate inputs (no physical inputs)
	SIf.In.bol400V_Ok.intern := TRUE;
END_IF

// ----------------------------------------------------------------------------------
// Conditions Always
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	IF (((me.StateMachine.intState=cSTA_INITIALIZED) OR (me.intCmd=cCMD_PON))
		AND (me.StateMachine.intState&lt;&gt;cSTA_PONBusy) AND (me.StateMachine.intState&lt;&gt;cSTA_PON)
		AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit)
		AND (me.StateMachine.intState&lt;&gt;cSTA_EOFF) AND (me.StateMachine.intState&lt;&gt;cSTA_EOFFBusy)) THEN
		me.StateMachine.intStateNext := cSTA_PONBusy;
	END_IF

	IF (((me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF))
			AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit)
			AND (me.StateMachine.intState&lt;&gt;cSTA_EOFF) AND (me.StateMachine.intState&lt;&gt;cSTA_EOFFBusy)
			AND (me.StateMachine.intState&lt;&gt;cSTA_OFF) AND (me.StateMachine.intState&lt;&gt;cSTA_OFFBusy)
			AND (me.StateMachine.intState&lt;&gt;UMC_CmdState.cSTA_RESETMOTORERROR)) THEN
		me.StateMachine.intStateNext := cSTA_OFFBusy;	
	END_IF

	IF ((NOT SIf.In.bol400V_Ok.intern) AND (me.StateMachine.intState &lt;&gt; cSTA_EOFF) 
		AND (me.StateMachine.intState &lt;&gt; BASE_PLC.cSTA_EOFFBusy)
		AND (me.StateMachine.intState &lt;&gt; BASE_PLC.cSTA_ERROR) 
		AND (me.StateMachine.intState &lt;&gt; BASE_PLC.cSTA_PON) 
		AND (me.StateMachine.intState &lt;&gt; BASE_PLC.cSTA_PONBusy) 
		AND (me.StateMachine.intState&lt;&gt;BASE_PLC.cSTA_INITIALIZED)
		AND (me.StateMachine.intState &lt;&gt; BASE_PLC.cSTA_ERRORQuit)) THEN
		me.StateMachine.intStateNext := cSTA_EOFFBusy;				
	END_IF
	
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="49188027-cec4-4e22-bc48-1162ee5fdc57">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="iLength">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx &lt; iLength) AND (CIf.Job.aCmdList[iIdx].intCmd &lt;&gt; cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx &lt; iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_STOP;
	CIf.Job.aCmdList[iIdx].strName := 'Stop'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'Run'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := cCMD_LEFT;
	CIf.Job.aCmdList[iIdx].strName := 'Left'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
	CIf.Job.aCmdList[iIdx].intCmd := cCMD_RIGHT;
	CIf.Job.aCmdList[iIdx].strName := 'Right'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
	iIdx := iIdx + 1;
ELSE
	;// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_UMC';
CIf.Info.strFullName := 'Universal Motor Controller';

// set alarm class
SIf.Alm[E_ALM_UMC.MotorOnTimeout].eAlmClass := Base_PLC.E_AlmClass.TSTOP;
SIf.Alm[E_ALM_UMC.MotorOnTimeout].strText := 'Motor On Timeout'; 
SIf.Alm[E_ALM_UMC.MotorError].eAlmClass := Base_PLC.E_AlmClass.TSTOP;
SIf.Alm[E_ALM_UMC.MotorError].strText := 'Motor Error';
SIf.Alm[E_ALM_UMC.MotorWarning].eAlmClass := Base_PLC.E_AlmClass.WARNING;
SIf.Alm[E_ALM_UMC.MotorWarning].strText := 'Motor Warning';
SIf.Alm[E_ALM_UMC.MotorOverCurrent].eAlmClass := Base_PLC.E_AlmClass.WARNING;
SIf.Alm[E_ALM_UMC.MotorOverCurrent].strText := 'Motor Over Current';
SIf.Alm[E_ALM_UMC.MotorNotReady].eAlmClass := Base_PLC.E_AlmClass.TSTOP;
SIf.Alm[E_ALM_UMC.MotorNotReady].strText := 'Motor Not Ready';
SIf.Alm[E_ALM_UMC.DirectionParameterOverflow].eAlmClass := Base_PLC.E_AlmClass.TSTOP;
SIf.Alm[E_ALM_UMC.DirectionParameterOverflow].strText := 'Direction Parameter Overflow';
SIf.Alm[E_ALM_UMC.SpeedOverLimit].eAlmClass := Base_PLC.E_AlmClass.WARNING;
SIf.Alm[E_ALM_UMC.SpeedOverLimit].strText := 'Motor Setpoint over the limit';
SIf.Alm[E_ALM_UMC.MotorStatusInformation].eAlmClass := Base_PLC.E_AlmClass.INFO;

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// configuration
SIf.Cfg.uinLC11 := 1500;
SIf.Cfg.uinLC11_100 := 16384;
SIf.Cfg.uinMaxSpeed := 150;

// parameter
SIf.Par.udiStartupOnTime_ms := 5000;
SIf.Par.udiMotorOnTime_ms 	:= 10000;
SIf.Par.uinSpeed_rpm 		:= 1000;
SIf.Par.uinMotorResetPulseTime_ms	:= 500;
SIf.Par.uinMotorResetCnt 		:= 3;
SIf.Par.udiMoveStartLatency 	:= 15;
SIf.Par.udiMoveStopLatency 		:= 60;
SIf.Par.eRotationDirection  := E_TURN_DIRECTION.LEFT;

SIf.Par.udiSimMotorOnTime_ms := SIf.Par.udiMotorOnTime_ms / 10;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="4cd275a2-017f-4fd0-ac4d-8b20883964bd">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = FALSE) THEN
			IF (me.StateMachine.intStateHistory&lt;=cSTA_PON) THEN
				me.StateMachine.intStateNext := cSTA_PON;
			ELSIF (CIf.SwCfg.bolSimulation = TRUE) THEN	// Do not set operation mode in simulation
				me.StateMachine.intStateNext := BASE_PLC.cSTA_OFF;
			ELSE
				me.StateMachine.intStateNext := UMC_CmdState.cSTA_RESETMOTORERROR;
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="GetSpeedValue" ObjectId="66b53486-bbd4-4830-9c89-63959ea0da21">
                    <interface>
                      <returnType>
                        <UINT />
                      </returnType>
                      <localVars>
                        <variable name="uinSpeedOutput">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="GetSpeedValue" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">uinSpeedOutput := SIf.Par.uinSpeed_rpm * SIf.Cfg.uinLC11_100 / SIf.Cfg.uinLC11;

IF uinSpeedOutput &gt; SIf.Cur.uinSpeedLimit THEN
	uinSpeedOutput := SIf.Cur.uinSpeedLimit;
	pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_UMC.SpeedOverLimit),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
END_IF

GetSpeedValue := uinSpeedOutput;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="736f9f75-7cb1-43df-8de3-f69d4bdd9b87">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bolSwitchValvesOff">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	BASE_PLC.setOutUint(CIf.Job.bolIoForce ,ADR(SIf.Out.uinControl));
	BASE_PLC.setOutUint(CIf.Job.bolIoForce ,ADR(SIf.Out.uinSpeedSetpoint));

	THIS^.Out_uinControl			:= SIf.Out.uinControl.map	;
	THIS^.Out_uinSpeedSetpoint		:= SIf.Out.uinSpeedSetpoint.map	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="7d9bdba7-64c2-4795-9f3a-03cc5948e4c4">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	cSTA_RUNBusy:
		THIS^.sta_RUNBusy();
	cSTA_RUN:
		THIS^.sta_RUN();
	cSTA_STOPBusy: 
        THIS^.sta_STOPBusy();
    cSTA_STOP: 
        THIS^.sta_STOP();
	UMC_CmdState.cSTA_RESETMOTORERROR:
		THIS^.sta_RESETMOTORERROR();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="7f3296c6-7073-4b07-8edd-16b8f4336c81">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		;
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RESETMOTORERROR" ObjectId="8264d63d-8bc3-4403-911a-4948072988bd">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="eMotorStatus">
                          <type>
                            <derived name="E_UMC_MOTOR_STATUS" />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RESETMOTORERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		cmd_MotorReset();
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		eMotorStatus := GetMotorStatus(sif.In.uinStatus.intern);

		IF me.SubStateMachine.udiTimeInState_ms &gt; SIf.Par.uinMotorResetPulseTime_ms THEN
			SIf.Cur.uinMotorResetCnt := SIf.Cur.uinMotorResetCnt + 1;
			me.StateMachine.intStateNext := BASE_PLC.cSTA_OFFBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		Out_unControl.Data.ResetFault := FALSE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNBusy" ObjectId="90aee50a-6506-4bb5-b1aa-9f9d7c1ddd68">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="uniStatus">
                          <type>
                            <derived name="U_UMC_Lenze_Status" />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		SIf.Cur.uinSpeed_rpm := SIf.Par.uinSpeed_rpm;
		SIf.Cur.uinSpeedOuput := GetSpeedValue();
		SIf.Cur.eDirection 	:= SIf.Par.eRotationDirection;
		
		// Switch Motor ON
		IF SIf.Par.eRotationDirection &lt; E_TURN_DIRECTION.MAX_E_TURN_DIRECTION THEN
			cmd_MotorOn(arTurnDirection[SIf.Par.eRotationDirection], SIf.Cur.uinSpeedOuput);
		ELSE
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_UMC.DirectionParameterOverflow),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
		END_IF

		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiSimMotorOnTime_ms);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				SIf.In.uinMotorSetSpeed.intern 	:= SIf.Out.uinSpeedSetpoint.intern;
				SIf.In.uinMotorSetSpeed.intern 	:= SIf.Out.uinSpeedSetpoint.intern;
				uniStatus.Input 				:= 0;
				uniStatus.Data.DriveReady		:= 1;
				uniStatus.Data.SpeedActEqualSet := 1;
				uniStatus.Data.SpeedSetReached  := 1;
				uniStatus.Data.Status_1			:= 1;
				uniStatus.Data.Status_3			:= 1;
				uniStatus.Data.SpeedCcw			:= arTurnDirection[SIf.Par.eRotationDirection];
				SIf.In.uinStatus.intern 		:= uniStatus.Input;
			END_IF
		END_IF

		IF (me.StateMachine.udiTimeInState_ms &gt; SIf.Par.udiMotorOnTime_ms) THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_UMC.MotorOnTimeout),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
		END_IF

		IF In_unStatus.Data.Trouble THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_UMC.MotorError),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
		END_IF
		
		IF (me.StateMachine.intStateNext &lt;&gt; Base_PLC.cSTA_ERROR) THEN
			IF (NOT In_unStatus.Data.Trouble) 
				AND (THIS^.arTurnDirection[SIf.Cur.eDirection] = In_unStatus.Data.SpeedCcw)	THEN
//				AND (In_unStatus.Data.SpeedSetReached) THEN
				me.StateMachine.intStateNext := cSTA_RUN;
			END_IF;	

			// Reenter the RunBusy state again if the speed changes
			IF GetSpeedValue() &lt;&gt; SIf.Cur.uinSpeedOuput THEN
				me.StateMachine.intStateLastCycle := -1;
			END_IF
			
			// Reenter the RunBusy state again if the direction changes.
			IF SIf.Par.eRotationDirection &lt;&gt; SIf.Cur.eDirection THEN
				me.StateMachine.intStateLastCycle := -1;
			END_IF
			
			CASE me.intCmd OF
				cCMD_Left:
					IF SIf.Par.eRotationDirection &lt;&gt; E_TURN_DIRECTION.LEFT THEN
						SIf.Par.eRotationDirection := E_TURN_DIRECTION.LEFT;
						me.StateMachine.intStateLastCycle := -1;
					END_IF
				cCMD_Right:
					IF SIf.Par.eRotationDirection &lt;&gt; E_TURN_DIRECTION.RIGHT THEN
						SIf.Par.eRotationDirection := E_TURN_DIRECTION.RIGHT;
						me.StateMachine.intStateLastCycle := -1;
					END_IF
				BASE_PLC.cCMD_STOP:
					me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
			END_CASE
		END_IF
END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_EOFFbusy" ObjectId="9c2f9fe8-215d-4fdf-97c0-6e2185aa0bfa">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_EOFFbusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
	me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle;
	me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	
	cmd_MotorClear();
END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
	IF (TRUE) THEN
		me.StateMachine.intStateNext := BASE_PLC.cSTA_EOFF;
	END_IF
END_IF

//--------------------------------------------------------------------------------------
// Exit action
IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
	;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="9e716469-41e6-4c16-83b3-eae4c2af4606">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="eMotorStatus">
                          <type>
                            <derived name="E_UMC_MOTOR_STATUS" />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		cmd_MotorOff();
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		eMotorStatus := GetMotorStatus(sif.In.uinStatus.intern);

		IF NOT In_unStatus.Data.Trouble 
		  AND In_unStatus.Data.ActSpeedIsZero
		  AND (eMotorStatus = E_UMC_MOTOR_STATUS.ReadyToSwitchON) THEN
			me.StateMachine.intStateNext := Base_PLC.cSTA_OFF;
		ELSIF (CIf.SwCfg.bolSimulation = TRUE) THEN	// Do not set operation mode in simulation
			me.StateMachine.intStateNext := BASE_PLC.cSTA_OFF;
		ELSE
			IF me.StateMachine.udiTimeInState_ms &gt; SIf.Par.uinMotorResetPulseTime_ms THEN
				IF SIf.Cur.uinMotorResetCnt &gt; SIf.Par.uinMotorResetCnt THEN
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_UMC.MotorError),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
				ELSE
					me.StateMachine.intStateNext := UMC_CmdState.cSTA_RESETMOTORERROR;
				END_IF
			END_IF
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="ac65b301-60da-4f47-a010-e58ca5188043">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="uniStatus">
                          <type>
                            <derived name="U_UMC_Lenze_Status" />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		CIf.Job.intACmd := BASE_PLC.cCMD_DONE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF In_unStatus.Data.Trouble THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_UMC.MotorError),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
		END_IF
		
		IF (me.StateMachine.intStateNext &lt;&gt; Base_PLC.cSTA_ERROR) THEN
			// Reenter the RunBusy state again if the speed changes
			IF SIf.Par.uinSpeed_rpm &lt;&gt; SIf.Cur.uinSpeed_rpm THEN
				me.StateMachine.intStateNext := cSTA_RUNBusy;
			END_IF
			
			// Reenter the RunBusy state again if the direction changes.
			IF SIf.Par.eRotationDirection &lt;&gt; SIf.Cur.eDirection THEN
				me.StateMachine.intStateNext := cSTA_RUNBusy;
			END_IF

			CASE me.intCmd OF
				cCMD_Left:
					SIf.Par.eRotationDirection := E_TURN_DIRECTION.LEFT;
					me.StateMachine.intStateNext := cSTA_RUNBusy;
				cCMD_Right:
					SIf.Par.eRotationDirection := E_TURN_DIRECTION.RIGHT;
					me.StateMachine.intStateNext := cSTA_RUNBusy;
				BASE_PLC.cCMD_STOP:
					me.StateMachine.intStateNext := BASE_PLC.cSTA_STOPBusy;
			END_CASE
		END_IF
END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="b89e4623-bf9b-4d13-915b-6b332e27f154">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		SIf.Cur.uinMotorResetCnt := 0;
		cmd_MotorOff();
		
		bSdoRead := TRUE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		sNetId := F_CreateAmsNetId(In_strNetId);
		fbEcCoESdoRead_ErrorText(sNetId := sNetId,
								 nSlaveAddr := WORD_TO_UINT(In_uintPort),
								 nSubIndex := 3,
								 nIndex := 16#5F59,
								 pDstBuf := ADR(sErrorText),
								 cbBufLen := 70,
								 bExecute := bSdoRead,
								 tTimeout := T#500MS);
								 
		IF bSdoRead AND NOT fbEcCoESdoRead_ErrorText.bBusy THEN
			bSdoRead := FALSE;
		END_IF
		
		IF F_toUCase(sErrorText) &lt;&gt; 'NO ERROR' THEN
			SIf.Alm[E_ALM_UMC.MotorStatusInformation].strText := sErrorText;
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_UMC.MotorStatusInformation),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="GetMotorStatus" ObjectId="ba97abe5-84c2-4af3-b8dd-6dedb07bbbb2">
                    <interface>
                      <returnType>
                        <derived name="E_UMC_MOTOR_STATUS" />
                      </returnType>
                      <inputVars>
                        <variable name="uinMotorStatus">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="GetMotorStatus" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">uinMotorStatus := uinMotorStatus AND 16#0F00;
uinMotorStatus := SHR(uinMotorStatus,8);
GetMotorStatus := UINT_TO_INT(uinMotorStatus);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="be50f307-0332-4dfb-86e8-1d7e3f9b4a0a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.CtrlInit();

arTurnDirection[E_TURN_DIRECTION.AUTOMATIC] := FALSE;
arTurnDirection[E_TURN_DIRECTION.LEFT] 		:= FALSE;
arTurnDirection[E_TURN_DIRECTION.RIGHT] 	:= TRUE;

SIf.Cur.uinSpeedLimit := SIf.Cfg.uinMaxSpeed * SIf.Cfg.uinLC11_100 / 100;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_EOFF" ObjectId="bfe5d590-8682-4646-bfdd-2258cd36f1d7">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_EOFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;	
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN		
		// As long as the EMO is not reseted!
		IF SIf.In.bol400V_Ok.intern THEN
			IF me.StateMachine.intStateHistory=cSTA_PONBusy OR me.StateMachine.intStateHistory=cSTA_PON THEN
				me.StateMachine.intStateNext := BASE_PLC.cSTA_PONBusy;
			ELSE
				me.StateMachine.intStateNext := BASE_PLC.cSTA_OFFBusy;
			END_IF
		ELSE
			IF me.intCmd &lt;&gt; BASE_PLC.cCMD_OFF THEN
				// Clear pending and new commands cyclic to prevent automatic recovery!	
				CIf.Job.intACmd := BASE_PLC.cCMD_DONE;
				CIf.Job.intMCmd := BASE_PLC.cCMD_DONE;		
			END_IF
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STOPBusy" ObjectId="c180d7f4-f7f7-488b-8aaa-4b056e975904">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="uniStatus">
                          <type>
                            <derived name="U_UMC_Lenze_Status" />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STOPBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		// Switch Motor Off
		cmd_MotorStop();
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (CIf.SwCfg.bolSimulation) THEN
			SIf.In.uinMotorSetSpeed.intern 	:= 0;
			SIf.In.intMotorActualSpeed.intern 	:= 0;
			uniStatus.Input 				:= 0;
			uniStatus.Data.ActSpeedIsZero	:= TRUE;
			SIf.In.uinStatus.intern 		:= uniStatus.Input;
		END_IF

		IF (me.StateMachine.udiTimeInState_ms &lt; SIf.Par.udiMotorOnTime_ms) THEN
			IF (NOT In_unStatus.Data.Trouble) AND (In_unStatus.Data.ActSpeedIsZero) THEN
				me.StateMachine.intStateNext := Base_PLC.cSTA_STOP;
			END_IF;	
		ELSE
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_UMC.MotorError),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := Base_PLC.cSTA_ERROR;	
		END_IF
END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		Out_unControl.Data.ResetFault := FALSE;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="cmd_MotorReset" ObjectId="cb1c0de1-c819-406c-9479-8b1d7fc3d345">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="cmd_MotorReset" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">cmd_MotorOff();
Out_unControl.Data.ResetFault 		:= 1;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CycleEndDuty" ObjectId="cbbdec4d-6cee-48b4-953e-bd11ec7bb1cd">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CycleEndDuty" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf.Out.uinControl.intern := Out_unControl.Output;

SUPER^.CycleEndDuty();</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="d6b7f123-3a09-4b60-a640-1798c6d05ee8">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		// Comands's
		CASE intCmdState OF
			cCMD_LEFT: 
				getCmdState := 'cCMD_Left';
			cCMD_RIGHT: 
				getCmdState := 'cCMD_Right';
		END_CASE;
	ELSE
		// States's
		CASE intCmdState OF
			cSTA_RUN: 
				getCmdState := 'RUN';
			cSTA_RUNBusy: 
				getCmdState := 'RUNBusy';
			UMC_CmdState.cSTA_RESETMOTORERROR:
				getCmdState := 'RESETMOTORERROR';
		END_CASE;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="cmd_MotorOn" ObjectId="e8a1edd6-9a14-4af6-bda0-9cb0cbe53275">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bDirection">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Direction of the drive; False = Right; True = Left</xhtml>
                          </documentation>
                        </variable>
                        <variable name="uinSpeed">
                          <type>
                            <UINT />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> Speed of the belt</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="cmd_MotorOn" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">Out_unControl.Output 				:= 0;
Out_unControl.Data.EnableOperation 	:= 1;
Out_unControl.Data.SwitchOn        	:= 1;
Out_unControl.Data.SetSpeedCcw     	:= bDirection;

SIf.Out.uinSpeedSetpoint.intern 	:= uinSpeed;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CycleStartDuty" ObjectId="ef85c73c-cf9d-4365-978d-303e02039685">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CycleStartDuty" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.CycleStartDuty();

In_unStatus.Input := SIf.In.uinStatus.intern;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="0157efd5-9fd8-4e1c-b6ad-564577707b27">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_UMC" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>7c7c56be-85d5-4b7e-bf88-0704e3cbe388</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_VLV" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_bolOpened">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolClosed">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="Out_bolOpen">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_bolClose">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_VLV" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Basic valve controller

History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		06.03.2014		AVME/DSC	Start history. Based on CYL controller

___________________________________________________________________________________________________*)


SUPER^();

(*
IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
END_IF;
*)</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="06d4fff6-826b-4df9-8700-c5db877dc584">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// switch off?
		IF (SIf.Cfg.eTyp = E_Typ_VLV.Valve1_Sensor0) OR (SIf.Cfg.eTyp = E_Typ_VLV.Valve1_Sensor2) 
			OR (SIf.Cfg.eTyp = E_Typ_VLV.Valve1_SensorOpened) OR (SIf.Cfg.eTyp = E_Typ_VLV.Valve1_SensorClosed) THEN
			// monostabil valve -&gt; do nothing
			;
		ELSE
			// bistable valve -&gt; switch both off
			SIf.Out.bolOpen.intern := FALSE;
			SIf.Out.bolClose.intern := FALSE;
		END_IF
		
		
		
		// State Change Condition
		IF (TRUE) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_CLOSE" ObjectId="15f1ec19-b0d0-4924-8e58-148827c9b4b3">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_CLOSE" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// State Change Condition
		IF (SIf.In.bolOpen.intern) THEN
			// sensor open always on
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_VLV.SensorOpenAlwaysOn,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF ((SIf.In.bolClose.intern = FALSE) AND ((SIf.Cfg.eTyp = E_Typ_VLV.Valve1_SensorClosed) OR (SIf.Cfg.eTyp = E_Typ_VLV.Valve2_SensorClosed))) THEN // wait time until error?
			me.StateMachine.intStateNext := VLV_CmdState.cSTA_CLOSEBusy;
		ELSIF(me.intCmd=VLV_CmdState.cCMD_OPEN) THEN
			me.StateMachine.intStateNext := VLV_CmdState.cSTA_OPENBusy;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="1f851396-69ba-4596-80bd-99073f07f906">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;	
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="5f8d86d4-d3c3-4f1b-819e-cae2994a5d48">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
SIf.In.bolOpen.map := THIS^.In_bolOpened;
SIf.In.bolClose.map := THIS^.In_bolClosed;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolOpen));
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolClose));
ELSE
	//simulation of global IO
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OPENBusy" ObjectId="6cc4e05e-d369-4b50-a636-56b617337fbe">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OPENBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

		SIf.Out.bolOpen.intern := TRUE;
		SIf.Out.bolClose.intern := FALSE;
		
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiSimOpenTime_ms);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				SIf.In.bolOpen.intern := TRUE;
				SIf.In.bolClose.intern := FALSE;
			END_IF
		END_IF
		
		// State Change Condition
		IF (me.StateMachine.udiTimeInState_ms &gt; SIf.Par.udiOpenTime_ms) THEN
			IF (SIf.In.bolClose.intern) THEN
				// sensor close always on
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_VLV.SensorCloseAlwaysOn,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			ELSE
				// timeout open valve
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_VLV.SensorOpenNotReached,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF (SIf.In.bolOpen.intern) AND (SIf.In.bolClose.intern=FALSE) THEN
			me.StateMachine.intStateNext := VLV_CmdState.cSTA_OPEN;
		ELSIF ((SIf.Cfg.eTyp = E_Typ_VLV.Valve1_SensorClosed) OR (SIf.Cfg.eTyp = E_Typ_VLV.Valve2_SensorClosed))
				 AND (SIf.In.bolClose.intern=FALSE) AND (me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiSimOpenTime_ms) THEN
			me.StateMachine.intStateNext := VLV_CmdState.cSTA_OPEN;
		ELSIF ((SIf.Cfg.eTyp = E_Typ_VLV.Valve1_Sensor0) OR (SIf.Cfg.eTyp = E_Typ_VLV.Valve2_Sensor0))
				AND (me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiSimOpenTime_ms) THEN
			me.StateMachine.intStateNext := VLV_CmdState.cSTA_OPEN;		
		ELSIF(me.intCmd=VLV_CmdState.cCMD_CLOSE) THEN
			me.StateMachine.intStateNext := VLV_CmdState.cSTA_CLOSEBusy;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		SIf.Cur.udiMoveTimeOpen := me.StateMachine.udiTimeInState_ms;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="792c89a2-c475-4489-ac4c-015f56b4e51b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bolSwitchValvesOff">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolOpen));
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolClose));
	
	// check interlocks to prevent damages
	IF (CIf.Job.bolIlkOverwrite=FALSE) THEN
		bolSwitchValvesOff := FALSE;
		
		IF (SIf.Ilk.bolOpen=TRUE) THEN
			// switch off?
			IF (SIf.Cfg.eTyp = E_Typ_VLV.Valve1_Sensor0) OR (SIf.Cfg.eTyp = E_Typ_VLV.Valve1_Sensor2) 
				OR (SIf.Cfg.eTyp = E_Typ_VLV.Valve1_SensorOpened) OR (SIf.Cfg.eTyp = E_Typ_VLV.Valve1_SensorClosed) THEN
				// monostabil valve -&gt; do nothing
			ELSE
				// bistable valve -&gt;  switch both off
				bolSwitchValvesOff := TRUE;
				IF (SIf.Out.bolOpen.map=1) THEN
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_VLV.InterlockOpen,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				END_IF
			END_IF
		END_IF
		
		IF (SIf.Ilk.bolClose=TRUE) THEN
			// switch off?
			IF (SIf.Cfg.eTyp = E_Typ_VLV.Valve1_Sensor0) OR (SIf.Cfg.eTyp = E_Typ_VLV.Valve1_Sensor2) 
				OR (SIf.Cfg.eTyp = E_Typ_VLV.Valve1_SensorOpened) OR (SIf.Cfg.eTyp = E_Typ_VLV.Valve1_SensorClosed) THEN
				// monostabil valve -&gt; do nothing
				;
			ELSE
				// bistable valve -&gt; switch both off
				bolSwitchValvesOff := TRUE;
				IF (SIf.Out.bolClose.map=1) THEN
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_VLV.InterlockClose,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
				END_IF;
			END_IF
		END_IF
		
		// bistable valve -&gt; switch both off
		IF (bolSwitchValvesOff) THEN
			SIf.Out.bolOpen.map := FALSE;
			SIf.Out.bolClose.map := FALSE;
		END_IF
		
	END_IF

	THIS^.Out_bolOpen := SIf.Out.bolOpen.map;
	THIS^.Out_bolClose := SIf.Out.bolClose.map;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_CLOSEBusy" ObjectId="83489284-5ffd-4b00-b98a-cd1342a58402">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_CLOSEBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		SIf.Out.bolOpen.intern := FALSE;
		SIf.Out.bolClose.intern := TRUE;
		
		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiSimCloseTime_ms);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				SIf.In.bolClose.intern := TRUE;
				SIf.In.bolOpen.intern := FALSE;
			END_IF
		END_IF
		
		// State Change Condition
		IF (me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiCloseTime_ms) THEN
			IF (SIf.In.bolOpen.intern) THEN
				// sensor open always on 
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_VLV.SensorOpenAlwaysOn,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			ELSE
				// timeout close valve
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_VLV.SensorCloseNotReached,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF (SIf.In.bolClose.intern) AND(SIf.In.bolOpen.intern=FALSE) THEN
			me.StateMachine.intStateNext := VLV_CmdState.cSTA_CLOSE;
		ELSIF ((SIf.Cfg.eTyp = E_Typ_VLV.Valve1_SensorOpened) OR (SIf.Cfg.eTyp = E_Typ_VLV.Valve2_SensorOpened))
				 AND (SIf.In.bolOpen.intern=FALSE) AND (me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiSimCloseTime_ms) THEN
			me.StateMachine.intStateNext := VLV_CmdState.cSTA_CLOSE;
		ELSIF ((SIf.Cfg.eTyp = E_Typ_VLV.Valve1_Sensor0) OR (SIf.Cfg.eTyp = E_Typ_VLV.Valve2_Sensor0))
				AND (me.StateMachine.udiTimeInState_ms&gt;SIf.Par.udiSimCloseTime_ms) THEN
			me.StateMachine.intStateNext := VLV_CmdState.cSTA_CLOSE;		
		ELSIF(me.intCmd=VLV_CmdState.cCMD_OPEN) THEN
			me.StateMachine.intStateNext := VLV_CmdState.cSTA_OPENBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		SIf.Cur.udiMoveTimeClose := me.StateMachine.udiTimeInState_ms;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="92860e10-9957-42cd-ae35-6b5b1a06e6d1">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">IF (me.bolChangeBackToAUTO=TRUE) THEN // switch mode to automatic switch off controller
	//me.StateMachine.intStateNext := cSTA_OFFBusy;
	me.bolChangeBackToAUTO := FALSE; // for valve no change to off when switch to automatic!!
END_IF

SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	; // always error supervision
	// ----------------------------------------------------------------------------------
	// overrule error always from base -&gt; no EOFF State!! in EOFF go to OFF
	IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
		IF (me.StateMachine.intState=cSTA_OFF) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		ELSE // stay in OFF
			me.StateMachine.intStateNext := cSTA_OFFBusy;
		END_IF
	END_IF
END_IF


</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="9c42a1d1-076f-4a21-8f9d-ebadf4911639">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states
IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		// cmd's
		CASE intCmdState OF
			VLV_CmdState.cCMD_OPEN: 
				getCmdState := 'cCMD_OPEN';
			VLV_CmdState.cCMD_CLOSE: 
				getCmdState := 'cCMD_CLOSE';
		ELSE
			getCmdState := 'Cmd not defined';
		END_CASE;
	ELSE
	
	// cmd's
		CASE intCmdState OF
			VLV_CmdState.cSTA_OPENBusy: 
				getCmdState := 'cSTA_OPENBusy';
			VLV_CmdState.cSTA_OPEN: 
				getCmdState := 'cSTA_OPEN';
			VLV_CmdState.cSTA_CLOSEBusy: 
				getCmdState := 'cSTA_CLOSEBusy';
			VLV_CmdState.cSTA_CLOSE: 
				getCmdState := 'cSTA_CLOSE';
		ELSE
			getCmdState := 'State not defined';
		END_CASE;
	END_IF
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="cac029ef-196b-4624-b146-4fbe2ee727de">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_VLV" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="ddcdaa7f-2db4-42cf-9c96-d1fd802dbbe9">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = FALSE) THEN
			IF (me.StateMachine.intStateHistory&lt;=cSTA_PON) THEN
				me.StateMachine.intStateNext := cSTA_PONBusy;
			ELSIF(me.intCmd=cCMD_OFF) THEN
				me.StateMachine.intStateNext := cSTA_OFFBusy;
			ELSIF(me.intCmd=VLV_CmdState.cCMD_OPEN) THEN
				me.StateMachine.intStateNext := VLV_CmdState.cSTA_OPENBusy;
			ELSIF(me.intCmd=VLV_CmdState.cCMD_CLOSE) THEN
				me.StateMachine.intStateNext := VLV_CmdState.cSTA_CLOSEBusy;
			END_IF
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="e6c5f0f7-f14d-4d19-9372-986e38860334">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="ii">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR ii:= 0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[ii].intCmd=cCMD_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR

CIf.Job.aCmdList[ii].intCmd := cCMD_OPEN;
CIf.Job.aCmdList[ii].strName := 'Open';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := cCMD_CLOSE; 
CIf.Job.aCmdList[ii].strName := 'Close';
CIf.Job.aCmdList[ii].bolAvailable := TRUE;

// set name of class/typ
CIf.Info.strType := 'FB_VLV';
CIf.Info.strFullName := 'Valve Controller';

// set alarm class
SIf.Alm[E_ALM_VLV.SensorOpenAlwaysOn].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_VLV.SensorOpenAlwaysOn].strText := 'sensor open always on'; 
SIf.Alm[E_ALM_VLV.SensorOpenNotReached].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_VLV.SensorOpenNotReached].strText := 'timeout open - sensor open not reached';
SIf.Alm[E_ALM_VLV.SensorCloseAlwaysOn].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_VLV.SensorCloseAlwaysOn].strText := 'sensor close always on';
SIf.Alm[E_ALM_VLV.SensorCloseNotReached].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_VLV.SensorCloseNotReached].strText := 'timeout close - sensor close not reached';
SIf.Alm[E_ALM_VLV.InterlockOpen].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_VLV.InterlockOpen].strText := 'interlock open - movement stopped';
SIf.Alm[E_ALM_VLV.InterlockClose].eAlmClass := E_AlmClass.OFF;
SIf.Alm[E_ALM_VLV.InterlockClose].strText := 'interlock close - movement stopped';

//*******************************************************************************
// initial values
//*******************************************************************************

// Configuration defaults of class
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// Parameter defaults of class
SIf.Par.udiOpenTime_ms := 4000;
SIf.Par.udiCloseTime_ms := 4000;
SIf.Par.udiSimOpenTime_ms := SIf.Par.udiOpenTime_ms/2;	
SIf.Par.udiSimCloseTime_ms := SIf.Par.udiCloseTime_ms/2;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OPEN" ObjectId="ea4872a5-0031-4ffe-b38a-59a870c21bdd">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OPEN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// State Change Condition
		IF (SIf.In.bolClose.intern) THEN
			// sensor close always on
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_VLV.SensorCloseAlwaysOn,0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext :=  cSTA_ERROR;
		ELSIF ((SIf.In.bolOpen.intern = FALSE) AND ((SIf.Cfg.eTyp = E_Typ_VLV.Valve1_SensorOpened) OR (SIf.Cfg.eTyp = E_Typ_VLV.Valve2_SensorOpened))) THEN // wait time until error?
			me.StateMachine.intStateNext := VLV_CmdState.cSTA_OPENBusy;
		ELSIF(me.intCmd=VLV_CmdState.cCMD_CLOSE) THEN
			me.StateMachine.intStateNext := VLV_CmdState.cSTA_CLOSEBusy;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="f200a4ad-fdbb-4e4a-b949-20ad0e972d91">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    VLV_CmdState.cSTA_OPENBusy: 
        THIS^.sta_OPENBusy();
    VLV_CmdState.cSTA_OPEN: 
        THIS^.sta_OPEN();
    VLV_CmdState.cSTA_CLOSEBusy: 
        THIS^.sta_CLOSEBusy();
    VLV_CmdState.cSTA_CLOSE: 
        THIS^.sta_CLOSE();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="f3efc9ab-b7b7-412d-b282-f24eef564791">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		// State Change Condition
		IF (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.EOFF) AND (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.OFF) THEN
			IF (me.intCmd=VLV_CmdState.cCMD_OPEN) THEN 
				me.StateMachine.intStateNext := VLV_CmdState.cSTA_OPENBusy;
			ELSIF(me.intCmd=VLV_CmdState.cCMD_CLOSE) THEN
				me.StateMachine.intStateNext := VLV_CmdState.cSTA_CLOSEBusy;
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="e0b02b20-9157-489e-bd37-1790c676c697">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_VLV" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>e7c452ef-6069-4824-b6af-02d0e02ac29f</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_VPC" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_bolVacuumOk">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="In_bolPumpOk">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="Out_bolVaccumPumpOn">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="SIf">
                    <type>
                      <derived name="T_Ctrl_SIf_VPC" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct for public access</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Vacuum Pump implementation. 


History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		09.07.2013		PC			Start history
___________________________________________________________________________________________________*)


SUPER^();

(*
IF (me.bolActivate) THEN // cyclic call enabled
	IF (CIf.Info.bolInitDone=FALSE) THEN // first cycle -&gt; init
		CtrlInit();
		CIf.Info.bolInitDone := TRUE;
	ELSE
		CycleStartDuty();
	
		Always();
		
		StateMachine();
		
		CycleEndDuty();
	END_IF
END_IF;
*)</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNBusy" ObjectId="1597373b-6e96-49e1-bdbf-9fa98235040c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		SIf.Out.bolVacuumPumpOn.intern := TRUE;

		fbSimulationTimer.IN := FALSE;
		fbSimulationTimer.PT := UDINT_TO_TIME(SIf.Par.udiSimVacuumPumpOnTime_ms);
		fbSimulationTimer(); // set time/reset timer
		fbSimulationTimer.IN := TRUE; // start timer
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			fbSimulationTimer(); // simulation time
			IF (fbSimulationTimer.Q) THEN
				SIf.In.bolPumpOn.intern := TRUE;
				SIf.In.bolVacuumOk.intern := TRUE;
			END_IF
		END_IF

		IF ((SIf.In.bolVacuumOk.intern) OR (NOT SIf.Cfg.VacuumPumpFeedback)) AND ((SIf.In.bolVacuumOk.intern) OR (NOT SIf.Cfg.VacuumSensorAvailable)) THEN
			me.StateMachine.intStateNext := VPC_CmdState.cSTA_VPC_StabilizeBusy;
		END_IF;		
		
		IF (me.StateMachine.udiTimeInState_ms &gt; SIf.Par.udiVacuumPumpTime_ms) THEN
			IF (NOT SIf.In.bolPumpOn.intern) AND (SIf.Cfg.VacuumPumpFeedback) THEN
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_VPC.VacuumPumpOnTimeout),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF;

			IF ((NOT SIf.In.bolVacuumOk.intern) AND (SIf.Cfg.VacuumSensorAvailable)) THEN
				pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_VPC.VacuumFailure),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			END_IF;	

			me.StateMachine.intStateNext :=  cSTA_ERROR;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="3b060d29-e9cf-457f-8c49-0301ccd0cca5">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="bolSwitchValvesOff">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf.Out.bolVacuumPumpOn));

	THIS^.Out_bolVaccumPumpOn := SIf.Out.bolVacuumPumpOn.map;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCtrlSIf" ObjectId="3f73b4c8-fe1a-4e64-b16a-7e0063e5c6aa">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_VPC" />
                          </baseType>
                        </pointer>
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCtrlSIf" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCtrlSIf := ADR(SIf);</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="49182cc1-4f51-4fb4-9202-ff24f518710e">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                        <variable name="iLength">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------------------------
// to manually change in new FUB implementation!!!
// define valid commands for this controller
iLength := SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0]);
iIdx := 0;

WHILE (iIdx &lt; iLength) AND (CIf.Job.aCmdList[iIdx].intCmd &lt;&gt; cCMD_INITIALIZED) DO
	iIdx := iIdx + 1; 
END_WHILE

IF (iIdx &lt; iLength) THEN
// Add configuration of own comands	
	CIf.Job.aCmdList[iIdx].intCmd := BASE_PLC.cCMD_RUN;
	CIf.Job.aCmdList[iIdx].strName := 'RUN'; 
	CIf.Job.aCmdList[iIdx].bolAvailable := TRUE;
ELSE
	// Error if the aCmdList Array is to small
END_IF

// set name of class/typ
CIf.Info.strType := 'FB_VPC';
CIf.Info.strFullName := 'Vacuum Pump Controller';

// set alarm class
SIf.Alm[E_ALM_VPC.VacuumPumpOnTimeout].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_VPC.VacuumPumpOnTimeout].strText := 'Vacuum pump On timeout'; 
SIf.Alm[E_ALM_VPC.VacuumPumpOffTimeout].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_VPC.VacuumPumpOffTimeout].strText := 'Vacuum pump Off timeout';
SIf.Alm[E_ALM_VPC.VacuumFailure].eAlmClass := E_AlmClass.TSTOP;
SIf.Alm[E_ALM_VPC.VacuumFailure].strText := 'Vacuum failure';

//*******************************************************************************
// initial values
//*******************************************************************************

// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolEnable := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

// parameter
SIf.Par.udiVacuumPumpTime_ms := 10000;
SIf.Par.udiVacuumStabilizationTime_ms := 3000;
SIf.Par.udiSimVacuumPumpOnTime_ms := SIf.Par.udiVacuumPumpTime_ms / 2;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="4f56d2f9-8407-4812-8ceb-f4f26f794649">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	; // always error supervision
	
END_IF

// ----------------------------------------------------------------------------------
// Conditions Always
IF (((me.Alarm.eActivAlmClass=E_AlmClass.EOFF) OR (me.Alarm.eActivAlmClass=E_AlmClass.OFF) OR (me.intCmd=cCMD_OFF))
		 AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR) AND (me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit) AND
		(me.StateMachine.intState&lt;&gt;cSTA_OFF) AND (me.StateMachine.intState&lt;&gt;cSTA_OFFBusy)) THEN
	// alarm evt EOFF, OFF or cmd off
	me.StateMachine.intStateNext := cSTA_OFFBusy;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_StabilizeVacuum" ObjectId="56e99b8a-45db-4a94-b998-af0d9227c626">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_StabilizeVacuum" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		// State Change Condition
		
		IF (me.StateMachine.udiTimeInState_ms &gt; SIf.Par.udiVacuumStabilizationTime_ms) THEN
			me.StateMachine.intStateNext :=  BASE_PLC.cSTA_RUN;
		END_IF;	

		IF (NOT SIf.In.bolPumpOn.intern) AND (SIf.Cfg.VacuumPumpFeedback) THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_VPC.VacuumPumpOnTimeout),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext :=  BASE_PLC.cSTA_ERROR;
		END_IF;

		IF ((NOT SIf.In.bolVacuumOk.intern) AND (SIf.Cfg.VacuumSensorAvailable)) THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_VPC.VacuumFailure),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext :=  BASE_PLC.cSTA_ERROR;
		END_IF;	
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="58e778f2-58e2-4242-b691-65410b4a0daa">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		// Switch Pump Off
		SIf.Out.bolVacuumPumpOn.intern := FALSE;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF (CIf.SwCfg.bolSimulation) THEN
			SIf.In.bolPumpOn.intern := FALSE;
			SIf.In.bolVacuumOk.intern := FALSE;
		END_IF

		IF ((NOT SIf.In.bolPumpOn.intern) OR (NOT SIf.Cfg.VacuumPumpFeedback)) AND ((NOT SIf.In.bolVacuumOk.intern) OR (NOT SIf.Cfg.VacuumSensorAvailable)) THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_OFF;
		END_IF;	
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="69e589e4-f383-473e-b644-e3226d6d511f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;

	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		IF me.intCmd = BASE_PLC.cCMD_RUN THEN
			me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="703f6dd4-8675-4294-8b3d-2f6ff473bc8c">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states

IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		;// Comands's
	ELSE
		// States's
		CASE intCmdState OF
			VPC_CmdState.cSTA_VPC_StabilizeBusy: 
				getCmdState := 'cSTA_StabilizeBusy';
		END_CASE;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="814d30da-f6f2-44a3-8f69-fbdc9cbd5a0a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		// State Change Condition
		IF (NOT SIf.In.bolPumpOn.intern) AND (SIf.Cfg.VacuumPumpFeedback) THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_VPC.VacuumPumpOnTimeout),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext :=  BASE_PLC.cSTA_ERROR;
		END_IF;

		IF ((NOT SIf.In.bolVacuumOk.intern) AND (SIf.Cfg.VacuumSensorAvailable)) THEN
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,INT_TO_UINT(E_ALM_VPC.VacuumFailure),0,ADR(SIf.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext :=  BASE_PLC.cSTA_ERROR;
		END_IF;	
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PON" ObjectId="cd944ca7-9f97-4fb3-b4a2-4d1ad61c9f19">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PON" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		;
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="cdcdfbea-0d76-4965-a714-0ee8fc61cf6a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="e901586d-7f23-48a3-af3c-72b64ab38fc4">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
SIf.In.bolVacuumOk.map := THIS^.In_bolVacuumOk;
SIf.In.bolPumpOn.map := THIS^.In_bolPumpOk;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolVacuumOk));
	getInBol(CIf.Job.bolIoForce,ADR(SIf.In.bolPumpOn));
ELSE
	//simulation of global IO
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="fb3e697c-bec3-4662-ad64-257ff20479d8">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
    VPC_CmdState.cSTA_VPC_StabilizeBusy: 
        THIS^.sta_StabilizeVacuum();
	cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
    cSTA_RUN: 
        THIS^.sta_RUN();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERRORQuit" ObjectId="fbdec985-78a5-46c9-a569-cae78f6ce0ca">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERRORQuit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// evtl. wait time if reset of device is necessary and then decide to go to states or ERROR state
		IF (CIf.Job.bolAlmReset = TRUE) THEN
			CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // reset feedback channel for parent
			CIf.Job.bolAlmReset := FALSE;
		END_IF
		
		// State Change Condition
		IF (CIf.Job.bolAlmReset = FALSE) THEN
			IF (me.StateMachine.intStateHistory&lt;=cSTA_PON) THEN
				me.StateMachine.intStateNext := cSTA_PONBusy;
			ELSIF(me.intCmd=cCMD_OFF) THEN
				me.StateMachine.intStateNext := cSTA_OFFBusy;
			ELSIF(me.intCmd=cCMD_STOP) THEN
				me.StateMachine.intStateNext := cSTA_STOPBusy;
			ELSIF(me.intCmd=BASE_PLC.cCMD_RUN) THEN
				me.StateMachine.intStateNext := BASE_PLC.cSTA_RUNBusy;
			END_IF
		END_IF
	END_IF




//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="CtrlSIf" ObjectId="8996880a-f410-4ad8-9c12-fc2a666a5164">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_VPC" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">CtrlSIf := ADR(SIf);</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>13511828-5fa3-4db9-8a62-883d17247bf0</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_CtrlModule" pouType="functionBlock">
              <interface>
                <inputVars>
                  <variable name="In_bolEmoOk">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Emergency circuit OK</xhtml>
                    </documentation>
                  </variable>
                  <variable name="In_bolReady">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> signals that next module is ready</xhtml>
                    </documentation>
                  </variable>
                </inputVars>
                <outputVars>
                  <variable name="Out_bolReady">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> signals that this module is ready</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_bolRed">
                    <type>
                      <BOOL />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Stacklights outputs</xhtml>
                    </documentation>
                  </variable>
                  <variable name="Out_bolYellow">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_bolGreen">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_bolBlue">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="Out_bolHorn">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                </outputVars>
                <localVars>
                  <variable name="udinTimeToggle_ms">
                    <type>
                      <UDINT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Timeout supervision of Keep alive Toggle Bit</xhtml>
                    </documentation>
                  </variable>
                  <variable name="SIf_MOD">
                    <type>
                      <derived name="T_Ctrl_SIf_MOD" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Specific interface struct</xhtml>
                    </documentation>
                  </variable>
                  <variable name="uinGroupIndex">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="intCheckCounter">
                    <type>
                      <INT />
                    </type>
                  </variable>
                  <variable name="uinMaxNrOfGroups">
                    <type>
                      <UINT />
                    </type>
                    <initialValue>
                      <simpleValue value="Base_Const.cMaxNrOfChilds" />
                    </initialValue>
                  </variable>
                  <variable name="aListOfSeq">
                    <type>
                      <array>
                        <dimension lower="0" upper="Base_Const.cMaxNrOfChilds" />
                        <baseType>
                          <derived name="T_Sequence" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> List of sequences</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiNumOfSeq">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                  <variable name="usiNumOfValidPointerSeqChild">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                  </variable>
                  <variable name="usiNumOfRunGrpWaitTime">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] List of waiting times for run sequence until the next group will execute
 If wait time is zero, next group will be directly executed after current group.  
	aListOfRunGrpWaitTime_ms: ARRAY[0..Base_Const.cMaxNrOfChilds] OF UDINT;</xhtml>
                    </documentation>
                  </variable>
                  <variable name="usiNumOfStopGrpWaitTime">
                    <type>
                      <USINT />
                    </type>
                    <initialValue>
                      <simpleValue value="0" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> [ms] List of waiting times for stop sequence until the next group will execute
 If wait time is zero, next group will be directly executed after current group. 
	aListOfStopGrpWaitTime_ms: ARRAY[0..Base_Const.cMaxNrOfChilds] OF UDINT;</xhtml>
                    </documentation>
                  </variable>
                  <variable name="a_IBufferChildCtrl">
                    <type>
                      <array>
                        <dimension lower="0" upper="Base_Const.cMaxNrOfChilds" />
                        <baseType>
                          <derived name="IBuffer" />
                        </baseType>
                      </array>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Array includes all registered childs of type IBuffer</xhtml>
                    </documentation>
                  </variable>
                  <variable name="a_IBufferFullChildCtrl">
                    <type>
                      <array>
                        <dimension lower="0" upper="Base_Const.cMaxNrOfChilds" />
                        <baseType>
                          <derived name="IBuffer" />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="usiNumOfIBufferChild">
                    <type>
                      <USINT />
                    </type>
                  </variable>
                  <variable name="usiNumOfIBufferFullChild">
                    <type>
                      <USINT />
                    </type>
                  </variable>
                  <variable name="ii">
                    <type>
                      <INT />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Counter</xhtml>
                    </documentation>
                  </variable>
                  <variable name="_fbSignalTower">
                    <type>
                      <derived name="FB_STD" />
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Signal Tower Driver</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <localVars constant="true">
                  <variable name="cSTA_SUB_INITIALIZED">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="500" />
                    </initialValue>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> sub States for run and stop sequences</xhtml>
                    </documentation>
                  </variable>
                  <variable name="cSTA_SUB_SEND_GROUP_CMD">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="502" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_CHECK_GROUP_STATUS">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="504" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_WAIT">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="506" />
                    </initialValue>
                  </variable>
                  <variable name="cSTA_SUB_FINISHED">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="508" />
                    </initialValue>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">(*__________________________________________________________________________________________________
¦	
¦	Vistaprint Schweiz GmbH
¦	CH - 8401 Winterthur
¦
¦	www.vistaprint.ch - info@vistaprint.ch
¦___________________________________________________________________________________________________

Function desription:
Basic module controller implementation. This Controller should be the base father controller for all modules in shirt stream. 
e.g. used for ICL, ICB, Loading ...

Controller handle following basic functions:
--------------------------------------------
- Monitoring of common signals from cabinet
- Keep alive bit to line control
- General child handling RUN_busy, STOP_busy sequences and error handling

History:
Version		Date			Author		Comment
---------------------------------------------------------------------------------------------------
0.00.1		06.11.2013		AVM/DSC		Start history
0.00.2		14.11.2013		AVM/MRU		Changes in some methods
0.00.3		29.11.2013		AVM/MRU		Changes in IoInBridge
0.00.4		04.12.2013		AVM/MRU		Changes in Always - EOFFBusy
0.00.5		04.12.2013		AVM/MRU		Changes in Always - EOFFBusy at GeneralError
0.00.6		04.12.2013		AVM/MRU		Changes in Always - EOFFBusy if not in sta_EOFF 
0.00.7		05.12.2013		AVM/DSC		General revision of behaviour in case of emergency off (state EOFF) and general error (state ERROR).
										New handling for module specific interface.
0.00.8		06.12.2013		AVM/MRU		Add TSTOP in checkChildAlmClass
0.00.9		09.12.2013		AVM/DSC		BugFix in sub state "cSTA_SUB_CHECK_GROUP_STATUS" from run and stop sequence. Insert new "bolChecked" flag
						 				to detect if the sequence has been processed correctly.
0.00.10		11.12.2013		AVM/MRU		Clear pending command to prevent automatic recovery in sta_STOPBusy
0.00.11		13.01.2014		AVM/MRU		Bugzilla ID 03: BufferFull added
0.00.12		20.01.2014		AVM/MRU		EMO, general error reworked; AddRunGrp, AddStopGrp removed
										Timeout run/stop group added 
0.00.13		22.01.2014		AVM/MRU		Alternative status for run sequence added
0.00.14		08.02.2014		VP/RE		Added bolStopReleaseHangers to CUR.

___________________________________________________________________________________________________*)


IF (SIf_MOD.Cur&lt;&gt;0) AND (SIf_MOD.Cfg&lt;&gt;0) AND (SIf_MOD.Par&lt;&gt;0) AND (SIf_MOD.In&lt;&gt;0) THEN // cyclic call enabled
	SUPER^();
END_IF;
</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoOutBridge" ObjectId="0547fd7b-a1af-4009-8ecb-2ef72dd56f49">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoOutBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	
	setOutBol(CIf.Job.bolIoForce ,ADR(SIf_Out^.bolReady));
	THIS^.Out_bolReady := SIf_Out^.bolReady.map;

	// check interlocks to prevent damages
	IF (CIf.Job.bolIlkOverwrite=FALSE) THEN
	;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="getCmdState" ObjectId="12fc8a53-4b7a-4d57-b5d7-3d215ebc1d8b">
                    <interface>
                      <returnType>
                        <string />
                      </returnType>
                      <inputVars>
                        <variable name="intCmdState">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolState">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="getCmdState" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">getCmdState := SUPER^.getCmdState(intCmdState:=intCmdState,bolState:=bolState); // get global/base defined cmds/states
IF (getCmdState='') THEN // global not defined get local
	// get string cmd/state string information in runtime
	IF (bolState=FALSE) THEN
		// cmd's
		;
	ELSE
		// states
		CASE intCmdState OF
			// SUB States
			cSTA_SUB_INITIALIZED:
				getCmdState := 'cSTA_SUB_INITIALIZED';
			cSTA_SUB_SEND_GROUP_CMD:
				getCmdState := 'cSTA_SUB_SEND_GROUP_CMD';
			cSTA_SUB_CHECK_GROUP_STATUS:
				getCmdState := 'cSTA_SUB_CHECK_GROUP_STATUS';
			cSTA_SUB_WAIT:
				getCmdState := 'cSTA_SUB_WAIT';
			cSTA_SUB_FINISHED:
				getCmdState := 'cSTA_SUB_FINISHED';
		END_CASE;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Always" ObjectId="2b2066c4-4e8e-4805-ad8b-8de49b1882dd">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Always" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.Always();

// ---------------------------------------------------------------------------------
// Simulation
IF (CIf.SwCfg.bolSimulation) THEN
	SIf_Cur^.bolKeepAliveHost := NOT SIf_Cur^.bolKeepAlivePlc;
	// Simulate inputs from global module for general supervision (no physical inputs)
	SIf_In^.bolEmoOk.intern := TRUE;
	SIf_In^.bolReady.intern := TRUE;
END_IF

// ----------------------------------------------------------------------------------
// cyclic actions outside of statemachine
IF (me.StateMachine.intState&lt;&gt;cSTA_SINGLE_ANSWER) THEN
	
	// Ready Output
	SIf_Out^.bolReady.intern := (me.StateMachine.intState = BASE_PLC.cSTA_RUN) AND (me.Alarm.eActivAlmClass &lt; BASE_PLC.E_AlmClass.TSTOP);
	
	// Emergency Off
	IF ((SIf_In^.bolEmoOk.intern = FALSE) AND (me.StateMachine.intState &lt;&gt; cSTA_EOFF) AND (me.StateMachine.intState &lt;&gt; cSTA_EOFFBusy)
		AND (me.StateMachine.intState &lt;&gt; cSTA_ERROR) AND (me.StateMachine.intState &lt;&gt; cSTA_ERRORQuit)) THEN
		me.StateMachine.intStateNext := cSTA_EOFFBusy;				
	END_IF
	
	// As long as EMO is not OK, set Alarm
	IF (SIf_In^.bolEmoOk.intern = FALSE) AND ((me.StateMachine.intState = cSTA_EOFF) OR (me.StateMachine.intState = cSTA_EOFFBusy)) THEN
		//SIf_MOD.Alm[E_ALM_MOD.EmergencyOff].strText := 'Emergency off active';
		pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_MOD.EmergencyOff,0,ADR(SIf_MOD.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
	END_IF
	
END_IF

//-------------------------------------------------------------------------------
// Keep Alive function to line controller with togglebit
//-------------------------------------------------------------------------------

// Communication to line control enabled
IF (SIf_Cfg^.bolComToLineControlEnabled = TRUE) THEN
	IF (SIf_Cur^.bolKeepAliveHost &lt;&gt; SIf_Cur^.bolKeepAlivePlc) THEN
		udinTimeToggle_ms := 0;
		SIf_Cur^.bolKeepAlivePlc := SIf_Cur^.bolKeepAliveHost;
	ELSE
		IF (udinTimeToggle_ms &gt;= SIf_Par^.udiComTimeOutLineCtrl_ms) THEN
			//SIf_MOD.Alm[E_ALM_MOD.CommunicationError].strText := 'Communication error to line control'; 
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_MOD.CommunicationError,UDINT_TO_DINT(udinTimeToggle_ms),ADR(SIf_MOD.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);	
			me.StateMachine.intStateNext := cSTA_Error;	
		END_IF
		udinTimeToggle_ms:= udinTimeToggle_ms + me.FUBInfo.udiSample_ms;
	END_IF
// Communication to line control disabled
ELSE
	SIf_Cur^.bolKeepAliveHost:= NOT SIf_Cur^.bolKeepAlivePlc;
END_IF

//-------------------------------------------------------------------------------
// Calculate the sum of all items in the system and the capacity of the system
//-------------------------------------------------------------------------------
IF (usiNumOfIBufferChild&gt;0) THEN 
	SIf_Cur^.dinNumOfItems:= 0;
	SIf_Cur^.dinMaxCapacity:= 0;
	FOR ii:= 0 TO (usiNumOfIBufferChild-1) DO
		SIf_Cur^.dinNumOfItems:= SIf_Cur^.dinNumOfItems + a_IBufferChildCtrl[ii].NumOfItems;
		SIf_Cur^.dinMaxCapacity:= SIf_Cur^.dinMaxCapacity + a_IBufferChildCtrl[ii].MaxCapacity;
	END_FOR
END_IF

//-------------------------------------------------------------------------------
// Write BufferFull for LineControl into SIF
//-------------------------------------------------------------------------------
IF (usiNumOfIBufferFullChild&gt;0) THEN 
	FOR ii:= 0 TO (usiNumOfIBufferFullChild-1) DO
		SIf_Cur^.a_bBufferIsFull[ii]:= a_IBufferFullChildCtrl[ii].BufferFull;
	END_FOR
END_IF


// ----------------------------------------------------------------------------------
// Conditions Always

// EOFF exist in FB_CtrlModule. Not overrule.
(*
// overrule error always from base -&gt; no EOFF State!! in EOFF go to OFF
IF (me.StateMachine.intStateNext = cSTA_EOFFBusy) THEN
	IF (me.StateMachine.intState=cSTA_OFF) THEN
		me.StateMachine.intStateNext := cSTA_OFF;
	ELSE // stay in OFF
		me.StateMachine.intStateNext := cSTA_OFFBusy;
	END_IF
*)
IF (me.Alarm.eActivAlmClass=E_AlmClass.STOP) AND (me.StateMachine.intStateNext&lt;&gt;cSTA_Error)
		AND ((me.StateMachine.intState = cSTA_RUN) OR (me.StateMachine.intState = cSTA_RUNBusy))THEN
	// alarm evt STOP
	me.StateMachine.intStateNext := cSTA_STOPBusy;	
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUN" ObjectId="2b57d42b-4072-44ef-bdb5-a7ee1dbac08c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUN" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		;
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF

		// State Change Condition
		IF NOT (SIf_In^.bolReady.intern OR SIf_Cfg^.bolIgnoreReadyInput) THEN
			//SIf_MOD.Alm[E_ALM_MOD.NextModuleNotReadyStop].strText := 'Next Module is not Ready';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_MOD.NextModuleNotReadyStop,0,ADR(SIf_MOD.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := cSTA_STOPBusy;
			CIf.Job.intACmd := cCMD_DONE;
		ELSIF (me.intCmd=cCMD_STANDBY) THEN
			me.StateMachine.intStateNext := cSTA_STANDBYBusy;
		ELSIF (me.intCmd=cCMD_STOP) THEN
			me.StateMachine.intStateNext := cSTA_STOPBusy;
		END_IF

	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STANDBYBusy" ObjectId="36793c08-dd27-4319-9d02-fddd0d7ca717">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="ii">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolFurtherGrpExist">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STANDBYBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;	
		// Init sub state machine
		me.SubStateMachine.intState := cSTA_SUB_INITIALIZED; 
		me.SubStateMachine.intStateNext := cSTA_SUB_INITIALIZED;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// Stop Cycle with substates	
		//--------------------------------------------------------------------------------------
		// sub state machine for sequence
		CASE me.SubStateMachine.intState OF
			//--------------------------------------------------------------------------------------
			cSTA_SUB_INITIALIZED:
			
				// Loop over all registered childs
				FOR ii:=0 TO usiNumOfSeq-1 BY 1 DO
					// Clear checked flag		
					aListOfSeq[ii].bolChecked:= FALSE;
				END_FOR
				uinGroupIndex:= 1;
				me.SubStateMachine.intStateNext := cSTA_SUB_SEND_GROUP_CMD;
				
			cSTA_SUB_SEND_GROUP_CMD:
				
				intCheckCounter:= 0;
				// Loop over all registered childs
				FOR ii:=0 TO usiNumOfSeq-1 BY 1 DO
					// If child is associated for the current group index		
					IF (aListOfSeq[ii].uinGroupStop = uinGroupIndex) THEN
						// Send defined command
						aListOfSeq[ii].pCIF^.Job.intACmd:= aListOfSeq[ii].intCmdSeqStandby;
						intCheckCounter:= intCheckCounter + 1;
					END_IF			
				END_FOR
				// Change state
				me.SubStateMachine.intStateNext := cSTA_SUB_CHECK_GROUP_STATUS;
			
			
			cSTA_SUB_CHECK_GROUP_STATUS:
	
				// Loop over all registered childs
				FOR ii:=0 TO usiNumOfSeq-1 BY 1 DO
					// If child is associated for the current group index		
					IF (aListOfSeq[ii].uinGroupStop = uinGroupIndex) THEN
						// Check defined status and if child not already checked
						IF (((aListOfSeq[ii].pCIF^.Job.intState = aListOfSeq[ii].intStatusSeqStandby) OR (aListOfSeq[ii].pCIF^.Job.intState = aListOfSeq[ii].intStatusSeqStandby2)) AND aListOfSeq[ii].bolChecked = FALSE) THEN
							aListOfSeq[ii].bolChecked:= TRUE;
							intCheckCounter:= intCheckCounter - 1;
						END_IF				
					END_IF			
				END_FOR
				
				// All childs in group has the right state
				IF (intCheckCounter &lt;= 0) THEN		
					bolFurtherGrpExist:= FALSE;
					// Check if a further group exist!	
					FOR ii:=0 TO usiNumOfSeq-1 BY 1 DO	
						IF (aListOfSeq[ii].uinGroupStop &gt; uinGroupIndex) THEN
							bolFurtherGrpExist:= TRUE;
							EXIT;
						END_IF			
					END_FOR
					// further group exist
					IF (bolFurtherGrpExist = TRUE) THEN
						IF (uinGroupIndex &lt; uinMaxNrOfGroups) THEN			
							me.SubStateMachine.intStateNext := cSTA_SUB_WAIT;	
						END_IF
					ELSE
						me.SubStateMachine.intStateNext := cSTA_SUB_FINISHED;		
					END_IF
				END_IF

			cSTA_SUB_WAIT:
				
				IF (me.SubStateMachine.udiTimeInState_ms &gt;= SIf_Par^.aListOfStopGrpWaitTime_ms[uinGroupIndex-1]) THEN
					// Inc. group index 
					uinGroupIndex:= uinGroupIndex + 1;	
					// Change state, send command for next group
					me.SubStateMachine.intStateNext := cSTA_SUB_SEND_GROUP_CMD;
				END_IF
			
			cSTA_SUB_FINISHED:
					;		
		END_CASE
		
		// Check time out error
		IF (SIf_MOD.Par^.udiTimeoutStopping_ms &lt;&gt; 0) AND (me.SubStateMachine.udiTimeInState_ms &gt; (SIf_Par^.aListOfStopGrpWaitTime_ms[uinGroupIndex-1] + SIf_MOD.Par^.udiTimeoutStopping_ms)) THEN
			//SIf_MOD.Alm[E_ALM_MOD.TimeoutStopGroup].strText := 'Timeout stop group';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_MOD.TimeoutStopGroup,uinGroupIndex,ADR(SIf_MOD.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := cSTA_ERROR;
		END_IF
	
		// State Change Condition
		IF (me.SubStateMachine.intState = cSTA_SUB_FINISHED) THEN
			me.StateMachine.intStateNext := cSTA_STANDBY;
		ELSIF (me.intCmd=cCMD_RUN) THEN
			// State Change Condition
			IF (me.Alarm.eActivAlmClass&lt;E_AlmClass.TSTOP) THEN	
				me.StateMachine.intStateNext := cSTA_RUNBusy;	
			ELSE
				// Clear pending command to prevent automatic recovery!
				CIf.Job.intACmd:=cSTA_DONE;
			END_IF
		END_IF

	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFF" ObjectId="3750f796-76b8-4174-8fb8-c3e13e87b7c5">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
				
		// State Change Condition
		IF (me.Alarm.eActivAlmClass &lt; E_AlmClass.TSTOP) THEN
			IF (me.intCmd=cCMD_RUN) OR (me.intCmd=cCMD_STANDBY) THEN
				IF (SIf_In^.bolReady.intern OR SIf_Cfg^.bolIgnoreReadyInput) THEN
					IF (me.intCmd=cCMD_RUN) THEN
						me.StateMachine.intStateNext := cSTA_RUNBusy;
					ELSIF (me.intCmd=cCMD_STANDBY) THEN
						me.StateMachine.intStateNext := cSTA_STANDBYBusy;
					END_IF
				ELSE
					//SIf_MOD.Alm[E_ALM_MOD.NextModuleNotReadyWarning].strText := 'Next Module is not Ready';
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_MOD.NextModuleNotReadyWarning,0,ADR(SIf_MOD.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					CIf.Job.intACmd := cCMD_DONE;
				END_IF
			END_IF
		ELSE
			// Clear pending command to prevent automatic recovery!
			CIf.Job.intACmd:=cSTA_DONE;
		END_IF
		
	END_IF

	
//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_EOFFBusy" ObjectId="43926500-8b3f-40d9-9943-c6ef440eaefb">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_EOFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF

	
//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// In case of an emergency, set all childs to off 
		// Set in cyclic action because of possible errors or manual/auto changes!
		SUPER^.SetAllChildCmd(BASE_PLC.cCMD_OFF);

		// check if all childs have reached the state
		IF CheckAllChildState(cSTA_OFF) THEN
			me.StateMachine.intStateNext := cSTA_EOFF;
		END_IF
	END_IF

	
//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STOP" ObjectId="44340596-81ec-4934-a2c3-05ad5626426e">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STOP" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// State Change Condition
		IF (me.Alarm.eActivAlmClass&lt;E_AlmClass.TSTOP) THEN
			IF (me.intCmd=cCMD_RUN) THEN
				IF (SIf_In^.bolReady.intern OR SIf_Cfg^.bolIgnoreReadyInput) THEN 
					me.StateMachine.intStateNext := cSTA_RUNBusy;
				ELSE
					//SIf_MOD.Alm[E_ALM_MOD.NextModuleNotReadyWarning].strText := 'Next Module is not Ready';
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_MOD.NextModuleNotReadyWarning,0,ADR(SIf_MOD.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					CIf.Job.intACmd := cCMD_DONE;
				END_IF
			ELSIF (me.intCmd=cCMD_STANDBY) THEN
				IF (SIf_In^.bolReady.intern OR SIf_Cfg^.bolIgnoreReadyInput) THEN 
					me.StateMachine.intStateNext := cSTA_STANDBYBusy;
				ELSE
					//SIf_MOD.Alm[E_ALM_MOD.NextModuleNotReadyWarning].strText := 'Next Module is not Ready';
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_MOD.NextModuleNotReadyWarning,0,ADR(SIf_MOD.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					CIf.Job.intACmd := cCMD_DONE;
				END_IF
			END_IF
		END_IF
		
	END_IF

	
//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_RUNBusy" ObjectId="459b0430-9f25-4ebc-ba23-68dcaa75419d">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="ii">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolFurtherGrpExist">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_RUNBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		// Init sub state machine
		me.SubStateMachine.intState := cSTA_SUB_INITIALIZED; 
		me.SubStateMachine.intStateNext := cSTA_SUB_INITIALIZED;
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
	
		// Start Cycle with substates	
		//--------------------------------------------------------------------------------------
		// sub state machine for sequence
		CASE me.SubStateMachine.intState OF
			//--------------------------------------------------------------------------------------
			cSTA_SUB_INITIALIZED:
			
				// Loop over all registered childs
				FOR ii:=0 TO usiNumOfSeq-1 BY 1 DO
					// Clear checked flag		
					aListOfSeq[ii].bolChecked:= FALSE;
				END_FOR
				uinGroupIndex:= 1;
				me.SubStateMachine.intStateNext := cSTA_SUB_SEND_GROUP_CMD;
				
			cSTA_SUB_SEND_GROUP_CMD:
				
				intCheckCounter:= 0;
				// Loop over all registered childs
				FOR ii:=0 TO usiNumOfSeq-1 BY 1 DO
					// If child is associated for the current group index		
					IF (aListOfSeq[ii].uinGroupRun = uinGroupIndex) THEN
						// Send defined command
						aListOfSeq[ii].pCIF^.Job.intACmd:= aListOfSeq[ii].intCmdSeqRun;
						intCheckCounter:= intCheckCounter + 1;
					END_IF			
				END_FOR
				// Change state
				me.SubStateMachine.intStateNext := cSTA_SUB_CHECK_GROUP_STATUS;
			
			
			cSTA_SUB_CHECK_GROUP_STATUS:
	
				// Loop over all registered childs
				FOR ii:=0 TO usiNumOfSeq-1 BY 1 DO
					// If child is associated for the current group index		
					IF (aListOfSeq[ii].uinGroupRun = uinGroupIndex) THEN
						// Check defined status and if child not already checked
						IF (((aListOfSeq[ii].pCIF^.Job.intState = aListOfSeq[ii].intStatusSeqRun) OR 
						(aListOfSeq[ii].pCIF^.Job.intState = aListOfSeq[ii].intStatusSeqRun2)) AND (aListOfSeq[ii].bolChecked = FALSE)) THEN
							aListOfSeq[ii].bolChecked:= TRUE;
							intCheckCounter:= intCheckCounter - 1;
						END_IF				
					END_IF			
				END_FOR
				
				// All childs in group has the right state
				IF (intCheckCounter &lt;= 0) THEN		
					bolFurtherGrpExist:= FALSE;
					// Check if a further group exist!	
					FOR ii:=0 TO usiNumOfSeq-1 BY 1 DO	
						IF (aListOfSeq[ii].uinGroupRun &gt; uinGroupIndex) THEN
							bolFurtherGrpExist:= TRUE;
							EXIT;
						END_IF			
					END_FOR
					// further group exist
					IF (bolFurtherGrpExist = TRUE) THEN
						IF (uinGroupIndex &lt; uinMaxNrOfGroups) THEN			
							me.SubStateMachine.intStateNext := cSTA_SUB_WAIT;	
						END_IF
					ELSE
						me.SubStateMachine.intStateNext := cSTA_SUB_FINISHED;		
					END_IF
				END_IF

			cSTA_SUB_WAIT:
				
				IF (me.SubStateMachine.udiTimeInState_ms &gt;= SIf_Par^.aListOfRunGrpWaitTime_ms[uinGroupIndex-1]) THEN
					// Inc. group index 
					uinGroupIndex:= uinGroupIndex + 1;	
					// Change state, send command for next group
					me.SubStateMachine.intStateNext := cSTA_SUB_SEND_GROUP_CMD;
				END_IF
			
			cSTA_SUB_FINISHED:
					;		
		END_CASE
		
		// Check time out error
		IF (SIf_MOD.Par^.udiTimeoutStarting_ms &lt;&gt; 0) AND (me.SubStateMachine.udiTimeInState_ms &gt; (SIf_Par^.aListOfRunGrpWaitTime_ms[uinGroupIndex-1] + SIf_MOD.Par^.udiTimeoutStarting_ms)) THEN
			//SIf_MOD.Alm[E_ALM_MOD.TimeoutStarGroup].strText := 'Timeout start group';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_MOD.TimeoutStartGroup,uinGroupIndex,ADR(SIf_MOD.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := cSTA_ERROR;
		END_IF
		
		// State Change Condition
		IF (me.intCmd=cCMD_STOP) THEN
			me.StateMachine.intStateNext :=  cSTA_STOPBusy;
		ELSIF NOT (SIf_In^.bolReady.intern OR SIf_Cfg^.bolIgnoreReadyInput) THEN
			//SIf_MOD.Alm[E_ALM_MOD.NextModuleNotReadyStop].strText := 'Next Module is not Ready';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_MOD.NextModuleNotReadyStop,0,ADR(SIf_MOD.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := cSTA_STOPBusy;
			CIf.Job.intACmd := cCMD_DONE;
		ELSIF (me.SubStateMachine.intState = cSTA_SUB_FINISHED) THEN
			me.StateMachine.intStateNext := cSTA_RUN;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CheckAllChildStateOr" ObjectId="4a6c1c11-1b34-4eb9-a328-d882760ab423">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="In_intCheckState1">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="In_intCheckState2">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="uinIdx">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CheckAllChildStateOr" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// check if all child controller have reached one of the two In_intCheckState
CheckAllChildStateOr := TRUE;
IF (CIf.Info.uinChildNbr &gt; 0) THEN
	FOR uinIdx := 0 TO CIf.Info.uinChildNbr - 1 DO
		CheckAllChildStateOr := CheckAllChildStateOr AND ((CIf.Info.p_aCIf[uinIdx]^.Job.intState = In_intCheckState1) OR (CIf.Info.p_aCIf[uinIdx]^.Job.intState = In_intCheckState2));
		IF (CheckAllChildStateOr=FALSE) THEN	// at least one child has not whished state reached
			EXIT ;
		END_IF 
	END_FOR
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CtrlInit" ObjectId="7a0ac12c-cff4-4e9e-8849-3ec85fb70fac">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="ii">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CtrlInit" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.CtrlInit();

// Initialize all child controller
// Childs are listed in list of sequences
FOR ii:=0 TO usiNumOfSeq-1 BY 1 DO	
	aListOfSeq[ii].pCIF := THIS^.AddChild(aListOfSeq[ii].pChild^);
END_FOR

_fbSignalTower.Initialize();
_fbSignalTower.HornEnable := SIf_MOD.Cfg^.bolStackLightHornEnable;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_EOFF" ObjectId="7a7e2512-7c7d-4cf3-97d1-a6e983988ed7">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_EOFF" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;	
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN		
		
		// As long as the EMO is not reseted!
		IF NOT (SIf_In^.bolEmoOk.intern) THEN
			// Clear pending and new commands cyclic to prevent automatic recovery!
			CIf.Job.intACmd := BASE_PLC.cCMD_DONE;
			CIf.Job.intMCmd := BASE_PLC.cCMD_DONE;
		END_IF
	
		// State Change Condition
		IF (SIf_In^.bolEmoOk.intern) AND (me.Alarm.eActivAlmClass&lt;&gt;E_AlmClass.EOFF) AND (me.intCmd&lt;&gt;BASE_PLC.cCMD_EOFF) AND (me.intCmd&lt;&gt;BASE_PLC.cCMD_DONE) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="checkValidPointer" ObjectId="7bc44136-2728-423e-a49d-d06c4040b9ac">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="checkValidPointer" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">IF (usiNumOfSeq = usiNumOfValidPointerSeqChild) AND (SIf_Cfg&lt;&gt;0) AND (SIf_Par&lt;&gt;0) AND (SIf_Cur&lt;&gt;0) AND (SIf_In&lt;&gt;0) THEN
	checkValidPointer:= TRUE;
ELSE
	// Invalid child pointer
	checkValidPointer:= FALSE;	
	//SIf_MOD.Alm[E_ALM_MOD.InvalidPointer].strText := 'Invalid pointer';
	pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_MOD.InvalidPointer,0,ADR(SIf_MOD.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);	
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="AddIBufferFullChilds" ObjectId="7bcb42ec-0ed0-4411-889a-451df2a9d0ed">
                    <interface>
                      <inputVars>
                        <variable name="pFB_ChildTypeIBuffer">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="FB_IBuffer" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="AddIBufferFullChilds" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Method add childs with BufferFull information to the array
IF (usiNumOfIBufferFullChild &lt;= (Base_Const.cMaxNrOfChilds-1)) THEN
	// Add child controller to list
	a_IBufferFullChildCtrl[usiNumOfIBufferFullChild] := pFB_ChildTypeIBuffer^;

	// Inc. number of IBufferFull childs
	usiNumOfIBufferFullChild:= usiNumOfIBufferFullChild+1;
END_IF

</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STANDBY" ObjectId="818d995b-2816-4bc9-bf65-d6f7ffb8b920">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STANDBY" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		// State Change Condition
		IF (me.Alarm.eActivAlmClass&lt;E_AlmClass.TSTOP) THEN
			IF (me.intCmd=cCMD_RUN) THEN
				IF (SIf_In^.bolReady.intern OR SIf_Cfg^.bolIgnoreReadyInput) THEN 
					me.StateMachine.intStateNext := cSTA_RUNBusy;
				ELSE
					//SIf_MOD.Alm[E_ALM_MOD.NextModuleNotReadyWarning].strText := 'Next Module is not Ready';
					pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_MOD.NextModuleNotReadyWarning,0,ADR(SIf_MOD.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
					CIf.Job.intACmd := cCMD_DONE;
				END_IF
			END_IF
			
			IF (me.intCmd=cCMD_STOP) THEN
					me.StateMachine.intStateNext := cSTA_STOPBusy;
			END_IF
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="CycleEndDuty" ObjectId="8b2fafa0-18fb-4979-8917-575392318b6c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="CycleEndDuty" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">CycleEndDuty := SUPER^.CycleEndDuty();

_fbSignalTower.State := me.StateMachine.intState;
_fbSignalTower.AlarmClass := me.Alarm.eActivAlmClass;
_fbSignalTower();
Out_bolRed 		:= _fbSignalTower.Out_bolRed;
Out_bolYellow 	:= _fbSignalTower.Out_bolYellow;
Out_bolGreen 	:= _fbSignalTower.Out_bolGreen;
Out_bolBlue 	:= _fbSignalTower.Out_bolBlue;
Out_bolHorn 	:= _fbSignalTower.Out_bolHorn;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="IoInBridge" ObjectId="95c556ec-c88e-4a00-9f2f-5c4a543adc13">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="IoInBridge" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// digitale and analoge inputs read from hardware or forcing
SIf_In^.bolReady.map	:= THIS^.In_bolReady;
SIf_In^.bolEmoOk.map	:= THIS^.In_bolEmoOk;

IF (CIf.SwCfg.bolSimulation = FALSE) THEN
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf_In^.bolReady));
	BASE_PLC.getInBol(CIf.Job.bolIoForce,ADR(SIf_In^.bolEmoOk));
ELSE
	//simulation of global IO
	SIf_In^.bolReady.intern	:= TRUE;
	SIf_In^.bolEmoOk.intern	:= TRUE;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="AddSeqChild" ObjectId="a0025313-0b7e-4dba-80b1-83806b0c4ebe">
                    <interface>
                      <inputVars>
                        <variable name="stSequence">
                          <type>
                            <derived name="T_Sequence" />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="AddSeqChild" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Method add a sequence to list
IF (usiNumOfSeq &lt;= (Base_Const.cMaxNrOfChilds-1)) THEN
	aListOfSeq[usiNumOfSeq].pChild:= stSequence.pChild;
	aListOfSeq[usiNumOfSeq].uinGroupRun:= stSequence.uinGroupRun;
	aListOfSeq[usiNumOfSeq].uinGroupStop:= stSequence.uinGroupStop;
	aListOfSeq[usiNumOfSeq].intCmdSeqRun:= stSequence.intCmdSeqRun;
	aListOfSeq[usiNumOfSeq].intStatusSeqRun:= stSequence.intStatusSeqRun;
	aListOfSeq[usiNumOfSeq].intStatusSeqRun2:= stSequence.intStatusSeqRun2;
	aListOfSeq[usiNumOfSeq].intCmdSeqStop:= stSequence.intCmdSeqStop;
	aListOfSeq[usiNumOfSeq].intStatusSeqStop:= stSequence.intStatusSeqStop;	
	aListOfSeq[usiNumOfSeq].intStatusSeqStop2:= stSequence.intStatusSeqStop2;
	aListOfSeq[usiNumOfSeq].intCmdSeqStandby:= stSequence.intCmdSeqStandby;
	aListOfSeq[usiNumOfSeq].intStatusSeqStandby:= stSequence.intStatusSeqStandby;
	aListOfSeq[usiNumOfSeq].intStatusSeqStandby2:= stSequence.intStatusSeqStandby2;
	// Inc. number of sequence
	usiNumOfSeq:= usiNumOfSeq+1;
	// Check if the pointer is valid
	IF (stSequence.pChild&lt;&gt;0) THEN
		usiNumOfValidPointerSeqChild:= usiNumOfValidPointerSeqChild+1;
	END_IF
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_PONBusy" ObjectId="b12c82f9-e8f5-4662-8a55-255f28b471bf">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_PONBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		SetAllChildCmd(cCMD_PON); // set acmd off all childs 
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// State Change Condition
		IF (FALSE) THEN
			;
		ELSIF CheckAllChildStateOr(cSTA_PON, cSTA_RUN) THEN
			me.StateMachine.intStateNext := cSTA_PON;
		END_IF
		
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_STOPBusy" ObjectId="b4344b3d-9889-41b7-a53d-b3ca5d0bce3a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <localVars>
                        <variable name="ii">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="bolFurtherGrpExist">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_STOPBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;	
		// Init sub state machine
		me.SubStateMachine.intState := cSTA_SUB_INITIALIZED; 
		me.SubStateMachine.intStateNext := cSTA_SUB_INITIALIZED;
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN

		// Simulation
		IF (CIf.SwCfg.bolSimulation) THEN
			;
		END_IF
		
		// Stop Cycle with substates	
		//--------------------------------------------------------------------------------------
		// sub state machine for sequence
		CASE me.SubStateMachine.intState OF
			//--------------------------------------------------------------------------------------
			cSTA_SUB_INITIALIZED:
			
				// Loop over all registered childs
				FOR ii:=0 TO usiNumOfSeq-1 BY 1 DO
					// Clear checked flag		
					aListOfSeq[ii].bolChecked:= FALSE;
				END_FOR
				uinGroupIndex:= 1;
				me.SubStateMachine.intStateNext := cSTA_SUB_SEND_GROUP_CMD;
				
			cSTA_SUB_SEND_GROUP_CMD:
				
				intCheckCounter:= 0;
				// Loop over all registered childs
				FOR ii:=0 TO usiNumOfSeq-1 BY 1 DO
					// If child is associated for the current group index		
					IF (aListOfSeq[ii].uinGroupStop = uinGroupIndex) THEN
						// Send defined command
						aListOfSeq[ii].pCIF^.Job.intACmd:= aListOfSeq[ii].intCmdSeqStop;
						intCheckCounter:= intCheckCounter + 1;
					END_IF			
				END_FOR
				// Change state
				me.SubStateMachine.intStateNext := cSTA_SUB_CHECK_GROUP_STATUS;
			
			
			cSTA_SUB_CHECK_GROUP_STATUS:
	
				// Loop over all registered childs
				FOR ii:=0 TO usiNumOfSeq-1 BY 1 DO
					// If child is associated for the current group index		
					IF (aListOfSeq[ii].uinGroupStop = uinGroupIndex) THEN
						// Check defined status and if child not already checked
						IF (((aListOfSeq[ii].pCIF^.Job.intState = aListOfSeq[ii].intStatusSeqStop) OR (aListOfSeq[ii].pCIF^.Job.intState = aListOfSeq[ii].intStatusSeqStop2)) AND (aListOfSeq[ii].bolChecked = FALSE)) THEN
							aListOfSeq[ii].bolChecked:= TRUE;
							intCheckCounter:= intCheckCounter - 1;
						END_IF				
					END_IF			
				END_FOR
				
				// All childs in group has the right state
				IF (intCheckCounter &lt;= 0) THEN		
					bolFurtherGrpExist:= FALSE;
					// Check if a further group exist!	
					FOR ii:=0 TO usiNumOfSeq-1 BY 1 DO	
						IF (aListOfSeq[ii].uinGroupStop &gt; uinGroupIndex) THEN
							bolFurtherGrpExist:= TRUE;
							EXIT;
						END_IF			
					END_FOR
					// further group exist
					IF (bolFurtherGrpExist = TRUE) THEN
						IF (uinGroupIndex &lt; uinMaxNrOfGroups) THEN			
							me.SubStateMachine.intStateNext := cSTA_SUB_WAIT;	
						END_IF
					ELSE
						me.SubStateMachine.intStateNext := cSTA_SUB_FINISHED;		
					END_IF
				END_IF

			cSTA_SUB_WAIT:
				
				IF (me.SubStateMachine.udiTimeInState_ms &gt;= SIf_Par^.aListOfStopGrpWaitTime_ms[uinGroupIndex-1]) THEN
					// Inc. group index 
					uinGroupIndex:= uinGroupIndex + 1;	
					// Change state, send command for next group
					me.SubStateMachine.intStateNext := cSTA_SUB_SEND_GROUP_CMD;
				END_IF
			
			cSTA_SUB_FINISHED:
					;		
		END_CASE
		
		// Check time out error
		IF (SIf_MOD.Par^.udiTimeoutStopping_ms &lt;&gt; 0) AND (me.SubStateMachine.udiTimeInState_ms &gt; (SIf_Par^.aListOfStopGrpWaitTime_ms[uinGroupIndex-1] + SIf_MOD.Par^.udiTimeoutStopping_ms)) THEN
			//SIf_MOD.Alm[E_ALM_MOD.TimeoutStopGroup].strText := 'Timeout stop group';
			pfbAlarmCtrl^.setAlarm(CIf.Info.intCtrlId,E_ALM_MOD.TimeoutStopGroup,uinGroupIndex,ADR(SIf_MOD.Alm),E_AlmState.RST,CIf.Job.eMe_ActivAlmClass);
			me.StateMachine.intStateNext := cSTA_ERROR;
		END_IF
	
		// State Change Condition
		IF (me.SubStateMachine.intState = cSTA_SUB_FINISHED) THEN
			me.StateMachine.intStateNext := cSTA_STOP;
		ELSIF (me.intCmd=cCMD_RUN) THEN
			// State Change Condition
			IF (me.Alarm.eActivAlmClass&lt;E_AlmClass.TSTOP) THEN	
				me.StateMachine.intStateNext := cSTA_RUNBusy;	
			ELSE
				// Clear pending command to prevent automatic recovery!
				CIf.Job.intACmd:=cSTA_DONE;
			END_IF
		END_IF

	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_OFFBusy" ObjectId="b43c45d6-db5e-43b9-b8e6-886e382de8a7">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_OFFBusy" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		
		// Set commandos not only in entry action because of possible errors or manual/auto changes
		// PRE/AVME 06.01.2014
		//SetAllChildCmd(cCMD_OFF); // set acmd off all childs 
	END_IF


//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		SetAllChildCmd(cCMD_OFF); // set acmd off all childs 
		
		// State Change Condition
		IF (CheckAllChildState(cSTA_OFF)) THEN
			me.StateMachine.intStateNext := cSTA_OFF;
		ELSIF (me.intCmd=cCMD_RUN) AND (me.Alarm.eActivAlmClass &lt; E_AlmClass.TSTOP) THEN
			me.StateMachine.intStateNext := cSTA_RUNBusy;
		END_IF
	END_IF


//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="ba738ca1-fd3b-440c-bfd2-18e244ab5591">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml">if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="ii">
                          <type>
                            <UINT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// to manually change in new FUB implementation!!!
// define valid commands for this controller
FOR ii:= 0 TO (SIZEOF(CIf.Job.aCmdList)/SIZEOF(CIf.Job.aCmdList[0])-1) BY 1 DO
	IF (CIf.Job.aCmdList[ii].intCmd=cCMD_INITIALIZED) THEN
		// found first empty array element
		EXIT;
	END_IF
END_FOR

CIf.Job.aCmdList[ii].intCmd := cCMD_RUN;
CIf.Job.aCmdList[ii].strName := 'Run'; 
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := cCMD_STOP;
CIf.Job.aCmdList[ii].strName := 'Stop'; 
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;
CIf.Job.aCmdList[ii].intCmd := cCMD_STANDBY;
CIf.Job.aCmdList[ii].strName := 'Standby'; 
CIf.Job.aCmdList[ii].bolAvailable := TRUE;
ii := ii +1;

// set name of class/typ
CIf.Info.strType := 'FB_CtrlModule';
CIf.Info.strFullName := 'Base Controller Module';

// set alarm class
SIf_MOD.Alm[E_ALM_MOD.InvalidPointer].eAlmClass := E_AlmClass.STOP;
SIf_MOD.Alm[E_ALM_MOD.InvalidPointer].strText := 'Invalid pointer';
SIf_MOD.Alm[E_ALM_MOD.CommunicationError].eAlmClass := E_AlmClass.OFF;
SIf_MOD.Alm[E_ALM_MOD.CommunicationError].strText := 'Communication error to line control';
SIf_MOD.Alm[E_ALM_MOD.EmergencyOff].eAlmClass := E_AlmClass.EOFF;
SIf_MOD.Alm[E_ALM_MOD.EmergencyOff].strText := 'Emergency off active';
SIf_MOD.Alm[E_ALM_MOD.TimeoutStartGroup].eAlmClass := E_AlmClass.OFF;
SIf_MOD.Alm[E_ALM_MOD.TimeoutStartGroup].strText := 'Timeout start group';
SIf_MOD.Alm[E_ALM_MOD.TimeoutStopGroup].eAlmClass := E_AlmClass.OFF;
SIf_MOD.Alm[E_ALM_MOD.TimeoutStopGroup].strText := 'Timeout stop group';
SIf_MOD.Alm[E_ALM_MOD.NextModuleNotReadyWarning].eAlmClass := E_AlmClass.WARNING;
SIf_MOD.Alm[E_ALM_MOD.NextModuleNotReadyWarning].strText := 'Next Module is not Ready';
SIf_MOD.Alm[E_ALM_MOD.NextModuleNotReadyStop].eAlmClass := E_AlmClass.STOP;
SIf_MOD.Alm[E_ALM_MOD.NextModuleNotReadyStop].strText := 'Next Module is not Ready';

//*******************************************************************************
// initial values
//*******************************************************************************
udinTimeToggle_ms := 0;
// software configuration
CIf.SwCfg.bolExist := TRUE;
CIf.SwCfg.bolSimulation := FALSE;

me.AlarmConfig.bolChildrenAlarmPropagation := FALSE;

// No initialization for cfg and par in this base module!
// Pointer address of the property is not defined at this time</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="AddIBufferChilds" ObjectId="bc49a60a-0556-4ce3-b7de-195ad0ea1e2e">
                    <interface>
                      <inputVars>
                        <variable name="pFB_ChildTypeIBuffer">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="FB_IBuffer" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="AddIBufferChilds" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// Method add childs with type of IBuffer to the array
IF (usiNumOfIBufferChild &lt;= (Base_Const.cMaxNrOfChilds-1)) THEN
	// Add child controller to list
	a_IBufferChildCtrl[usiNumOfIBufferChild] := pFB_ChildTypeIBuffer^;
	// Inc. number of IBuffer childs
	usiNumOfIBufferChild:= usiNumOfIBufferChild+1;
END_IF

</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="StateMachine" ObjectId="c244d7e5-c41f-489f-97da-65b69148df4b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="StateMachine" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^.StateMachine();

// main statemachine of base controller
CASE me.StateMachine.intState OF
	cSTA_RUN: 
        THIS^.sta_RUN();
    cSTA_RUNBusy: 
        THIS^.sta_RUNBusy();
	cSTA_STOP: 
        THIS^.sta_STOP();
    cSTA_STOPBusy: 
        THIS^.sta_STOPBusy();
	cSTA_STANDBY:
		THIS^.sta_STANDBY();
	cSTA_STANDBYBusy:
		THIS^.sta_STANDBYBusy();
END_CASE;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="checkChildAlmClass" ObjectId="cbf90ddf-9131-406d-b67f-19452c240e46">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="checkChildAlmClass" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">//------------------------------------------------------------------------------------------------------
// check child alarm classes
// set me alarm class active if at least one child has an EOFF
IF CheckAllChildAlmClass(E_AlmClass.EOFF) THEN
	CIf.Job.eMe_ActivAlmClass := E_AlmClass.EOFF;
	me.Alarm.bolfp := TRUE;
ELSIF CheckAllChildAlmClass(E_AlmClass.OFF) THEN
	CIf.Job.eMe_ActivAlmClass := E_AlmClass.OFF;
	me.Alarm.bolfp := TRUE;
ELSIF CheckAllChildAlmClass(E_AlmClass.STOP) THEN
	CIf.Job.eMe_ActivAlmClass := E_AlmClass.STOP;
	me.Alarm.bolfp := TRUE;
ELSIF CheckAllChildAlmClass(E_AlmClass.TSTOP) THEN
	CIf.Job.eMe_ActivAlmClass := E_AlmClass.TSTOP;
	me.Alarm.bolfp := TRUE;
ELSE
	IF (me.Alarm.bolfp) THEN
		CIf.Job.eMe_ActivAlmClass := E_AlmClass.NONE; // no reset necessary
		me.Alarm.bolfp := FALSE;
	END_IF
END_IF

//------------------------------------------------------------------------------------------------------
// set alarm class parent of childs
//------------------------------------------------------------------------------------------------------
// set alarm class parent of childs in the case of a parent EOFF or me=OFF or EOFF
IF (CIf.Job.eParent_ActivAlmClass=E_AlmClass.EOFF) THEN
	SetAllChildAlmClass(CIf.Job.eParent_ActivAlmClass);
ELSIF(CIf.Job.eMe_ActivAlmClass=E_AlmClass.EOFF) OR (CIf.Job.eMe_ActivAlmClass=E_AlmClass.OFF) THEN
	SetAllChildAlmClass(CIf.Job.eMe_ActivAlmClass);
ELSE
	// no important alarm for child active
	SetAllChildAlmClass(E_AlmClass.NONE);
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FurtherReactions" ObjectId="e50c2c57-3ef3-4abd-b707-730734684d2c">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FurtherReactions" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">IF		(me.Alarm.eActivAlmClass=E_AlmClass.STOP)
	AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR)		AND	(me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit)
	AND	(me.StateMachine.intState&lt;&gt;cSTA_EOFF)		AND	(me.StateMachine.intState&lt;&gt;cSTA_EOFFBusy)
	AND	(me.StateMachine.intState&lt;&gt;cSTA_OFF)		AND	(me.StateMachine.intState&lt;&gt;cSTA_OFFBusy)
	AND (me.StateMachine.intState&lt;&gt;cSTA_STOP)		AND (me.StateMachine.intState&lt;&gt;cSTA_STOPBusy)
	AND	(me.StateMachine.intState&gt;cSTA_PON) THEN
	
	me.StateMachine.intStateNext := cSTA_STOPBusy;
	CIf.Job.intACmd := cCMD_DONE;
	CIf.Job.intMCmd := cCMD_DONE;
	
ELSIF	(me.Alarm.eActivAlmClass=E_AlmClass.TSTOP)
	AND (me.StateMachine.intState&lt;&gt;cSTA_ERROR)		AND	(me.StateMachine.intState&lt;&gt;cSTA_ERRORQuit)
	AND	(me.StateMachine.intState&lt;&gt;cSTA_EOFF)		AND	(me.StateMachine.intState&lt;&gt;cSTA_EOFFBusy)
	AND	(me.StateMachine.intState&lt;&gt;cSTA_OFF)		AND	(me.StateMachine.intState&lt;&gt;cSTA_OFFBusy)
	AND (me.StateMachine.intState&lt;&gt;cSTA_STOP)		AND (me.StateMachine.intState&lt;&gt;cSTA_STOPBusy)
	AND	(me.StateMachine.intState&gt;cSTA_PON) THEN
	
	me.StateMachine.intStateNext := cSTA_STOPBusy;
	CIf.Job.intACmd := cCMD_DONE;
	CIf.Job.intMCmd := cCMD_DONE;
	
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="sta_ERROR" ObjectId="ebaa0d20-3483-464b-84fb-8ac6d1d7c3da">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Protected="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="sta_ERROR" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">// state implemetation
//--------------------------------------------------------------------------------------
// Entry action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateLastCycle) THEN
		me.StateMachine.intStateHistory := me.StateMachine.intStateLastCycle; // -&gt; possibillity to go back to state before error
		me.StateMachine.intStateLastCycle := me.StateMachine.intState;
		// Clear pending command to prevent automatic recovery!
		CIf.Job.intACmd:=cSTA_DONE;
		// In case on an error, set all childs to off
		SetAllChildCmd(cCMD_OFF);
	END_IF

//--------------------------------------------------------------------------------------
// Cyclic action
	IF (me.StateMachine.intState=me.StateMachine.intStateLastCycle) THEN
		
		;
		// State Change Condition
		IF ((CIf.Job.bolAlmReset = TRUE) AND (CheckAllChildState(cSTA_OFF))) THEN
			me.StateMachine.intStateNext := cSTA_ERRORQuit;
		END_IF
	END_IF

//--------------------------------------------------------------------------------------
// Exit action
	IF (me.StateMachine.intState&lt;&gt;me.StateMachine.intStateNext) THEN
		;
	END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="SIf_Out" ObjectId="66efe5fb-6c08-4450-a924-f790660b37a8">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_MOD_Out" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf_MOD.Out := SIf_Out;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf_Out:= SIf_MOD.Out; </xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="SIf_Cur" ObjectId="7c2240cf-17ab-4950-a777-bd60151c9f81">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_MOD_Cur" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf_MOD.Cur := SIf_Cur; </xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf_Cur:= SIf_MOD.Cur; </xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="SIf_Par" ObjectId="b5260abe-a3fb-44c5-b308-7b394f794cb8">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_MOD_Par" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf_MOD.Par := SIf_Par; </xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf_Par:= SIf_MOD.Par; </xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="SIf_In" ObjectId="d26d3890-71df-445f-a1ed-19dc5bb456a2">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_MOD_In" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf_In:= SIf_MOD.In; </xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf_MOD.In := SIf_In;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="SIf_Cfg" ObjectId="fb07488b-af83-408e-8562-7c3d8ca56d51">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <derived name="T_Ctrl_SIf_MOD_Cfg" />
                          </baseType>
                        </pointer>
                      </returnType>
                    </interface>
                    <SetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf_MOD.Cfg := SIf_Cfg;</xhtml>
                        </ST>
                      </body>
                      <addData />
                    </SetAccessor>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml">SIf_Cfg:= SIf_MOD.Cfg; </xhtml>
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>93bcbc09-e224-4f3b-9fe5-ea80da832953</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_IBuffer" pouType="functionBlock">
              <interface>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_CtrlBase</Extends>
                      <Implements>IBuffer</Implements>
                    </Inheritance>
                  </data>
                </addData>
                <documentation>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">FUNCTION_BLOCK PUBLIC FB_IBuffer IMPLEMENTS IBuffer</xhtml>
                </documentation>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">// This is a Dummy-FB, used for the interface (IBuffer) to the buffer-modules</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="NumOfItems" ObjectId="170dcb0c-806c-4828-ae7a-dece73dc219a">
                    <interface>
                      <returnType>
                        <DINT />
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="MaxCapacity" ObjectId="6f5294a5-4d7a-45f2-ba05-7365505de59d">
                    <interface>
                      <returnType>
                        <DINT />
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="BufferFull" ObjectId="c94962f6-ad99-4e03-9cec-f625d834a541">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9ec31dad-c8d1-4e2e-aa3f-873965b25876</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_GHT" pouType="functionBlock">
              <interface>
                <localVars constant="true">
                  <variable name="MAX_HASH_LISTS">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="3" />
                    </initialValue>
                  </variable>
                  <variable name="MAX_HASHLIST_ENTRIES">
                    <type>
                      <INT />
                    </type>
                    <initialValue>
                      <simpleValue value="50" />
                    </initialValue>
                  </variable>
                  <variable name="CUTOFF_A">
                    <type>
                      <ULINT />
                    </type>
                    <initialValue>
                      <simpleValue value="4000000000" />
                    </initialValue>
                  </variable>
                  <variable name="CUTOFF_B">
                    <type>
                      <ULINT />
                    </type>
                    <initialValue>
                      <simpleValue value="8000000000" />
                    </initialValue>
                  </variable>
                </localVars>
                <localVars>
                  <variable name="m_bolDeleteItems">
                    <type>
                      <BOOL />
                    </type>
                  </variable>
                  <variable name="m_uintCount">
                    <type>
                      <UINT />
                    </type>
                  </variable>
                  <variable name="m_fbHashTable">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_HASH_LISTS - 1)" />
                        <baseType>
                          <derived name="FB_HashTableCtrl" />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="m_hHashTable">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_HASH_LISTS - 1)" />
                        <baseType>
                          <derived name="T_HHASHTABLE" />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="m_uliCutoff">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_HASH_LISTS - 1)" />
                        <baseType>
                          <ULINT />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                  <variable name="m_aHashTableBuffer">
                    <type>
                      <array>
                        <dimension lower="0" upper="(MAX_HASH_LISTS - 1)" />
                        <baseType>
                          <derived name="T_GHTHashTableBuffer" />
                        </baseType>
                      </array>
                    </type>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Implements>IGHT</Implements>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Initialize" ObjectId="4b1894b7-51db-4af9-9428-c049dca1b02b">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Initialize" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">F_CreateHashTableHnd( ADR( m_aHashTableBuffer[0].aBuffer ), SIZEOF( m_aHashTableBuffer[0].aBuffer ), m_hHashTable[0] );
F_CreateHashTableHnd( ADR( m_aHashTableBuffer[1].aBuffer ), SIZEOF( m_aHashTableBuffer[1].aBuffer ), m_hHashTable[1] );
F_CreateHashTableHnd( ADR( m_aHashTableBuffer[2].aBuffer ), SIZEOF( m_aHashTableBuffer[2].aBuffer ), m_hHashTable[2] );</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="GetTableIdx" ObjectId="35e2226d-63a4-41f4-bdda-6c7a770fa619">
                    <interface>
                      <returnType>
                        <INT />
                      </returnType>
                      <inputVars>
                        <variable name="uliBarcode">
                          <type>
                            <ULINT />
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/accessmodifiers" handleUnknown="implementation">
                          <AccessModifiers Private="true" />
                        </data>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="GetTableIdx" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">IF uliBarcode &lt; CUTOFF_A THEN
	GetTableIdx := 0;
	RETURN;
END_IF

IF uliBarcode &gt; CUTOFF_B THEN
	GetTableIdx := 2;
	RETURN;
END_IF

GetTableIdx := 1;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Lookup" ObjectId="d7ba55b0-a45a-4350-a587-e943b627eca1">
                    <interface>
                      <returnType>
                        <pointer>
                          <baseType>
                            <BYTE />
                          </baseType>
                        </pointer>
                      </returnType>
                      <inputVars>
                        <variable name="uliKey">
                          <type>
                            <ULINT />
                          </type>
                        </variable>
                        <variable name="bolRemove">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="pfbHashTable">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="FB_HashTableCtrl" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                        <variable name="phHashTable">
                          <type>
                            <pointer>
                              <baseType>
                                <derived name="T_HHASHTABLE" />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                        <variable name="uliCutoff">
                          <type>
                            <ULINT />
                          </type>
                        </variable>
                        <variable name="iIdx">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Lookup" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">iIdx := GetTableIdx(uliKey);

m_fbHashTable[iIdx].A_Lookup( key := ULINT_TO_UDINT(uliKey-m_uliCutoff[iIdx]), hTable := m_hHashTable[iIdx] );

IF m_fbHashTable[iIdx].bOk THEN
	Lookup := m_fbHashTable[iIdx].getValue;
	
	IF bolRemove THEN
		m_fbHashTable[iIdx].A_Remove( key := ULINT_TO_UDINT(uliKey-m_uliCutoff[iIdx]), hTable := m_hHashTable[iIdx]);

		IF m_fbHashTable[iIdx].bOk THEN
			m_uintCount := m_uintCount - 1;
		END_IF
	END_IF
ELSE
	Lookup := NULL;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="Clear" ObjectId="6d497f0c-c0a5-4755-af21-046ab24e6947">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bolFreePointer">
                          <type>
                            <BOOL />
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <INT />
                          </type>
                        </variable>
                        <variable name="pData">
                          <type>
                            <pointer>
                              <baseType>
                                <BYTE />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="Clear" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">FOR iIdx := 0 TO MAX_HASH_LISTS - 1 DO
	IF bolFreePointer THEN
		m_fbHashTable[iIdx].A_GetFirst(hTable := m_hHashTable[iIdx]);

		WHILE m_fbHashTable[iIdx].bOk DO
			pData := m_fbHashTable[iIdx].getValue;
			__DELETE(pData);
			m_fbHashTable[iIdx].A_GetNext(hTable := m_hHashTable[iIdx]);
		END_WHILE
		
	END_IF
	
	m_fbHashTable[iIdx].A_RemoveAll(hTable := m_hHashTable[iIdx]);
END_FOR

m_uintCount := 0;
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="FB_init" ObjectId="923bea28-0a13-4fb3-b4f4-dfd81e316bd8">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="bInitRetains">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the retain variables are initialized (warm start / cold start)</xhtml>
                          </documentation>
                        </variable>
                        <variable name="bInCopyCode">
                          <type>
                            <BOOL />
                          </type>
                          <documentation>
                            <xhtml xmlns="http://www.w3.org/1999/xhtml"> if TRUE, the instance afterwards gets moved into the copy code (online change)</xhtml>
                          </documentation>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="FB_init" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">m_uliCutoff[0] := 0;
m_uliCutoff[1] := CUTOFF_A;
m_uliCutoff[2] := CUTOFF_B;

m_uintCount := 0;</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="AddItem" ObjectId="62193f64-38a9-46f6-abf3-482dea497c67">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="uliKey">
                          <type>
                            <ULINT />
                          </type>
                        </variable>
                        <variable name="pData">
                          <type>
                            <pointer>
                              <baseType>
                                <BYTE />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </inputVars>
                      <localVars>
                        <variable name="iIdx">
                          <type>
                            <INT />
                          </type>
                        </variable>
                      </localVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="AddItem" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">iIdx := GetTableIdx(uliKey);

m_fbHashTable[iIdx].A_Add( key := ULINT_TO_UDINT(uliKey-m_uliCutoff[iIdx]), putValue := pData, hTable := m_hHashTable[iIdx] );

IF m_fbHashTable[iIdx].bOk THEN
	m_uintCount := m_uintCount + 1;
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/property" handleUnknown="implementation">
                  <Property name="Count" ObjectId="9e1374c2-3267-44b4-aaf7-af345f2d53dc">
                    <interface>
                      <returnType>
                        <UINT />
                      </returnType>
                    </interface>
                    <GetAccessor>
                      <interface />
                      <body>
                        <ST>
                          <xhtml xmlns="http://www.w3.org/1999/xhtml" />
                        </ST>
                      </body>
                      <addData />
                    </GetAccessor>
                    <addData />
                  </Property>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>3267d0b8-ad11-49d1-b3fc-75b2ba380662</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_IdBaseRecvDch" pouType="functionBlock">
              <interface>
                <localVars>
                  <variable name="m_pInputData">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_IdBase_DCH" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Saber Inteface Variables
 -----------------------------------------------------------------</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_DataChannelRecvBase</Extends>
                      <Implements>I_DataChannelRecv</Implements>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="GetData" ObjectId="fde4a3d6-d56a-4699-9ab5-83ee683f7bc6">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="udiDataSize">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                        <variable name="pData">
                          <type>
                            <pointer>
                              <baseType>
                                <BYTE />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="GetData" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">GetData := FALSE;

IF m_eState = E_SaberPlcDHCState.DataReady THEN
	IF (udiDataSize &gt; 0 ) AND (pData &lt;&gt; TC3_MEMMAN.NULL) THEN
		TC2_SYSTEM.MEMCPY(destAddr := pData, srcAddr := m_pInputData, n := udiDataSize);
		m_eState := E_SaberPlcDHCState.Acknowledge;	
		GetData := TRUE;
	END_IF	
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="InitChannel" ObjectId="35fba11f-13bb-4a56-a8bf-29ffa9343d7f">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="udiDataSize">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                        <variable name="pInputData">
                          <type>
                            <pointer>
                              <baseType>
                                <BYTE />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="InitChannel" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">InitChannel := FALSE;

IF udiDataSize &gt; 0 THEN
	IF pInputData &lt;&gt; TC3_MEMMAN.NULL THEN
		m_uinDataSize := udiDataSize;
		m_pInputData := pInputData;
		m_eState := E_SaberPlcDHCState.Init;
		InitChannel := TRUE;
	END_IF
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>027a6878-45dc-4329-a3ee-28dda31b0de4</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/pou" handleUnknown="implementation">
            <pou name="FB_IdBaseSendDch" pouType="functionBlock">
              <interface>
                <localVars>
                  <variable name="m_pOutputData">
                    <type>
                      <pointer>
                        <baseType>
                          <derived name="T_IdBase_DCH" />
                        </baseType>
                      </pointer>
                    </type>
                    <documentation>
                      <xhtml xmlns="http://www.w3.org/1999/xhtml"> Saber Inteface Variables
 -----------------------------------------------------------------</xhtml>
                    </documentation>
                  </variable>
                </localVars>
                <addData>
                  <data name="http://www.3s-software.com/plcopenxml/pouinheritance" handleUnknown="implementation">
                    <Inheritance>
                      <Extends>FB_DataChannelSendBase</Extends>
                      <Implements>I_DataChannelSend</Implements>
                    </Inheritance>
                  </data>
                </addData>
              </interface>
              <body>
                <ST>
                  <xhtml xmlns="http://www.w3.org/1999/xhtml">SUPER^();</xhtml>
                </ST>
              </body>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="SendData" ObjectId="39e78c68-b8b1-41cb-bb1a-47f5b15ffe3a">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="udiDataSize">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                        <variable name="pData">
                          <type>
                            <pointer>
                              <baseType>
                                <BYTE />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="SendData" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">SendData := FALSE;

IF m_eState = E_PlcSaberDHCState.WaitForJob THEN
	IF (udiDataSize &gt; 0 ) AND (pData &lt;&gt; TC3_MEMMAN.NULL) THEN
		TC2_SYSTEM.MEMCPY(destAddr := m_pOutputData, srcAddr := pData, n := udiDataSize);
		m_eState := E_PlcSaberDHCState.SendData;	
		SendData := TRUE;
	END_IF	
END_IF</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/method" handleUnknown="implementation">
                  <Method name="InitChannel" ObjectId="cdb399ac-0df4-49f4-9ed4-51ec87bb41cc">
                    <interface>
                      <returnType>
                        <BOOL />
                      </returnType>
                      <inputVars>
                        <variable name="udiDataSize">
                          <type>
                            <UDINT />
                          </type>
                        </variable>
                        <variable name="pOutputData">
                          <type>
                            <pointer>
                              <baseType>
                                <BYTE />
                              </baseType>
                            </pointer>
                          </type>
                        </variable>
                      </inputVars>
                      <addData>
                        <data name="http://www.3s-software.com/plcopenxml/attributes" handleUnknown="implementation">
                          <Attributes>
                            <Attribute Name="object_name" Value="InitChannel" />
                          </Attributes>
                        </data>
                      </addData>
                    </interface>
                    <body>
                      <ST>
                        <xhtml xmlns="http://www.w3.org/1999/xhtml">InitChannel := FALSE;

IF udiDataSize &gt; 0 THEN
	IF pOutputData &lt;&gt; TC3_MEMMAN.NULL THEN
		m_uinDataSize := udiDataSize;
		m_pOutputData := pOutputData;
		m_eState := E_PlcSaberDHCState.Init;
		InitChannel := TRUE;
	END_IF
END_IF
</xhtml>
                      </ST>
                    </body>
                    <addData />
                  </Method>
                </data>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>6f22794b-8dcb-4cb2-be2d-7f87492cd223</ObjectId>
                </data>
              </addData>
            </pou>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/union" handleUnknown="implementation">
            <union name="U_UMC_Lenze_Control">
              <variable name="Output">
                <type>
                  <UINT />
                </type>
              </variable>
              <variable name="Data">
                <type>
                  <derived name="T_UMC_Lenze_Control" />
                </type>
              </variable>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>9768d289-6cef-41e2-82ba-11dc57e84170</ObjectId>
                </data>
              </addData>
            </union>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/union" handleUnknown="implementation">
            <union name="U_UMC_Lenze_Status">
              <variable name="Input">
                <type>
                  <UINT />
                </type>
              </variable>
              <variable name="Data">
                <type>
                  <derived name="T_UMC_Lenze_Status" />
                </type>
              </variable>
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>e42cdc26-aacb-4ee9-a8e8-4ca5ab974d66</ObjectId>
                </data>
              </addData>
            </union>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/libraries" handleUnknown="implementation">
            <Libraries>
              <Library Name="Base_PLC, 0.3.6.1 (Vistaprint)" Namespace="Base_PLC" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc2_EtherCAT, 3.3.5.0 (Beckhoff Automation GmbH)" Namespace="Tc2_EtherCAT" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc2_SerialCom, 3.3.4.0 (Beckhoff Automation GmbH)" Namespace="Tc2_SerialCom" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc2_Standard, 3.3.0.0 (Beckhoff Automation GmbH)" Namespace="Tc2_Standard" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc2_System, 3.3.9.0 (Beckhoff Automation GmbH)" Namespace="Tc2_System" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc2_TcpIp, 3.3.2.0 (Beckhoff Automation GmbH)" Namespace="Tc2_TcpIp" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc2_Utilities, 3.3.10.0 (Beckhoff Automation GmbH)" Namespace="Tc2_Utilities" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false">
                <Parameters>
                  <Parameter Name="NMAXLICENSES" Value="50" />
                </Parameters>
              </Library>
              <Library Name="Tc3_Interfaces, 3.3.0.0 (Beckhoff Automation GmbH)" Namespace="Tc3_Interfaces" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc3_MemMan, 3.3.1.0 (Beckhoff Automation GmbH)" Namespace="Tc3_MemMan" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <Library Name="Tc3_Module, 3.3.6.0 (Beckhoff Automation GmbH)" Namespace="Tc3_Module" HideWhenReferencedAsDependency="false" PublishSymbolsInContainer="false" SystemLibrary="false" LinkAllContent="false" />
              <addData>
                <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
                  <ObjectId>5700a827-0754-4a41-8cd1-aa5d95c0cdf8</ObjectId>
                </data>
              </addData>
            </Libraries>
          </data>
          <data name="http://www.3s-software.com/plcopenxml/objectid" handleUnknown="discard">
            <ObjectId>84ae8d91-d8f9-4b8b-8d1b-864ed6cb383d</ObjectId>
          </data>
        </addData>
      </resource>
    </data>
    <data name="http://www.3s-software.com/plcopenxml/projectstructure" handleUnknown="discard">
      <ProjectStructure>
        <Object Name="Base_Elements" ObjectId="84ae8d91-d8f9-4b8b-8d1b-864ed6cb383d">
          <Object Name="Library Manager" ObjectId="5700a827-0754-4a41-8cd1-aa5d95c0cdf8" />
          <Folder Name="POUs">
            <Folder Name="Controller">
              <Folder Name="Driver">
                <Folder Name="ACL (ADS client for data exchange)">
                  <Object Name="ACL_Const" ObjectId="c8d6b96f-e5c4-4b10-b8bc-2f87add6d659" />
                  <Object Name="ADS_IndexGroup" ObjectId="06e1f24a-87bb-47a4-8d8e-fc0192b1e43e" />
                  <Object Name="E_ADS_AccessType" ObjectId="29ec6f3b-7d64-4135-9c48-375d1d344678" />
                  <Object Name="FB_ACL" ObjectId="35c44579-8ee6-4bc6-a332-f87fe74b8d5d">
                    <Object Name="GetNextAccessType" ObjectId="096217a9-b3f5-4913-8799-35029a3ae704" />
                    <Object Name="sta_PONBusy" ObjectId="10205a02-c205-4a68-aa3f-517c69831d55" />
                    <Object Name="sta_RUNBusy" ObjectId="17796103-9d26-4e6c-8d4b-5a11d68fbae7" />
                    <Object Name="sta_RUN" ObjectId="1eadda75-9ac1-47cb-b64c-ca5613f16207" />
                    <Object Name="AddConnection" ObjectId="2e3aa29c-2c8b-4b4e-b83b-bda7f50bd268" />
                    <Object Name="CtrlSIf" ObjectId="309b1a1d-faae-42bc-9507-42d211c6d40e" />
                    <Object Name="StateMachine" ObjectId="3c973f2a-7cfa-4400-8508-f52d5e67adff" />
                    <Object Name="getCmdState" ObjectId="48c1ab59-ea2d-486d-bdfb-c97920a611f0" />
                    <Object Name="getCtrlSIf" ObjectId="5bcded1c-e34b-4dd0-82f9-810996aa589a" />
                    <Object Name="sta_OFF" ObjectId="82e22428-a03a-4e02-9fcd-a314f0399cc9" />
                    <Object Name="Always" ObjectId="83199abc-a2c6-42b3-97c5-faf95e44d62f" />
                    <Object Name="sta_PON" ObjectId="bae7231a-f1c3-4551-a7da-0fd79e4b7301" />
                    <Object Name="NetIDtoAddress" ObjectId="d12b7a94-c50c-4873-88a2-9a106eb6cd59" />
                    <Object Name="FB_init" ObjectId="da026435-4584-4f7d-b3e7-ef72bcf894b2" />
                    <Object Name="sta_ERROR" ObjectId="f00aa3c1-1388-4d00-961e-356b78c04a4b" />
                  </Object>
                  <Object Name="T_ADS_ConnectionData" ObjectId="93417077-ba05-4cd3-85d5-97ee470a754f" />
                  <Object Name="T_Ctrl_SIf_ACL" ObjectId="33cf6f00-8fa4-4a27-b1e4-f1d66d832525" />
                  <Object Name="T_Ctrl_SIf_ACL_Cur" ObjectId="fa5f4aba-0896-4336-a8f6-7ebb5891e07d" />
                  <Object Name="T_Ctrl_SIf_ACL_Par" ObjectId="1b468377-b892-489f-aca5-37fa42bf7e98" />
                </Folder>
                <Folder Name="BCD (Bar code driver)">
                  <Object Name="BCD_CmdState" ObjectId="654b17fc-95c4-4a6e-8747-ce7bbd1ea6d8" />
                  <Object Name="E_BCD_Type" ObjectId="2c07d06e-e910-44fe-a4e8-69b111a759ce" />
                  <Object Name="FB_BCD" ObjectId="9b52d7b0-8644-4655-8f02-ec7e053d1595">
                    <Object Name="sta_ConnectSocketBusy" ObjectId="1ad3cc92-44b3-41f8-8ba2-1e11181ec2a9" />
                    <Object Name="CycleStartDuty" ObjectId="322a3606-8adb-415b-a8c0-2d06fa66396c" />
                    <Object Name="PrepareReadMsg" ObjectId="3d4dade1-2577-4970-9e9b-2f8226f80caf" />
                    <Object Name="sta_SocketClosed" ObjectId="434f1ca1-1c54-45bf-96b7-273daaa6f39e" />
                    <Object Name="sta_CloseSocketBusy" ObjectId="5d499f6a-81ba-4ae4-9b9a-1876c9564350" />
                    <Object Name="CycleEndDuty" ObjectId="6991b51e-f6c1-4114-833e-5ce5a16ba432" />
                    <Object Name="HandleRxData" ObjectId="74c0ff1a-cafe-4771-9bc8-4f903dd97345" />
                    <Object Name="sta_Error" ObjectId="82b7a404-d88f-4473-ba9c-3069496ba777" />
                    <Object Name="StateMachine" ObjectId="85bf2f8e-a78a-43fa-bbb7-de6999e2d4bc" />
                    <Object Name="getSIf" ObjectId="86fc9feb-45c7-4163-830f-c53ee419e66f" />
                    <Object Name="ClearTxBuffer" ObjectId="8c46fc43-76b4-4f74-95d3-37737a30e53c" />
                    <Object Name="getCmdState" ObjectId="8fb68db1-6cc4-4222-a9c4-8c5478851770" />
                    <Object Name="HandleTxData" ObjectId="98cf61cd-8d55-4d42-a889-0dcddf7e415e" />
                    <Object Name="sta_ComTestBusy" ObjectId="99a1b8ab-8b22-441c-8645-6eb1864c1e85" />
                    <Object Name="FB_init" ObjectId="b6d626b0-4836-4bae-8d83-6e5cf1aff188" />
                    <Object Name="PrepareBarCodeData" ObjectId="d5e1ae75-4f39-477a-a1bb-21f1080191ae" />
                    <Object Name="CheckSensorError" ObjectId="e2fa62b7-d503-4d82-902e-027602ebecdc" />
                    <Object Name="sta_ReadCodeBusy" ObjectId="e54c24e3-afec-45d9-9a45-a1bd55bc6eb2" />
                    <Object Name="PrepareSendMsg" ObjectId="e67cfade-0958-4a28-abdc-00b43b64367e" />
                    <Object Name="sta_WaitForJob" ObjectId="e79427c7-26eb-403f-9f44-c99aabec868f" />
                    <Object Name="CtrlInit" ObjectId="fab64fc1-06ea-49cf-b0b0-ae06254ffffc" />
                  </Object>
                  <Object Name="FC_StrComp" ObjectId="e9ea96d9-99cd-4eb0-8d4f-4332fb1d73d3" />
                  <Object Name="T_BCD" ObjectId="653462ab-8000-47c2-b28c-62082b11c24f" />
                  <Object Name="T_BCD_Cfg" ObjectId="5671334e-1135-48ec-bd02-a55db5293a77" />
                  <Object Name="T_BCD_Data" ObjectId="f363979a-64df-4246-8b26-2ce9dead1690" />
                  <Object Name="T_BCD_DeviceInfo" ObjectId="8edb2553-df50-405c-8a8e-ef2f7bc2c866" />
                  <Object Name="T_BCD_Error" ObjectId="a58447e5-b8e7-48fb-b4f5-eb7d091ad122" />
                  <Object Name="T_BCD_OperatingData" ObjectId="ba30ce24-d1ca-4601-863a-5f0ee5c9dd0a" />
                  <Object Name="T_BCD_Par" ObjectId="0e73db4f-0e7a-4012-9bb4-a6baac9a06b6" />
                  <Object Name="T_BCD_ServiceInfo" ObjectId="932bdba5-41cd-40cd-99de-cc9439f52f80" />
                  <Object Name="T_BCD_StateMachine" ObjectId="fb09af41-742f-464f-a012-e48229615a1b" />
                  <Object Name="T_BCD_Status" ObjectId="b917762c-531c-47d1-904c-a37d4358f834" />
                  <Object Name="T_BCD_TxStructure" ObjectId="76d94535-b978-4030-b768-06522da3d248" />
                </Folder>
                <Folder Name="PRS [Present Sensor]">
                  <Object Name="E_ALM_PRS" ObjectId="aff47857-208f-4a05-ade5-9bdd57b44296" />
                  <Object Name="FB_PRS" ObjectId="aeafdf67-0807-49ec-867e-efc4e7f4565f">
                    <Object Name="sta_ABSENT" ObjectId="017309f2-ae52-4b50-9af0-9e8dd18cf9c2" />
                    <Object Name="Always" ObjectId="17810348-9e67-41c6-ac6b-9041a301c450" />
                    <Object Name="sta_PRESENT" ObjectId="3c26f44e-fe8b-4506-b5c2-e2a421c8563c" />
                    <Object Name="getCtrlSIf" ObjectId="3ca6b299-6b6f-4ce8-a3cf-18fa887f9f7e" />
                    <Object Name="FB_init" ObjectId="73f31e8d-fb51-45d6-9df0-947166317f1a" />
                    <Object Name="IoInBridge" ObjectId="7ea5bf5c-0957-4a4d-8441-e4216229bc14" />
                    <Object Name="getCmdState" ObjectId="8d243f25-75ac-4b29-9f70-2be1bd8e186a" />
                    <Object Name="sta_PRESENTBusy" ObjectId="967597d0-8097-47f0-8cfd-120413b47678" />
                    <Object Name="sta_PON" ObjectId="b1832c3a-93a7-49ad-a53a-a1db5ddc9f45" />
                    <Object Name="CtrlSIf" ObjectId="bad87dab-0290-4991-8b8f-499f9f9969ab" />
                    <Object Name="StateMachine" ObjectId="d64e6797-444e-4a5f-b98c-25172482e23d" />
                    <Object Name="IoOutBridge" ObjectId="eb341fd2-5bb2-48e6-b4a1-987adb4bfd58" />
                    <Object Name="sta_ABSENTBusy" ObjectId="efb3a22a-30f0-40c7-9c56-eae1962f8220" />
                  </Object>
                  <Object Name="PRS_CmdState" ObjectId="01651ab3-2c2c-4701-adfc-9d38c8613551" />
                  <Object Name="T_Ctrl_SIf_PRS" ObjectId="e69bb677-6853-4824-9f34-f19f504014af" />
                  <Object Name="T_Ctrl_SIf_PRS_Cfg" ObjectId="ab0eff3e-f125-40a6-9b44-b53f0ee42a0f" />
                  <Object Name="T_Ctrl_SIf_PRS_Cur" ObjectId="026cd9c2-bbcb-47eb-b2ae-5e5f04eb6c27" />
                  <Object Name="T_Ctrl_SIf_PRS_Ilk" ObjectId="817b33d9-cc28-402f-8198-37ca51afbdb8" />
                  <Object Name="T_Ctrl_SIf_PRS_In" ObjectId="5626a472-a15a-4f04-a51f-80d3b3aec087" />
                  <Object Name="T_Ctrl_SIf_PRS_Out" ObjectId="d7130d1c-77ba-4534-8e71-61c9a5983132" />
                  <Object Name="T_Ctrl_SIf_PRS_Par" ObjectId="5eb894d2-18f2-47c1-94e0-f58713c4d395" />
                </Folder>
                <Folder Name="RFD (RFID Driver)">
                  <Object Name="E_Typ_Baudrate" ObjectId="4dac086b-9156-4981-ab7c-6e4177cd39a6" />
                  <Object Name="E_Typ_Ftim" ObjectId="62f386c1-e9b6-4244-a2a1-ede63fe56419" />
                  <Object Name="FB_Com_3964R" ObjectId="9bceef52-2457-40a4-b7ac-c12c1c6d63b4" />
                  <Object Name="FB_ExCom" ObjectId="0692bf64-22ff-43f8-b9f3-9b97a0565cc5" />
                  <Object Name="FB_HEXSTRING_TO_ULINT" ObjectId="a360a7e4-3c1e-46a3-b61b-31cb88488a8b" />
                  <Object Name="FB_RFD" ObjectId="b594bd4c-d2d6-4c09-8c7a-e195807dfb70">
                    <Object Name="sta_OffBusy" ObjectId="03703202-28a8-4d2a-a1b0-5332d30b71cd" />
                    <Object Name="FB_init" ObjectId="3a4f3afc-c211-4c62-93a6-011c55a0a61c" />
                    <Object Name="sta_MDSBusy" ObjectId="3ede119d-38cd-4cb9-b505-5d1e5aedf1bb" />
                    <Object Name="sta_WaitForJob" ObjectId="4d0b986f-c899-4646-821a-7771a4512614" />
                    <Object Name="CycleEndDuty" ObjectId="59e56c20-bece-436c-8448-36d6f279dc82" />
                    <Object Name="getCmdState" ObjectId="5c4f1ecf-65dd-4c86-b3ac-a58e77e6cbb7" />
                    <Object Name="sta_Off" ObjectId="5e1fa1e9-9cfb-43ec-bc63-2d4261fdd039" />
                    <Object Name="sta_SLGBusy" ObjectId="63d0ab9e-464f-46dc-af42-14ae4e8edd3d" />
                    <Object Name="CtrlInit" ObjectId="8a227cbf-355b-4819-ba87-ac46a9b85d5d" />
                    <Object Name="CycleStartDuty" ObjectId="9170cccc-2464-4937-8f3b-792a481b31e2" />
                    <Object Name="sta_PowerOnBusy" ObjectId="9b4c54c8-447c-40a1-a67d-a6f8268dd36e" />
                    <Object Name="StateMachine" ObjectId="a4b08c0d-52bf-42cf-a099-426a19fd2b72" />
                    <Object Name="getSIf" ObjectId="b01bdf44-93a1-4aba-b776-3b5e0d3596c7" />
                    <Object Name="StateMachine_Service" ObjectId="c3684090-4fb6-4ef6-a4ac-d510ac32a760" />
                    <Object Name="sta_Error" ObjectId="c9726f97-2ec3-491f-ad20-1387022bcb8d" />
                    <Object Name="sta_ReadBusy" ObjectId="d268e993-aeaf-42c1-99c6-e7738254e331" />
                    <Object Name="sta_TagInitBusy" ObjectId="d9a9e724-5447-4119-a4ae-f432c03d3ae5" />
                    <Object Name="sta_WriteBusy" ObjectId="dba4f76a-fbf7-4b6b-9d1a-59baba331ecc" />
                    <Object Name="sta_CheckBusy" ObjectId="f6386934-9b5e-4e99-874f-72a7f6c4ad05" />
                  </Object>
                  <Object Name="FB_RFR" ObjectId="69c60fe8-63b9-4ceb-aa9e-89eb04e1522c">
                    <Object Name="FB_init" ObjectId="2ff0d4f2-c15d-423e-a1f2-30c9bb0490fe" />
                    <Object Name="sta_PowerOnBusy" ObjectId="3933674c-825e-4d93-a7fe-b5f6cf3d379a" />
                    <Object Name="StateMachine_Service" ObjectId="59ddef4e-f223-4272-b889-0d868cd05e96" />
                    <Object Name="getSIf" ObjectId="8bd33bbd-8461-486f-9159-8524bd5c4cce" />
                    <Object Name="CtrlInit" ObjectId="ba5794de-74db-4872-accf-e9651e58efa7" />
                    <Object Name="sta_WaitForJob" ObjectId="c4ecd18d-f6db-4db6-81ed-37b5cb85b880" />
                    <Object Name="CycleEndDuty" ObjectId="e81a08bb-fb67-46cc-955e-627ff1b5d3d0" />
                    <Object Name="StateMachine" ObjectId="e8e88495-2ab2-40a0-bd0c-b7d59846ce77" />
                    <Object Name="CycleStartDuty" ObjectId="f06444c6-e306-4499-a578-f1aa3770d87e" />
                    <Object Name="getCmdState" ObjectId="f5b31fb8-fa67-489d-8fcd-ae719e2c3bb0" />
                    <Object Name="sta_Error" ObjectId="fbf94375-7228-417a-92ad-359afcf56818" />
                  </Object>
                  <Object Name="RFD_Cmd" ObjectId="b9d100af-ead9-4729-bfd8-63723378b736" />
                  <Object Name="RFD_Constants" ObjectId="6f1bed1e-6340-4698-9eec-8e2b1ccc5445" />
                  <Object Name="T_RFD" ObjectId="eaab37f2-ed1c-4b67-bac1-f10b4db1a221" />
                  <Object Name="T_RFD_Cfg" ObjectId="f6a5f8d6-2bd2-4c90-8a22-3378c4b5783f" />
                  <Object Name="T_RFD_Cur" ObjectId="6c168028-0cb6-43b9-8034-77f26b88aab1" />
                  <Object Name="T_RFD_Error" ObjectId="dd9f466c-845d-4e6a-aa70-0b0f9512822a" />
                  <Object Name="T_RFD_MDS_Diagnose" ObjectId="2bb3cefc-9dd9-4c16-9998-f2ff9df8215f" />
                  <Object Name="T_RFD_MDS_State" ObjectId="4c289891-fd14-4474-ada9-f856e721836b" />
                  <Object Name="T_RFD_SLG_Diagnose" ObjectId="8440531f-c5ee-4b68-b480-2af3a7af51cc" />
                  <Object Name="T_RFD_SLG_State" ObjectId="97e293b2-c29e-40d5-9f2f-b996ac56d98e" />
                  <Object Name="T_RFD_StateMachine" ObjectId="a517ce1a-b938-4526-b147-20ccd6dbf4af" />
                  <Object Name="T_RFD_Status" ObjectId="54fa781f-53ac-46eb-bdd5-6b787b2a4c94" />
                  <Object Name="T_StateWord" ObjectId="686b79f1-4a31-4865-bdd7-0e5ad042dd57" />
                </Folder>
                <Folder Name="STD (SignalTowerDriver)">
                  <Object Name="E_LIGHTSTATE" ObjectId="be89386a-9bcb-48a0-ac2c-45ae69d612ed" />
                  <Object Name="E_StackLightColor" ObjectId="bda7aab6-4fca-41b3-82c6-e005308c37c1" />
                  <Object Name="FB_STD" ObjectId="1bb648d9-9320-48ee-aa00-1104f532eccc">
                    <Object Name="ProcessOutput" ObjectId="0f73e241-afa4-4b34-97b7-2289ab143f81" />
                    <Object Name="ProcessInput" ObjectId="28cad425-68ba-46d1-b920-af193dfe7578" />
                    <Object Name="State" ObjectId="476a00ed-ef74-4658-837e-0a56fd52db6b" />
                    <Object Name="GetOutputProcessed" ObjectId="55800798-a2ee-47d2-bc81-7113637f1c06" />
                    <Object Name="AssignTowerLights" ObjectId="59cc2aef-072b-4764-9cde-e82f43060080" />
                    <Object Name="CheckAlmClass" ObjectId="c36e547f-dad2-4a37-8b7a-1e713797d340" />
                    <Object Name="Initialize" ObjectId="daed0ed1-9a01-45ab-b36c-7172d3879506" />
                    <Object Name="AlarmClass" ObjectId="dcbfea31-89ab-46bc-9280-e6c60e70f7ff" />
                    <Object Name="HornEnable" ObjectId="ea7e9a15-73bb-4840-9fda-58e950f8a4af" />
                  </Object>
                  <Object Name="T_LighInformation" ObjectId="d00a6430-b78a-49b6-842b-9a8dd51cba33" />
                </Folder>
              </Folder>
              <Folder Name="Lvl0">
                <Folder Name="BCC (Barcode controller)">
                  <Object Name="BCC_CmdState" ObjectId="56fea13e-d56a-481c-81fa-4bf893476a5b" />
                  <Object Name="FB_BCC" ObjectId="45279440-f702-4acc-823a-1e37aa5791b1">
                    <Object Name="FB_init" ObjectId="027cd8e8-4c30-47c3-9cbc-4ccde024662d" />
                    <Object Name="getCmdState" ObjectId="1a0334c1-a3fb-42e6-951a-2cdf78e7dc68" />
                    <Object Name="CtrlSIf" ObjectId="1b4c2612-f0db-4df4-b217-85825bea7f19" />
                    <Object Name="sta_READBusy" ObjectId="2777d30e-8db7-406a-9ebe-672a8d796e56" />
                    <Object Name="sta_PONBusy" ObjectId="334101e3-ccae-4f85-84ed-31195e895af4" />
                    <Object Name="IoOutBridge" ObjectId="40bacbd8-90e5-4cfd-89be-61d294ed6bc1" />
                    <Object Name="sta_ERRORQuit" ObjectId="47069f04-7c98-400e-8ad0-a46832cd2757" />
                    <Object Name="getCtrlSIf" ObjectId="543c60ab-0e88-44dc-8407-2023e5ed3710" />
                    <Object Name="StateMachine" ObjectId="6f1529fe-fc92-48e6-97a4-1ace6185aa97" />
                    <Object Name="sta_OFFBusy" ObjectId="8731517c-5969-45d3-8e4e-e3b35e0e21f1" />
                    <Object Name="sta_READ" ObjectId="9437c12b-f1f7-40ae-9361-55220ca1a983" />
                    <Object Name="sta_ERROR" ObjectId="a5e376a5-463e-48a4-95ef-4283ae225167" />
                    <Object Name="IoInBridge" ObjectId="c0840189-3aaf-4b0c-bbe0-97624726de38" />
                    <Object Name="sta_OFF" ObjectId="cfd62a73-2bd8-4fed-af32-c5d24dd1f263" />
                    <Object Name="Always" ObjectId="e2d98657-d8c8-409c-bf44-4972b4418587" />
                    <Object Name="sta_PON" ObjectId="ee4f9e12-45a7-4973-8c42-060121364187" />
                  </Object>
                  <Object Name="T_BCC_Data" ObjectId="7b943ac5-46bd-4a90-9c24-e628690f2936" />
                  <Object Name="T_Ctrl_SIf_BCC" ObjectId="f11c08c6-0943-4a3f-848d-ef8e1afb035e" />
                  <Object Name="T_Ctrl_SIf_BCC_Cfg" ObjectId="a97881d0-f15c-463e-bed4-a9157cd373d9" />
                  <Object Name="T_Ctrl_SIf_BCC_Cur" ObjectId="d6acd4c7-9b27-4de2-89d8-6109860947d5" />
                  <Object Name="T_Ctrl_SIf_BCC_In" ObjectId="1672ef70-7add-4ced-bc4f-d0dd9717cff4" />
                  <Object Name="T_Ctrl_SIf_BCC_Out" ObjectId="677ad9db-090e-4212-91bd-3082e715726c" />
                  <Object Name="T_Ctrl_SIf_BCC_Par" ObjectId="f116adff-fddf-4ac8-95de-c4ab4f337edd" />
                </Folder>
                <Folder Name="CYL (Cylinder)">
                  <Object Name="CYL_CmdState" ObjectId="1352af2f-7e80-4ea0-bd89-71a4376b7c42" />
                  <Object Name="E_ALM_CYL" ObjectId="de1323c6-236a-49e4-bde6-ee0d6f7c08fe" />
                  <Object Name="E_Typ_CYL" ObjectId="986763a4-a581-4222-a762-c3c7959a5857" />
                  <Object Name="FB_CYL" ObjectId="59de7442-5445-4be6-b821-033336f62ada">
                    <Object Name="FB_init" ObjectId="08f577dd-643a-4786-913b-0d67868e1d72" />
                    <Object Name="getCmdState" ObjectId="0c1b41fc-39bc-44e0-8541-bfbf69edbb2f" />
                    <Object Name="IoOutBridge" ObjectId="0fe57ff8-68c2-44b8-80d5-2201b38e9fe0" />
                    <Object Name="sta_RETRACT" ObjectId="3b66e273-f213-4b00-bf2e-8c1680623ba4" />
                    <Object Name="sta_EXTEND" ObjectId="5a362c29-6944-468e-b95e-d5dde28f575c" />
                    <Object Name="StateMachine" ObjectId="6beecc92-4557-4446-bfc1-fef0ee13b32b" />
                    <Object Name="sta_OFF" ObjectId="79de6dff-9e6d-49d9-8a00-64865bdf452f" />
                    <Object Name="sta_RETRACTBusy" ObjectId="79ecf8c4-ba56-4375-a874-2fd846671ab0" />
                    <Object Name="sta_OFFBusy" ObjectId="7ab4f3dd-a34b-49db-afe3-eec69807f97a" />
                    <Object Name="getCtrlSIf" ObjectId="8e0de5e1-c43c-44e2-87ea-15040cc4e104" />
                    <Object Name="Always" ObjectId="972603f3-444b-4d87-89a1-65f1c89228fd" />
                    <Object Name="sta_ERRORQuit" ObjectId="a691720d-4358-4f13-bfd1-2bb1ce56f204" />
                    <Object Name="sta_ERROR" ObjectId="ba8a711f-df56-4e52-b8cb-58a04a32635e" />
                    <Object Name="CtrlSIf" ObjectId="bd07fe95-31ae-4b74-acba-a6245f2a7bd6" />
                    <Object Name="IoInBridge" ObjectId="d0cf526a-f035-4ce6-b0c9-596784ec5c80" />
                    <Object Name="sta_STOP" ObjectId="e805ac21-f085-4f33-972a-d6f3bf40c977" />
                    <Object Name="sta_STOPBusy" ObjectId="eae5ff1d-7a66-492a-ab6f-e39a877b1c75" />
                    <Object Name="sta_EXTENDBusy" ObjectId="ec7636de-ac06-47ad-b7b6-638d46823670" />
                  </Object>
                  <Object Name="T_Ctrl_SIf_CYL" ObjectId="5c2a2407-bb24-4c57-a14a-77cf8113d51d" />
                  <Object Name="T_Ctrl_SIf_CYL_Cfg" ObjectId="fb5cfb74-feb4-405c-a6fe-09f460def687" />
                  <Object Name="T_Ctrl_SIf_CYL_Cur" ObjectId="d9d9d7ac-5771-4c59-afac-51216b873cc4" />
                  <Object Name="T_Ctrl_SIf_CYL_Ilk" ObjectId="306d491c-702b-4109-95c1-9e9e92b5c7b7" />
                  <Object Name="T_Ctrl_SIf_CYL_In" ObjectId="4601b753-b0b2-4566-871e-c444d9f36dcf" />
                  <Object Name="T_Ctrl_SIf_CYL_Out" ObjectId="3b004f65-cb6d-45b8-9ae1-390b26ec4067" />
                  <Object Name="T_Ctrl_SIf_CYL_Par" ObjectId="d2a041b0-9ccd-45c7-8c9c-38689c415a92" />
                </Folder>
                <Folder Name="DRV (Drive)">
                  <Object Name="Const_DRV" ObjectId="bfc948d3-aed2-420b-b3ac-e40e075c9ae3" />
                  <Object Name="E_Typ_DRV" ObjectId="e428a6b9-6d5f-44be-983a-f52fb9e97335" />
                  <Object Name="FB_DRV" ObjectId="a09ebb54-dbb7-4b29-b322-5e52fbbdee8c">
                    <Object Name="CtrlSIf" ObjectId="0d48173d-eb3f-4817-a35d-a8e1f2a8abb2" />
                    <Object Name="sta_OFF" ObjectId="114eb374-98a4-4895-bee8-b5e13ddba14f" />
                    <Object Name="getCtrlSIf" ObjectId="2c38d673-5f6c-40cb-9c9a-af8f5e2ddfe5" />
                    <Object Name="Always" ObjectId="643f16a1-e025-45a8-a890-bb6333befaac" />
                    <Object Name="sta_OFFBusy" ObjectId="6e115bc5-e0d3-49a0-b7c5-189aa0b2fb18" />
                    <Object Name="sta_RUN" ObjectId="6f47a8ef-2f39-4884-af88-b47d12b014e6" />
                    <Object Name="FB_init" ObjectId="8628a7bc-058a-47d8-b52f-15ef6e40e799" />
                    <Object Name="StateMachine" ObjectId="9e54f73c-c5f1-450b-a027-e2c0a4ba8cad" />
                    <Object Name="SetSpeed" ObjectId="a56d404a-7ae4-4439-82b0-a2e594cfa9eb" />
                    <Object Name="IoInBridge" ObjectId="abf2d6d2-e1ae-4cba-8c33-fac5a09856c0" />
                    <Object Name="sta_ERROR" ObjectId="b6f8afae-ced3-4019-b3bb-384684e21c5c" />
                    <Object Name="sta_PON" ObjectId="baf35169-6ce0-4ca9-8b4e-517e7a3aedfb" />
                    <Object Name="IoOutBridge" ObjectId="c273ebae-f621-49b0-bbde-a6a72c865130" />
                    <Object Name="sta_RUNBusy" ObjectId="e0541a79-ec22-49f9-be02-61c7af714a1d" />
                  </Object>
                  <Object Name="T_Ctrl_SIf_DRV" ObjectId="5a32ac4e-6ebf-44bf-a08a-614dc14fbcdf" />
                  <Object Name="T_Ctrl_SIf_DRV_Cfg" ObjectId="bce6612a-fe0b-49d8-9e8e-9e023c034430" />
                  <Object Name="T_Ctrl_SIf_DRV_Cur" ObjectId="b0dc7119-59e8-48da-a345-efe3289e0ff2" />
                  <Object Name="T_Ctrl_SIf_DRV_In" ObjectId="fbc3fb3f-0955-46ed-a4bb-0076c57fea6c" />
                  <Object Name="T_Ctrl_SIf_DRV_Out" ObjectId="ad8e0015-b138-4cb4-9001-517d7cf9dba1" />
                  <Object Name="T_Ctrl_SIf_DRV_Par" ObjectId="cabacbe0-14ef-4839-a7e6-fa8cff440b56" />
                </Folder>
                <Folder Name="ECD (EtherCAT Diagnostic)">
                  <Object Name="ECD_Const" ObjectId="9b105619-e1da-40d5-b99f-e7b61135db23" />
                  <Object Name="E_ALM_ECD" ObjectId="932b64ec-7c8c-42fb-8048-153855c94db6" />
                  <Object Name="FB_ECD" ObjectId="1fea0de2-a9af-4156-b983-ff4982d3f480">
                    <Object Name="sta_OFF" ObjectId="02e40ca3-8345-4dee-9659-31e56a9b2e60" />
                    <Object Name="sta_RUN" ObjectId="1be99cb1-11ca-4a87-a197-56174323634a" />
                    <Object Name="sta_PONBusy" ObjectId="2cd4b2e3-2ca2-409e-beff-ad01f0513a4c" />
                    <Object Name="sta_ERRORQuit" ObjectId="333c5c46-87eb-4a59-90e3-182833d9400c" />
                    <Object Name="Always" ObjectId="3b27a24d-3662-4f62-b0ac-ba0540163417" />
                    <Object Name="FB_init" ObjectId="3ff121ce-11c0-4fa8-addc-65cf351fcf1d" />
                    <Object Name="sta_RUNBusy" ObjectId="6598c86e-bc38-4e9a-9e3b-f22dccb24314" />
                    <Object Name="StateMachine" ObjectId="724f052e-faae-482c-af16-153019b383d6" />
                    <Object Name="sta_ERROR" ObjectId="876f0e49-e9c1-49e4-b503-d87cb82aa3e0" />
                    <Object Name="getCtrlSIf" ObjectId="9de49631-3c4b-425f-8cc9-cd4acf422a4e" />
                    <Object Name="sta_PON" ObjectId="c0d150d4-d1ae-426e-9be5-d64068fb4cb7" />
                    <Object Name="CtrlSIf" ObjectId="e6b984c1-c9c3-4692-a6b8-7d2b3aaf6b33" />
                    <Object Name="getCmdState" ObjectId="feee4ac9-1fc5-4241-8928-60636091e9ca" />
                  </Object>
                  <Object Name="T_Ctrl_SIf_ECD" ObjectId="1b148a58-3b69-41f0-8c7d-2947da3da205" />
                  <Object Name="T_Ctrl_SIf_ECD_Cfg" ObjectId="6e57999f-20da-4b90-b2ab-1a877f653fbf" />
                  <Object Name="T_Ctrl_SIf_ECD_Cur" ObjectId="100f61e7-53bf-46d9-97f9-d0372380cc5d" />
                  <Object Name="T_Ctrl_SIf_ECD_Par" ObjectId="01379ec2-bf43-4e18-96a1-59fd7c4b2c58" />
                  <Object Name="T_ECD_SlaveData" ObjectId="3e382130-7769-4e99-9c92-9d08b9ab5518" />
                </Folder>
                <Folder Name="RFW (RFID Reader-Writer)">
                  <Object Name="E_Typ_RFW" ObjectId="879fc782-15af-4f75-a012-e12eb427a762" />
                  <Object Name="FB_DtChnToLine_NewRFID" ObjectId="7377b839-51b4-4ecb-8121-1fca29d92915">
                    <Object Name="Creat" ObjectId="4dd6ebf1-4c8c-47ab-b5bc-e6fa305fe01c" />
                  </Object>
                  <Object Name="FB_RFW" ObjectId="6f3444f8-fe94-4d15-ac48-af337cfd9399">
                    <Object Name="Always" ObjectId="01fa4158-8869-42d7-a043-3b03868c50b5" />
                    <Object Name="sta_ERROR" ObjectId="07139a26-171c-4d73-ae47-1772f434179e" />
                    <Object Name="sta_ONbusy" ObjectId="1bb97763-b40d-4722-a8c0-8c52f085370b" />
                    <Object Name="sta_OFF" ObjectId="264788df-90a6-4149-9ea0-e4a45dc80f4c" />
                    <Object Name="FB_init" ObjectId="2cceee73-5340-45cb-a6fa-8e498866d35d" />
                    <Object Name="sta_ON" ObjectId="3f89f901-ef7a-426a-bbc6-9160e2223188" />
                    <Object Name="getCtrlSIf" ObjectId="58e9c3b4-9dfb-4d05-be68-46bb21d02e6b" />
                    <Object Name="sta_OFFBusy" ObjectId="66a902de-580a-4869-a0a1-268afd7156ea" />
                    <Object Name="sta_WRITEBusy" ObjectId="6a409eb9-e99d-4e8d-8be7-8cce0a919e4b" />
                    <Object Name="sta_RUN" ObjectId="76cc41a1-a0a5-43b6-8358-f37074d1f932" />
                    <Object Name="StateMachine" ObjectId="7e9d47c5-2f3f-452d-8651-a0602020ca90" />
                    <Object Name="sta_READ" ObjectId="934172f5-9bfa-42d0-8246-17fd3fbd3afc" />
                    <Object Name="sta_READBusy" ObjectId="b063d0b3-ad66-465e-93fc-95ee5de1af01" />
                    <Object Name="sta_WRITE" ObjectId="b460320c-5ad7-462f-a22b-e48ba64fd66b" />
                    <Object Name="sta_PON" ObjectId="bdf203ad-aab5-4cde-a759-d6f4e13b487d" />
                    <Object Name="getCmdState" ObjectId="d4f77975-08bd-4cd8-9588-c6e42a420a5e" />
                    <Object Name="sta_RUNbusy" ObjectId="d9be2459-cddd-441e-b3bc-d9f11ddd4cc1" />
                    <Object Name="CtrlSIf" ObjectId="da0cbadb-1e4d-4be9-b282-9eb599454fa6" />
                    <Object Name="IoInBridge" ObjectId="e161fdba-303b-42de-9649-6c247dfd8304" />
                    <Object Name="sta_PONBusy" ObjectId="fd7298f0-0180-459f-b01f-ad55a89dcb0e" />
                    <Object Name="IoOutBridge" ObjectId="feaed240-0603-45af-8950-b8abe0aacabd" />
                  </Object>
                  <Object Name="FB_ULINT_TO_HEXSTRING" ObjectId="0fecdd07-4acd-4bed-838b-ede9abbf975f" />
                  <Object Name="RFID_Data" ObjectId="6afaa887-3afa-4537-928b-996534509c05" />
                  <Object Name="RFW_CmdState" ObjectId="076eb220-029f-4365-935e-6bd6b509e191" />
                  <Object Name="T_Ctrl_SIf_RFW" ObjectId="d9a4a247-421c-44e7-8bfc-57fcfe0b5511" />
                  <Object Name="T_Ctrl_SIf_RFW_Cfg" ObjectId="6b942f5f-0429-4027-a9d6-f0ab33a8eff8" />
                  <Object Name="T_Ctrl_SIf_RFW_Cur" ObjectId="cbc1eee0-e47f-408a-9d03-6db73294d146" />
                  <Object Name="T_Ctrl_SIf_RFW_DtChnToLine" ObjectId="691e189f-a29e-4fd6-a78c-50e8410d1145" />
                  <Object Name="T_Ctrl_SIf_RFW_In" ObjectId="dbc9c954-8778-46e0-8057-f6886c73fe2b" />
                  <Object Name="T_Ctrl_SIf_RFW_Out" ObjectId="c810c854-060a-4ded-9c4d-aededf9b3111" />
                  <Object Name="T_Ctrl_SIf_RFW_Par" ObjectId="d8376c7a-9f8f-4b58-9129-6407a4608458" />
                  <Object Name="T_NewRFID_DtChn" ObjectId="8f51bc39-bcf8-4bc4-978c-c474f1fb6d1b" />
                  <Object Name="T_RFW" ObjectId="3e51dc33-0305-4c60-82e0-8b1f28fdb88f" />
                </Folder>
                <Folder Name="SGT (Signal Tower)">
                  <Object Name="E_ALM_SGT" ObjectId="bc7ed57b-bdcd-4e99-8136-da85d9f53475" />
                  <Object Name="FB_SGT" ObjectId="3e38ff1c-8932-4771-aa3a-87f55e3483ce">
                    <Object Name="StateMachine" ObjectId="071e78d1-35ef-48f4-aa56-3babb01ae9b2" />
                    <Object Name="getCmdState" ObjectId="11488f8c-fb9a-4a89-875a-9b9e9ea32d8b" />
                    <Object Name="Always" ObjectId="16a4f14f-8c70-47c3-aefd-a640fa4d18e2" />
                    <Object Name="getCtrlSIf" ObjectId="1f52b74c-ab5f-4872-8160-08d2ca48b0f8" />
                    <Object Name="FB_init" ObjectId="2c1d78e1-d2ba-44f1-b62f-82ce282d2a3c" />
                    <Object Name="sta_RUNBusy" ObjectId="4599e496-dbed-46f2-881a-5717ff0ba1d1" />
                    <Object Name="sta_PON" ObjectId="4d78f065-c5de-4fbb-b74e-f27f17ab7875" />
                    <Object Name="sta_OFF" ObjectId="611bf975-a4e4-4abc-9b49-b98753cbb3c2" />
                    <Object Name="CtrlSIf" ObjectId="78d976b8-7e91-4aec-8701-265874a8bb81" />
                    <Object Name="sta_RUN" ObjectId="860d867e-aded-4dc3-b96a-6c7237c7f688" />
                    <Object Name="setLampOutput" ObjectId="b2eced1b-5f5c-41c2-9a66-6cdd9f3f979d" />
                    <Object Name="IoOutBridge" ObjectId="d7e11bf8-8223-4355-8ad1-e44891247a41" />
                    <Object Name="sta_OFFBusy" ObjectId="df7cc5fc-37c4-45d7-b614-d169e6e63f44" />
                    <Object Name="setBeepOutput" ObjectId="e59c31d2-688b-43f4-bfd2-9d7a3cbe5aee" />
                    <Object Name="sta_PONBusy" ObjectId="eb33caa0-1f4b-402c-8167-358cefcc0764" />
                  </Object>
                  <Object Name="T_Ctrl_SIf_SGT" ObjectId="9e172bd7-7fc6-4aac-ba50-a15e176a7521" />
                  <Object Name="T_Ctrl_SIf_SGT_Cfg" ObjectId="3273db0a-4fb0-4402-8d78-b703159a5254" />
                  <Object Name="T_Ctrl_SIf_SGT_Out" ObjectId="74828ba3-5fa7-4c13-a659-f7267e3bb943" />
                  <Object Name="T_Ctrl_SIf_SGT_Par" ObjectId="c9b3c771-0266-4303-9b25-0bad0c77e050" />
                </Folder>
                <Folder Name="UMC [Universal Motor Controller]">
                  <Object Name="E_ALM_UMC" ObjectId="0e81823e-a6e7-4b07-bc48-5defe334492f" />
                  <Object Name="E_CFG_UMC" ObjectId="13c27364-c2e6-4822-9f8f-ab42b9793010" />
                  <Object Name="E_TURN_DIRECTION" ObjectId="c64f9134-9c1a-4730-886a-ba6e51a4143f" />
                  <Object Name="E_UMC_MOTOR_STATUS" ObjectId="92f20bd3-90b2-4209-a659-7ad490feab1d" />
                  <Object Name="FB_UMC" ObjectId="7c7c56be-85d5-4b7e-bf88-0704e3cbe388">
                    <Object Name="CtrlSIf" ObjectId="0157efd5-9fd8-4e1c-b6ad-564577707b27" />
                    <Object Name="IoInBridge" ObjectId="06969552-1773-4573-a299-c8c9933c6ef7" />
                    <Object Name="sta_STOP" ObjectId="09e03bbf-eae1-44ff-a886-88cd140bacad" />
                    <Object Name="cmd_MotorClear" ObjectId="0ad32ce5-02b8-4336-897b-d51700cbd635" />
                    <Object Name="sta_OFF" ObjectId="150e8486-b104-40bc-a4cd-7964d5391c98" />
                    <Object Name="cmd_MotorStop" ObjectId="1a8a96f0-c8a9-40ae-90a4-f5ab5f6c384a" />
                    <Object Name="cmd_MotorOff" ObjectId="326dcdf1-c155-44d9-932c-4ff855772f9d" />
                    <Object Name="getCtrlSIf" ObjectId="3696bb31-b5b5-4032-aeb8-45d951e4306a" />
                    <Object Name="Always" ObjectId="3a485704-ed5c-4489-b478-2352d4f505da" />
                    <Object Name="FB_init" ObjectId="49188027-cec4-4e22-bc48-1162ee5fdc57" />
                    <Object Name="sta_ERRORQuit" ObjectId="4cd275a2-017f-4fd0-ac4d-8b20883964bd" />
                    <Object Name="GetSpeedValue" ObjectId="66b53486-bbd4-4830-9c89-63959ea0da21" />
                    <Object Name="IoOutBridge" ObjectId="736f9f75-7cb1-43df-8de3-f69d4bdd9b87" />
                    <Object Name="StateMachine" ObjectId="7d9bdba7-64c2-4795-9f3a-03cc5948e4c4" />
                    <Object Name="sta_PON" ObjectId="7f3296c6-7073-4b07-8edd-16b8f4336c81" />
                    <Object Name="sta_RESETMOTORERROR" ObjectId="8264d63d-8bc3-4403-911a-4948072988bd" />
                    <Object Name="sta_RUNBusy" ObjectId="90aee50a-6506-4bb5-b1aa-9f9d7c1ddd68" />
                    <Object Name="sta_EOFFbusy" ObjectId="9c2f9fe8-215d-4fdf-97c0-6e2185aa0bfa" />
                    <Object Name="sta_OFFBusy" ObjectId="9e716469-41e6-4c16-83b3-eae4c2af4606" />
                    <Object Name="sta_RUN" ObjectId="ac65b301-60da-4f47-a010-e58ca5188043" />
                    <Object Name="sta_ERROR" ObjectId="b89e4623-bf9b-4d13-915b-6b332e27f154" />
                    <Object Name="GetMotorStatus" ObjectId="ba97abe5-84c2-4af3-b8dd-6dedb07bbbb2" />
                    <Object Name="CtrlInit" ObjectId="be50f307-0332-4dfb-86e8-1d7e3f9b4a0a" />
                    <Object Name="sta_EOFF" ObjectId="bfe5d590-8682-4646-bfdd-2258cd36f1d7" />
                    <Object Name="sta_STOPBusy" ObjectId="c180d7f4-f7f7-488b-8aaa-4b056e975904" />
                    <Object Name="cmd_MotorReset" ObjectId="cb1c0de1-c819-406c-9479-8b1d7fc3d345" />
                    <Object Name="CycleEndDuty" ObjectId="cbbdec4d-6cee-48b4-953e-bd11ec7bb1cd" />
                    <Object Name="getCmdState" ObjectId="d6b7f123-3a09-4b60-a640-1798c6d05ee8" />
                    <Object Name="cmd_MotorOn" ObjectId="e8a1edd6-9a14-4af6-bda0-9cb0cbe53275" />
                    <Object Name="CycleStartDuty" ObjectId="ef85c73c-cf9d-4365-978d-303e02039685" />
                  </Object>
                  <Object Name="T_Ctrl_SIf_UMC" ObjectId="33525c32-04ac-4344-9209-308827820ce8" />
                  <Object Name="T_Ctrl_SIf_UMC_Cfg" ObjectId="f8552fca-b1a4-492e-8c49-2fced970e6ef" />
                  <Object Name="T_Ctrl_SIf_UMC_Cur" ObjectId="9bbe3747-9471-4932-b534-489f84dd505c" />
                  <Object Name="T_Ctrl_SIf_UMC_Ilk" ObjectId="1af82183-9d16-47aa-8cf3-8126c880ad15" />
                  <Object Name="T_Ctrl_SIf_UMC_In" ObjectId="b0db4743-48ef-4a32-af02-0493db66d305" />
                  <Object Name="T_Ctrl_SIf_UMC_Out" ObjectId="000c99f6-65d6-40ac-a59c-acdb9a383c92" />
                  <Object Name="T_Ctrl_SIf_UMC_Par" ObjectId="b9ba4ec3-2cb8-45c2-aa71-d1ebd44a47e5" />
                  <Object Name="T_UMC_Lenze_Control" ObjectId="ca3c0471-19a9-4721-9e57-fa8225b8f4b0" />
                  <Object Name="T_UMC_Lenze_Status" ObjectId="fe3152c0-67c8-4b35-b794-fa19019db014" />
                  <Object Name="UMC_CmdState" ObjectId="e8f106a6-b2e6-4f7c-b68a-850a8394f646" />
                  <Object Name="U_UMC_Lenze_Control" ObjectId="9768d289-6cef-41e2-82ba-11dc57e84170" />
                  <Object Name="U_UMC_Lenze_Status" ObjectId="e42cdc26-aacb-4ee9-a8e8-4ca5ab974d66" />
                </Folder>
                <Folder Name="VLV (Valve controller)">
                  <Object Name="E_ALM_VLV" ObjectId="f2556bf9-99c8-45d7-b1bc-32e66fc35080" />
                  <Object Name="E_Typ_VLV" ObjectId="09bff28b-050d-4cdd-84b9-9dd0b54825fc" />
                  <Object Name="FB_VLV" ObjectId="e7c452ef-6069-4824-b6af-02d0e02ac29f">
                    <Object Name="sta_OFFBusy" ObjectId="06d4fff6-826b-4df9-8700-c5db877dc584" />
                    <Object Name="sta_CLOSE" ObjectId="15f1ec19-b0d0-4924-8e58-148827c9b4b3" />
                    <Object Name="sta_ERROR" ObjectId="1f851396-69ba-4596-80bd-99073f07f906" />
                    <Object Name="IoInBridge" ObjectId="5f8d86d4-d3c3-4f1b-819e-cae2994a5d48" />
                    <Object Name="sta_OPENBusy" ObjectId="6cc4e05e-d369-4b50-a636-56b617337fbe" />
                    <Object Name="IoOutBridge" ObjectId="792c89a2-c475-4489-ac4c-015f56b4e51b" />
                    <Object Name="sta_CLOSEBusy" ObjectId="83489284-5ffd-4b00-b98a-cd1342a58402" />
                    <Object Name="Always" ObjectId="92860e10-9957-42cd-ae35-6b5b1a06e6d1" />
                    <Object Name="getCmdState" ObjectId="9c42a1d1-076f-4a21-8f9d-ebadf4911639" />
                    <Object Name="getCtrlSIf" ObjectId="cac029ef-196b-4624-b146-4fbe2ee727de" />
                    <Object Name="sta_ERRORQuit" ObjectId="ddcdaa7f-2db4-42cf-9c96-d1fd802dbbe9" />
                    <Object Name="CtrlSIf" ObjectId="e0b02b20-9157-489e-bd37-1790c676c697" />
                    <Object Name="FB_init" ObjectId="e6c5f0f7-f14d-4d19-9372-986e38860334" />
                    <Object Name="sta_OPEN" ObjectId="ea4872a5-0031-4ffe-b38a-59a870c21bdd" />
                    <Object Name="StateMachine" ObjectId="f200a4ad-fdbb-4e4a-b949-20ad0e972d91" />
                    <Object Name="sta_OFF" ObjectId="f3efc9ab-b7b7-412d-b282-f24eef564791" />
                  </Object>
                  <Object Name="T_Ctrl_SIf_VLV" ObjectId="a4d20334-f21a-406d-be9c-f9d52e65c3c9" />
                  <Object Name="T_Ctrl_SIf_VLV_Cfg" ObjectId="9fae5b7b-ef7a-4045-96df-fb9d599d8c18" />
                  <Object Name="T_Ctrl_SIf_VLV_Cur" ObjectId="a5e2401f-5031-45c2-85c8-1927a4425540" />
                  <Object Name="T_Ctrl_SIf_VLV_Ilk" ObjectId="ca04c944-bceb-4a8f-a239-f2adcca0c7f0" />
                  <Object Name="T_Ctrl_SIf_VLV_In" ObjectId="af0fdb37-d482-41bf-84e9-cd382802b727" />
                  <Object Name="T_Ctrl_SIf_VLV_Out" ObjectId="bafe0db6-049e-4651-861f-e6144a75ffec" />
                  <Object Name="T_Ctrl_SIf_VLV_Par" ObjectId="12650060-3baa-459e-9db6-72472008acfb" />
                  <Object Name="VLV_CmdState" ObjectId="75b1de79-e96e-4f7d-a4d3-461fb22b206a" />
                </Folder>
                <Folder Name="VPC [Vacuum Pump Controller]">
                  <Object Name="E_ALM_VPC" ObjectId="43ee1ae9-8ecb-4504-96d3-64d299d2135d" />
                  <Object Name="E_CFG_VPC" ObjectId="5608cec9-c1c7-4f6f-980c-656a02cd221c" />
                  <Object Name="FB_VPC" ObjectId="13511828-5fa3-4db9-8a62-883d17247bf0">
                    <Object Name="sta_RUNBusy" ObjectId="1597373b-6e96-49e1-bdbf-9fa98235040c" />
                    <Object Name="IoOutBridge" ObjectId="3b060d29-e9cf-457f-8c49-0301ccd0cca5" />
                    <Object Name="getCtrlSIf" ObjectId="3f73b4c8-fe1a-4e64-b16a-7e0063e5c6aa" />
                    <Object Name="FB_init" ObjectId="49182cc1-4f51-4fb4-9202-ff24f518710e" />
                    <Object Name="Always" ObjectId="4f56d2f9-8407-4812-8ceb-f4f26f794649" />
                    <Object Name="sta_StabilizeVacuum" ObjectId="56e99b8a-45db-4a94-b998-af0d9227c626" />
                    <Object Name="sta_OFFBusy" ObjectId="58e778f2-58e2-4242-b691-65410b4a0daa" />
                    <Object Name="sta_OFF" ObjectId="69e589e4-f383-473e-b644-e3226d6d511f" />
                    <Object Name="getCmdState" ObjectId="703f6dd4-8675-4294-8b3d-2f6ff473bc8c" />
                    <Object Name="sta_RUN" ObjectId="814d30da-f6f2-44a3-8f69-fbdc9cbd5a0a" />
                    <Object Name="CtrlSIf" ObjectId="8996880a-f410-4ad8-9c12-fc2a666a5164" />
                    <Object Name="sta_PON" ObjectId="cd944ca7-9f97-4fb3-b4a2-4d1ad61c9f19" />
                    <Object Name="sta_ERROR" ObjectId="cdcdfbea-0d76-4965-a714-0ee8fc61cf6a" />
                    <Object Name="IoInBridge" ObjectId="e901586d-7f23-48a3-af3c-72b64ab38fc4" />
                    <Object Name="StateMachine" ObjectId="fb3e697c-bec3-4662-ad64-257ff20479d8" />
                    <Object Name="sta_ERRORQuit" ObjectId="fbdec985-78a5-46c9-a569-cae78f6ce0ca" />
                  </Object>
                  <Object Name="T_Ctrl_SIf_VPC" ObjectId="a6b281d7-742d-4faf-bfb4-49a6e5ac6322" />
                  <Object Name="T_Ctrl_SIf_VPC_Cfg" ObjectId="1dee7cde-c5ef-47a6-bc46-81e0cd8ddff8" />
                  <Object Name="T_Ctrl_SIf_VPC_Cur" ObjectId="1cdc868b-0a1c-449d-acfa-52b69b7f5599" />
                  <Object Name="T_Ctrl_SIf_VPC_Ilk" ObjectId="6c772d6d-1891-4e4d-ae3b-c60994dc1743" />
                  <Object Name="T_Ctrl_SIf_VPC_In" ObjectId="795b3629-5b6f-4e97-ae8f-a8fc1eb2d28f" />
                  <Object Name="T_Ctrl_SIf_VPC_Out" ObjectId="bf7b5b2f-52fe-4cb0-96db-3a6b86cdba2d" />
                  <Object Name="T_Ctrl_SIf_VPC_Par" ObjectId="52622a75-45f7-47dc-bd6c-9f66efa9aa4f" />
                  <Object Name="VPC_CmdState" ObjectId="3cafe79f-fa4f-4674-b801-a9597a583bd0" />
                </Folder>
              </Folder>
              <Folder Name="Lvl3">
                <Folder Name="BaseCtrlModule">
                  <Object Name="E_ALM_MOD" ObjectId="c067e919-ea45-40f1-8d34-d07e98384c3e" />
                  <Object Name="E_MOD_STARTUP" ObjectId="86ed49cc-103f-41b2-965a-eae686b88710" />
                  <Object Name="FB_CtrlModule" ObjectId="93bcbc09-e224-4f3b-9fe5-ea80da832953">
                    <Object Name="IoOutBridge" ObjectId="0547fd7b-a1af-4009-8ecb-2ef72dd56f49" />
                    <Object Name="getCmdState" ObjectId="12fc8a53-4b7a-4d57-b5d7-3d215ebc1d8b" />
                    <Object Name="Always" ObjectId="2b2066c4-4e8e-4805-ad8b-8de49b1882dd" />
                    <Object Name="sta_RUN" ObjectId="2b57d42b-4072-44ef-bdb5-a7ee1dbac08c" />
                    <Object Name="sta_STANDBYBusy" ObjectId="36793c08-dd27-4319-9d02-fddd0d7ca717" />
                    <Object Name="sta_OFF" ObjectId="3750f796-76b8-4174-8fb8-c3e13e87b7c5" />
                    <Object Name="sta_EOFFBusy" ObjectId="43926500-8b3f-40d9-9943-c6ef440eaefb" />
                    <Object Name="sta_STOP" ObjectId="44340596-81ec-4934-a2c3-05ad5626426e" />
                    <Object Name="sta_RUNBusy" ObjectId="459b0430-9f25-4ebc-ba23-68dcaa75419d" />
                    <Object Name="CheckAllChildStateOr" ObjectId="4a6c1c11-1b34-4eb9-a328-d882760ab423" />
                    <Object Name="SIf_Out" ObjectId="66efe5fb-6c08-4450-a924-f790660b37a8" />
                    <Object Name="CtrlInit" ObjectId="7a0ac12c-cff4-4e9e-8849-3ec85fb70fac" />
                    <Object Name="sta_EOFF" ObjectId="7a7e2512-7c7d-4cf3-97d1-a6e983988ed7" />
                    <Object Name="checkValidPointer" ObjectId="7bc44136-2728-423e-a49d-d06c4040b9ac" />
                    <Object Name="AddIBufferFullChilds" ObjectId="7bcb42ec-0ed0-4411-889a-451df2a9d0ed" />
                    <Object Name="SIf_Cur" ObjectId="7c2240cf-17ab-4950-a777-bd60151c9f81" />
                    <Object Name="sta_STANDBY" ObjectId="818d995b-2816-4bc9-bf65-d6f7ffb8b920" />
                    <Object Name="CycleEndDuty" ObjectId="8b2fafa0-18fb-4979-8917-575392318b6c" />
                    <Object Name="IoInBridge" ObjectId="95c556ec-c88e-4a00-9f2f-5c4a543adc13" />
                    <Object Name="AddSeqChild" ObjectId="a0025313-0b7e-4dba-80b1-83806b0c4ebe" />
                    <Object Name="sta_PONBusy" ObjectId="b12c82f9-e8f5-4662-8a55-255f28b471bf" />
                    <Object Name="sta_STOPBusy" ObjectId="b4344b3d-9889-41b7-a53d-b3ca5d0bce3a" />
                    <Object Name="sta_OFFBusy" ObjectId="b43c45d6-db5e-43b9-b8e6-886e382de8a7" />
                    <Object Name="SIf_Par" ObjectId="b5260abe-a3fb-44c5-b308-7b394f794cb8" />
                    <Object Name="FB_init" ObjectId="ba738ca1-fd3b-440c-bfd2-18e244ab5591" />
                    <Object Name="AddIBufferChilds" ObjectId="bc49a60a-0556-4ce3-b7de-195ad0ea1e2e" />
                    <Object Name="StateMachine" ObjectId="c244d7e5-c41f-489f-97da-65b69148df4b" />
                    <Object Name="checkChildAlmClass" ObjectId="cbf90ddf-9131-406d-b67f-19452c240e46" />
                    <Object Name="SIf_In" ObjectId="d26d3890-71df-445f-a1ed-19dc5bb456a2" />
                    <Object Name="FurtherReactions" ObjectId="e50c2c57-3ef3-4abd-b707-730734684d2c" />
                    <Object Name="sta_ERROR" ObjectId="ebaa0d20-3483-464b-84fb-8ac6d1d7c3da" />
                    <Object Name="SIf_Cfg" ObjectId="fb07488b-af83-408e-8562-7c3d8ca56d51" />
                  </Object>
                  <Object Name="FB_IBuffer" ObjectId="9ec31dad-c8d1-4e2e-aa3f-873965b25876">
                    <Object Name="NumOfItems" ObjectId="170dcb0c-806c-4828-ae7a-dece73dc219a" />
                    <Object Name="MaxCapacity" ObjectId="6f5294a5-4d7a-45f2-ba05-7365505de59d" />
                    <Object Name="BufferFull" ObjectId="c94962f6-ad99-4e03-9cec-f625d834a541" />
                  </Object>
                  <Object Name="IBuffer" ObjectId="6ca8dc5e-3ccb-42a7-b725-bd82639cabe8">
                    <Object Name="NumOfItems" ObjectId="20de0e0f-413e-48f7-9eb2-454894ca89b9" />
                    <Object Name="BufferFull" ObjectId="2de9695e-388c-467a-9d08-172885753681" />
                    <Object Name="MaxCapacity" ObjectId="3a32b318-0096-428a-9049-f4cfb01a1120" />
                  </Object>
                  <Object Name="T_Ctrl_SIf_MOD" ObjectId="5f13d4a1-2520-48bb-ad85-26e06ea52c4f" />
                  <Object Name="T_Ctrl_SIf_MOD_Cfg" ObjectId="0a6ad749-9fa3-41c0-ba6b-a045ebbc52d5" />
                  <Object Name="T_Ctrl_SIf_MOD_Cur" ObjectId="30796f16-fa3d-47dc-b224-e58799f07d37" />
                  <Object Name="T_Ctrl_SIf_MOD_In" ObjectId="310febbc-0c4d-4259-8c32-cba0e4a2b496" />
                  <Object Name="T_Ctrl_SIf_MOD_Out" ObjectId="08e402dd-7973-47f5-b63b-307e53430d30" />
                  <Object Name="T_Ctrl_SIf_MOD_Par" ObjectId="af6c9077-6cc4-4b17-8c1d-7a4257341a94" />
                  <Object Name="T_Sequence" ObjectId="b2c675fc-2993-46a0-911f-c35f3b7aa58e" />
                </Folder>
              </Folder>
            </Folder>
            <Folder Name="Utility">
              <Folder Name="ItemBase">
                <Object Name="E_Destination" ObjectId="0fa17c3c-ac93-48ea-b032-1eeb8d491a20" />
                <Object Name="E_ItemHealth" ObjectId="94876fa6-5767-4659-be05-59148d5a7d46" />
                <Object Name="E_PrintSelection" ObjectId="1d82097f-f709-40cb-8960-3cb84a3ccf35" />
                <Object Name="T_IdBase_DCH" ObjectId="dc4cc25f-5ff4-4b8a-be0b-5c40224b1b92" />
                <Object Name="T_ItemBase" ObjectId="5bdc6427-5e8b-4d7d-924f-75cc9aba7d63" />
                <Object Name="T_ItemPaperBase" ObjectId="8b8348d3-cbde-4e04-a040-8f303f755d13" />
                <Object Name="ItemConst" ObjectId="72e57533-63d3-4bfb-a14c-0ccf4c178ea3" />
              </Folder>
              <Folder Name="GHT [Generic Hash Table]">
                <Object Name="T_GHTHashTableBuffer" ObjectId="9a3a7aba-2db4-4014-8751-5e7f48f9bff1" />
                <Object Name="FB_GHT" ObjectId="3267d0b8-ad11-49d1-b3fc-75b2ba380662">
                  <Object Name="Initialize" ObjectId="4b1894b7-51db-4af9-9428-c049dca1b02b" />
                  <Object Name="GetTableIdx" ObjectId="35e2226d-63a4-41f4-bdda-6c7a770fa619" />
                  <Object Name="Lookup" ObjectId="d7ba55b0-a45a-4350-a587-e943b627eca1" />
                  <Object Name="Clear" ObjectId="6d497f0c-c0a5-4755-af21-046ab24e6947" />
                  <Object Name="FB_init" ObjectId="923bea28-0a13-4fb3-b4f4-dfd81e316bd8" />
                  <Object Name="AddItem" ObjectId="62193f64-38a9-46f6-abf3-482dea497c67" />
                  <Object Name="Count" ObjectId="9e1374c2-3267-44b4-aaf7-af345f2d53dc" />
                </Object>
                <Object Name="IGHT" ObjectId="1369cddd-21ca-4288-aafc-6b12aed90293">
                  <Object Name="AddItem" ObjectId="9fe970a3-1a2e-4d3f-b649-fa00d84995e2" />
                  <Object Name="Lookup" ObjectId="8fb41088-b237-4034-bdc0-99530f1c464b" />
                  <Object Name="Clear" ObjectId="2b5f83c9-7e25-4125-ad11-d67fee5836df" />
                  <Object Name="Initialize" ObjectId="43adaa89-a44f-4bbe-9e5c-4fae0639e37e" />
                  <Object Name="Count" ObjectId="5bac76e5-ef0e-4aee-b32a-c5fdd14d0d2c" />
                </Object>
              </Folder>
              <Folder Name="Data Channel">
                <Folder Name="IdBase">
                  <Object Name="T_IdBaseRecvData" ObjectId="ddffdfa7-5299-4644-ab62-0ed48bc9c539" />
                  <Object Name="T_IdBaseSendData" ObjectId="0451610a-dd37-4a2d-b093-9eed77a1d992" />
                  <Object Name="FB_IdBaseRecvDch" ObjectId="027a6878-45dc-4329-a3ee-28dda31b0de4">
                    <Object Name="GetData" ObjectId="fde4a3d6-d56a-4699-9ab5-83ee683f7bc6" />
                    <Object Name="InitChannel" ObjectId="35fba11f-13bb-4a56-a8bf-29ffa9343d7f" />
                  </Object>
                  <Object Name="FB_IdBaseSendDch" ObjectId="6f22794b-8dcb-4cb2-be2d-7f87492cd223">
                    <Object Name="SendData" ObjectId="39e78c68-b8b1-41cb-bb1a-47f5b15ffe3a" />
                    <Object Name="InitChannel" ObjectId="cdb399ac-0df4-49f4-9ed4-51ec87bb41cc" />
                  </Object>
                  <Object Name="IdBaseConst" ObjectId="51e34f2e-f000-4250-a825-02bf8723db30" />
                </Folder>
              </Folder>
            </Folder>
          </Folder>
          <Folder Name="Version">
            <Object Name="Global_Version" ObjectId="6b6dc6af-b87e-41c1-b05f-94651408b334" />
          </Folder>
        </Object>
      </ProjectStructure>
    </data>
  </addData>
</project>